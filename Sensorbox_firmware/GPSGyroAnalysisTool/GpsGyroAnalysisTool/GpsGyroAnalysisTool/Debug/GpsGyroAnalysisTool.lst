
GpsGyroAnalysisTool.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000118b0  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  080118b0  0c0118b0  000198b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1ffe8000  1ffe8000  00028000  2**0
                  ALLOC
  3 .data         000001ac  1ffe8800  0c0118b0  00020800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000075c8  1ffe89b0  0c011a5c  000209b0  2**3
                  ALLOC
  5 ETH_RAM       000030a0  20000000  20000000  00028000  2**2
                  ALLOC
  6 .no_init      00000014  2003ffc0  2003ffc0  00027fc0  2**2
                  ALLOC
  7 .stab         0000009c  00000000  00000000  000209ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .stabstr      0000014d  00000000  00000000  00020a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001be8  00000000  00000000  00020b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002db60  00000000  00000000  00022780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006938  00000000  00000000  000502e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000130fe  00000000  00000000  00056c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00008328  00000000  00000000  00069d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000e5bf  00000000  00000000  00072040  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000ebf7  00000000  00000000  000805ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001868  00000000  00000000  0008f1f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .build_attributes 000016b1  00000000  00000000  00090a5e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	45 38 00 08 99 02 00 08 99 02 00 08 99 02 00 08     E8..............
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 89 d1 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 ed 31 00 08     .............1..
 80001ac:	49 0d 00 08 99 02 00 08 99 02 00 08 99 02 00 08     I...............
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 ad 51 00 08 99 02 00 08 99 02 00 08     .....Q..........
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0118b0 	.word	0x0c0118b0
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	000001ac 	.word	0x000001ac
 8000254:	0c0118b0 	.word	0x0c0118b0
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe89b0 	.word	0x1ffe89b0
 8000264:	000075c8 	.word	0x000075c8
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	000030a0 	.word	0x000030a0

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800e951 	.word	0x0800e951
    blx  r0
#endif

    ldr  r0, =main
 8000294:	0800d1a1 	.word	0x0800d1a1

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ae:	f00c fe6f 	bl	800cf90 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002b2:	f00c feeb 	bl	800d08c <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f00c feb6 	bl	800d050 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800039c:	78fb      	ldrb	r3, [r7, #3]
 800039e:	2201      	movs	r2, #1
 80003a0:	409a      	lsls	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	605a      	str	r2, [r3, #4]
}
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003c2:	409a      	lsls	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
}
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop

080003d4 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003e2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80003fe:	f003 0308 	and.w	r3, r3, #8
 8000402:	2b00      	cmp	r3, #0
 8000404:	bf14      	ite	ne
 8000406:	2301      	movne	r3, #1
 8000408:	2300      	moveq	r3, #0
 800040a:	b2db      	uxtb	r3, r3
}
 800040c:	4618      	mov	r0, r3
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <SPI_MASTER_GetReceivedWord>:
 * external INTERRUPT APP with receive event signals. This API can be used inside the ISR to read the received data.
 * <BR>
 *
 */
__STATIC_INLINE uint16_t SPI_MASTER_GetReceivedWord(const SPI_MASTER_t *const handle)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("SPI_MASTER_GetReceivedWord:handle NULL" , (handle != NULL));
  return XMC_SPI_CH_GetReceivedData(handle->channel);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4618      	mov	r0, r3
 8000426:	f002 f8c9 	bl	80025bc <XMC_SPI_CH_GetReceivedData>
 800042a:	4603      	mov	r3, r0
}
 800042c:	4618      	mov	r0, r3
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <SPI_MASTER_IsRxFIFOEmpty>:
 * When the receive FIFO is empty, received data will be put in receive FIFO.
 * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
 * to read from an empty receive FIFO will set the receive FIFO error flag.
 */
__STATIC_INLINE bool SPI_MASTER_IsRxFIFOEmpty(const SPI_MASTER_t* const handle)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("SPI_MASTER_IsRxFIFOEmpty:handle NULL", (handle != NULL))
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ffd5 	bl	80003f0 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8000446:	4603      	mov	r3, r0
}
 8000448:	4618      	mov	r0, r3
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <cycledelay>:
#include "Header/BMI.h"



void cycledelay(uint32_t cycles)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	volatile uint32_t i;

	for(i = 0UL; i < cycles ;++i)
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	e003      	b.n	8000466 <cycledelay+0x16>
	{
		__NOP();
 800045e:	bf00      	nop

void cycledelay(uint32_t cycles)
{
	volatile uint32_t i;

	for(i = 0UL; i < cycles ;++i)
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	3301      	adds	r3, #1
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	429a      	cmp	r2, r3
 800046c:	d3f7      	bcc.n	800045e <cycledelay+0xe>
	{
		__NOP();
	}
}
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr

08000478 <bmi055_apply_gyro_angle>:

void bmi055_apply_gyro_angle(float* gyro_a, double* gyro_intergral_a, double delta){
 8000478:	b5b0      	push	{r4, r5, r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	e9c7 2300 	strd	r2, r3, [r7]
	//*gyro_intergral_a += (* gyro_a)*delta;
	*gyro_intergral_a += (* gyro_a)*delta;
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	e9d3 4500 	ldrd	r4, r5, [r3]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f00d ff19 	bl	800e2c8 <__aeabi_f2d>
 8000496:	4602      	mov	r2, r0
 8000498:	460b      	mov	r3, r1
 800049a:	4610      	mov	r0, r2
 800049c:	4619      	mov	r1, r3
 800049e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80004a2:	f00d ff65 	bl	800e370 <__aeabi_dmul>
 80004a6:	4602      	mov	r2, r0
 80004a8:	460b      	mov	r3, r1
 80004aa:	4620      	mov	r0, r4
 80004ac:	4629      	mov	r1, r5
 80004ae:	f00d fdad 	bl	800e00c <__adddf3>
 80004b2:	4602      	mov	r2, r0
 80004b4:	460b      	mov	r3, r1
 80004b6:	68b9      	ldr	r1, [r7, #8]
 80004b8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bdb0      	pop	{r4, r5, r7, pc}
 80004c2:	bf00      	nop
 80004c4:	0000      	movs	r0, r0
	...

080004c8 <bmi055_apply_gyro_all_angles>:


void bmi055_apply_gyro_all_angles(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	bmi055_apply_gyro_angle(&gyro_y, &complement_xValue, -0.004);
 80004cc:	480e      	ldr	r0, [pc, #56]	; (8000508 <bmi055_apply_gyro_all_angles+0x40>)
 80004ce:	490f      	ldr	r1, [pc, #60]	; (800050c <bmi055_apply_gyro_all_angles+0x44>)
 80004d0:	a309      	add	r3, pc, #36	; (adr r3, 80004f8 <bmi055_apply_gyro_all_angles+0x30>)
 80004d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004d6:	f7ff ffcf 	bl	8000478 <bmi055_apply_gyro_angle>
	bmi055_apply_gyro_angle(&gyro_x, &complement_yValue, 0.004);
 80004da:	480d      	ldr	r0, [pc, #52]	; (8000510 <bmi055_apply_gyro_all_angles+0x48>)
 80004dc:	490d      	ldr	r1, [pc, #52]	; (8000514 <bmi055_apply_gyro_all_angles+0x4c>)
 80004de:	a308      	add	r3, pc, #32	; (adr r3, 8000500 <bmi055_apply_gyro_all_angles+0x38>)
 80004e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004e4:	f7ff ffc8 	bl	8000478 <bmi055_apply_gyro_angle>
	bmi055_apply_gyro_angle(&gyro_y, &complement_zValue, -0.004);
 80004e8:	4807      	ldr	r0, [pc, #28]	; (8000508 <bmi055_apply_gyro_all_angles+0x40>)
 80004ea:	490b      	ldr	r1, [pc, #44]	; (8000518 <bmi055_apply_gyro_all_angles+0x50>)
 80004ec:	a302      	add	r3, pc, #8	; (adr r3, 80004f8 <bmi055_apply_gyro_all_angles+0x30>)
 80004ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004f2:	f7ff ffc1 	bl	8000478 <bmi055_apply_gyro_angle>

}
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80004fc:	bf70624d 	.word	0xbf70624d
 8000500:	d2f1a9fc 	.word	0xd2f1a9fc
 8000504:	3f70624d 	.word	0x3f70624d
 8000508:	1ffe8c24 	.word	0x1ffe8c24
 800050c:	1ffe8d28 	.word	0x1ffe8d28
 8000510:	1ffe8c98 	.word	0x1ffe8c98
 8000514:	1ffe8c68 	.word	0x1ffe8c68
 8000518:	1ffe8c70 	.word	0x1ffe8c70
 800051c:	f3af 8000 	nop.w

08000520 <bmi055_apply_accel_all_angles>:
//

void bmi055_apply_accel_all_angles(){
 8000520:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000524:	b08c      	sub	sp, #48	; 0x30
 8000526:	af00      	add	r7, sp, #0
		num_of_samples++;
 8000528:	4baf      	ldr	r3, [pc, #700]	; (80007e8 <bmi055_apply_accel_all_angles+0x2c8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	4aae      	ldr	r2, [pc, #696]	; (80007e8 <bmi055_apply_accel_all_angles+0x2c8>)
 8000530:	6013      	str	r3, [r2, #0]
		//if(filterValue > 0.1 &&  filterValue < 1.9 )
		//{
			//add angle code here...
		//}

		double accel_angle_div_x = sqrt((acc_y)*(acc_y)+ (acc_z)*(acc_z));
 8000532:	4bae      	ldr	r3, [pc, #696]	; (80007ec <bmi055_apply_accel_all_angles+0x2cc>)
 8000534:	ed93 7a00 	vldr	s14, [r3]
 8000538:	4bac      	ldr	r3, [pc, #688]	; (80007ec <bmi055_apply_accel_all_angles+0x2cc>)
 800053a:	edd3 7a00 	vldr	s15, [r3]
 800053e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000542:	4bab      	ldr	r3, [pc, #684]	; (80007f0 <bmi055_apply_accel_all_angles+0x2d0>)
 8000544:	edd3 6a00 	vldr	s13, [r3]
 8000548:	4ba9      	ldr	r3, [pc, #676]	; (80007f0 <bmi055_apply_accel_all_angles+0x2d0>)
 800054a:	edd3 7a00 	vldr	s15, [r3]
 800054e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000556:	ee17 0a90 	vmov	r0, s15
 800055a:	f00d feb5 	bl	800e2c8 <__aeabi_f2d>
 800055e:	4602      	mov	r2, r0
 8000560:	460b      	mov	r3, r1
 8000562:	4610      	mov	r0, r2
 8000564:	4619      	mov	r1, r3
 8000566:	f00d fc03 	bl	800dd70 <sqrt>
 800056a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		// this if statement prevent division by zero.
		if(accel_angle_div_x > 0.0){
 800056e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000572:	f04f 0200 	mov.w	r2, #0
 8000576:	f04f 0300 	mov.w	r3, #0
 800057a:	f00e f989 	bl	800e890 <__aeabi_dcmpgt>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d035      	beq.n	80005f0 <bmi055_apply_accel_all_angles+0xd0>
			double accel_angle_x = atan((acc_x)/ accel_angle_div_x);
 8000584:	4b9b      	ldr	r3, [pc, #620]	; (80007f4 <bmi055_apply_accel_all_angles+0x2d4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f00d fe9d 	bl	800e2c8 <__aeabi_f2d>
 800058e:	4602      	mov	r2, r0
 8000590:	460b      	mov	r3, r1
 8000592:	4610      	mov	r0, r2
 8000594:	4619      	mov	r1, r3
 8000596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800059a:	f00e f813 	bl	800e5c4 <__aeabi_ddiv>
 800059e:	4602      	mov	r2, r0
 80005a0:	460b      	mov	r3, r1
 80005a2:	4610      	mov	r0, r2
 80005a4:	4619      	mov	r1, r3
 80005a6:	f00d fa3f 	bl	800da28 <atan>
 80005aa:	e9c7 0108 	strd	r0, r1, [r7, #32]
			complement_xValue = ((complement_xValue*0.8)+ (accel_angle_x*0.2));
 80005ae:	4b92      	ldr	r3, [pc, #584]	; (80007f8 <bmi055_apply_accel_all_angles+0x2d8>)
 80005b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005b4:	4610      	mov	r0, r2
 80005b6:	4619      	mov	r1, r3
 80005b8:	a387      	add	r3, pc, #540	; (adr r3, 80007d8 <bmi055_apply_accel_all_angles+0x2b8>)
 80005ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005be:	f00d fed7 	bl	800e370 <__aeabi_dmul>
 80005c2:	4602      	mov	r2, r0
 80005c4:	460b      	mov	r3, r1
 80005c6:	4690      	mov	r8, r2
 80005c8:	4699      	mov	r9, r3
 80005ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80005ce:	a384      	add	r3, pc, #528	; (adr r3, 80007e0 <bmi055_apply_accel_all_angles+0x2c0>)
 80005d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005d4:	f00d fecc 	bl	800e370 <__aeabi_dmul>
 80005d8:	4602      	mov	r2, r0
 80005da:	460b      	mov	r3, r1
 80005dc:	4640      	mov	r0, r8
 80005de:	4649      	mov	r1, r9
 80005e0:	f00d fd14 	bl	800e00c <__adddf3>
 80005e4:	4602      	mov	r2, r0
 80005e6:	460b      	mov	r3, r1
 80005e8:	4983      	ldr	r1, [pc, #524]	; (80007f8 <bmi055_apply_accel_all_angles+0x2d8>)
 80005ea:	e9c1 2300 	strd	r2, r3, [r1]
 80005ee:	e00e      	b.n	800060e <bmi055_apply_accel_all_angles+0xee>
		}
		else{
			complement_xValue = (complement_xValue*0.8);
 80005f0:	4b81      	ldr	r3, [pc, #516]	; (80007f8 <bmi055_apply_accel_all_angles+0x2d8>)
 80005f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005f6:	4610      	mov	r0, r2
 80005f8:	4619      	mov	r1, r3
 80005fa:	a377      	add	r3, pc, #476	; (adr r3, 80007d8 <bmi055_apply_accel_all_angles+0x2b8>)
 80005fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000600:	f00d feb6 	bl	800e370 <__aeabi_dmul>
 8000604:	4602      	mov	r2, r0
 8000606:	460b      	mov	r3, r1
 8000608:	497b      	ldr	r1, [pc, #492]	; (80007f8 <bmi055_apply_accel_all_angles+0x2d8>)
 800060a:	e9c1 2300 	strd	r2, r3, [r1]
		}

		//first atan2 was used but atan is faster. You can always revert this code
		//double accel_angle_x = atan2((bmi055_mat.acc_x), (bmi055_mat.acc_y)*(bmi055_mat.acc_y)+ (bmi055_mat.acc_z)*(bmi055_mat.acc_z));

		double accel_angle_div_y = sqrt((acc_z)*(acc_z)+ (acc_x)*(acc_x));
 800060e:	4b78      	ldr	r3, [pc, #480]	; (80007f0 <bmi055_apply_accel_all_angles+0x2d0>)
 8000610:	ed93 7a00 	vldr	s14, [r3]
 8000614:	4b76      	ldr	r3, [pc, #472]	; (80007f0 <bmi055_apply_accel_all_angles+0x2d0>)
 8000616:	edd3 7a00 	vldr	s15, [r3]
 800061a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800061e:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <bmi055_apply_accel_all_angles+0x2d4>)
 8000620:	edd3 6a00 	vldr	s13, [r3]
 8000624:	4b73      	ldr	r3, [pc, #460]	; (80007f4 <bmi055_apply_accel_all_angles+0x2d4>)
 8000626:	edd3 7a00 	vldr	s15, [r3]
 800062a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800062e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000632:	ee17 0a90 	vmov	r0, s15
 8000636:	f00d fe47 	bl	800e2c8 <__aeabi_f2d>
 800063a:	4602      	mov	r2, r0
 800063c:	460b      	mov	r3, r1
 800063e:	4610      	mov	r0, r2
 8000640:	4619      	mov	r1, r3
 8000642:	f00d fb95 	bl	800dd70 <sqrt>
 8000646:	e9c7 0106 	strd	r0, r1, [r7, #24]
		if(accel_angle_div_y > 0.0){
 800064a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800064e:	f04f 0200 	mov.w	r2, #0
 8000652:	f04f 0300 	mov.w	r3, #0
 8000656:	f00e f91b 	bl	800e890 <__aeabi_dcmpgt>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d035      	beq.n	80006cc <bmi055_apply_accel_all_angles+0x1ac>
			double accel_angle_y = atan((acc_y)/accel_angle_div_y);
 8000660:	4b62      	ldr	r3, [pc, #392]	; (80007ec <bmi055_apply_accel_all_angles+0x2cc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f00d fe2f 	bl	800e2c8 <__aeabi_f2d>
 800066a:	4602      	mov	r2, r0
 800066c:	460b      	mov	r3, r1
 800066e:	4610      	mov	r0, r2
 8000670:	4619      	mov	r1, r3
 8000672:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000676:	f00d ffa5 	bl	800e5c4 <__aeabi_ddiv>
 800067a:	4602      	mov	r2, r0
 800067c:	460b      	mov	r3, r1
 800067e:	4610      	mov	r0, r2
 8000680:	4619      	mov	r1, r3
 8000682:	f00d f9d1 	bl	800da28 <atan>
 8000686:	e9c7 0104 	strd	r0, r1, [r7, #16]
			complement_yValue = ((complement_yValue*0.8)+ (accel_angle_y*0.2));
 800068a:	4b5c      	ldr	r3, [pc, #368]	; (80007fc <bmi055_apply_accel_all_angles+0x2dc>)
 800068c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000690:	4610      	mov	r0, r2
 8000692:	4619      	mov	r1, r3
 8000694:	a350      	add	r3, pc, #320	; (adr r3, 80007d8 <bmi055_apply_accel_all_angles+0x2b8>)
 8000696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800069a:	f00d fe69 	bl	800e370 <__aeabi_dmul>
 800069e:	4602      	mov	r2, r0
 80006a0:	460b      	mov	r3, r1
 80006a2:	4690      	mov	r8, r2
 80006a4:	4699      	mov	r9, r3
 80006a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80006aa:	a34d      	add	r3, pc, #308	; (adr r3, 80007e0 <bmi055_apply_accel_all_angles+0x2c0>)
 80006ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006b0:	f00d fe5e 	bl	800e370 <__aeabi_dmul>
 80006b4:	4602      	mov	r2, r0
 80006b6:	460b      	mov	r3, r1
 80006b8:	4640      	mov	r0, r8
 80006ba:	4649      	mov	r1, r9
 80006bc:	f00d fca6 	bl	800e00c <__adddf3>
 80006c0:	4602      	mov	r2, r0
 80006c2:	460b      	mov	r3, r1
 80006c4:	494d      	ldr	r1, [pc, #308]	; (80007fc <bmi055_apply_accel_all_angles+0x2dc>)
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
 80006ca:	e00e      	b.n	80006ea <bmi055_apply_accel_all_angles+0x1ca>
		}
		else{
			complement_yValue = (complement_yValue*0.8);
 80006cc:	4b4b      	ldr	r3, [pc, #300]	; (80007fc <bmi055_apply_accel_all_angles+0x2dc>)
 80006ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006d2:	4610      	mov	r0, r2
 80006d4:	4619      	mov	r1, r3
 80006d6:	a340      	add	r3, pc, #256	; (adr r3, 80007d8 <bmi055_apply_accel_all_angles+0x2b8>)
 80006d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006dc:	f00d fe48 	bl	800e370 <__aeabi_dmul>
 80006e0:	4602      	mov	r2, r0
 80006e2:	460b      	mov	r3, r1
 80006e4:	4945      	ldr	r1, [pc, #276]	; (80007fc <bmi055_apply_accel_all_angles+0x2dc>)
 80006e6:	e9c1 2300 	strd	r2, r3, [r1]
		}

		//first atan2 was used but atan is faster. You can always revert this code
		//double accel_angle =  atan2(sqrt(acc_u*acc_u + acc_v*acc_v), acc_w);

		double accel_angle_div_z = sqrt((acc_x)*(acc_x) + (acc_y)*(acc_y));
 80006ea:	4b42      	ldr	r3, [pc, #264]	; (80007f4 <bmi055_apply_accel_all_angles+0x2d4>)
 80006ec:	ed93 7a00 	vldr	s14, [r3]
 80006f0:	4b40      	ldr	r3, [pc, #256]	; (80007f4 <bmi055_apply_accel_all_angles+0x2d4>)
 80006f2:	edd3 7a00 	vldr	s15, [r3]
 80006f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006fa:	4b3c      	ldr	r3, [pc, #240]	; (80007ec <bmi055_apply_accel_all_angles+0x2cc>)
 80006fc:	edd3 6a00 	vldr	s13, [r3]
 8000700:	4b3a      	ldr	r3, [pc, #232]	; (80007ec <bmi055_apply_accel_all_angles+0x2cc>)
 8000702:	edd3 7a00 	vldr	s15, [r3]
 8000706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800070a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800070e:	ee17 0a90 	vmov	r0, s15
 8000712:	f00d fdd9 	bl	800e2c8 <__aeabi_f2d>
 8000716:	4602      	mov	r2, r0
 8000718:	460b      	mov	r3, r1
 800071a:	4610      	mov	r0, r2
 800071c:	4619      	mov	r1, r3
 800071e:	f00d fb27 	bl	800dd70 <sqrt>
 8000722:	e9c7 0102 	strd	r0, r1, [r7, #8]
		if(accel_angle_div_z > 0.0){
 8000726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800072a:	f04f 0200 	mov.w	r2, #0
 800072e:	f04f 0300 	mov.w	r3, #0
 8000732:	f00e f8ad 	bl	800e890 <__aeabi_dcmpgt>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d035      	beq.n	80007a8 <bmi055_apply_accel_all_angles+0x288>
		double accel_angle_z  =  atan((acc_z)/accel_angle_div_z);
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <bmi055_apply_accel_all_angles+0x2d0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f00d fdc1 	bl	800e2c8 <__aeabi_f2d>
 8000746:	4602      	mov	r2, r0
 8000748:	460b      	mov	r3, r1
 800074a:	4610      	mov	r0, r2
 800074c:	4619      	mov	r1, r3
 800074e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000752:	f00d ff37 	bl	800e5c4 <__aeabi_ddiv>
 8000756:	4602      	mov	r2, r0
 8000758:	460b      	mov	r3, r1
 800075a:	4610      	mov	r0, r2
 800075c:	4619      	mov	r1, r3
 800075e:	f00d f963 	bl	800da28 <atan>
 8000762:	e9c7 0100 	strd	r0, r1, [r7]
			complement_zValue = ((complement_zValue*0.8)+ (accel_angle_z*0.2));
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <bmi055_apply_accel_all_angles+0x2e0>)
 8000768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800076c:	4610      	mov	r0, r2
 800076e:	4619      	mov	r1, r3
 8000770:	a319      	add	r3, pc, #100	; (adr r3, 80007d8 <bmi055_apply_accel_all_angles+0x2b8>)
 8000772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000776:	f00d fdfb 	bl	800e370 <__aeabi_dmul>
 800077a:	4602      	mov	r2, r0
 800077c:	460b      	mov	r3, r1
 800077e:	4614      	mov	r4, r2
 8000780:	461d      	mov	r5, r3
 8000782:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000786:	a316      	add	r3, pc, #88	; (adr r3, 80007e0 <bmi055_apply_accel_all_angles+0x2c0>)
 8000788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078c:	f00d fdf0 	bl	800e370 <__aeabi_dmul>
 8000790:	4602      	mov	r2, r0
 8000792:	460b      	mov	r3, r1
 8000794:	4620      	mov	r0, r4
 8000796:	4629      	mov	r1, r5
 8000798:	f00d fc38 	bl	800e00c <__adddf3>
 800079c:	4602      	mov	r2, r0
 800079e:	460b      	mov	r3, r1
 80007a0:	4917      	ldr	r1, [pc, #92]	; (8000800 <bmi055_apply_accel_all_angles+0x2e0>)
 80007a2:	e9c1 2300 	strd	r2, r3, [r1]
 80007a6:	e011      	b.n	80007cc <bmi055_apply_accel_all_angles+0x2ac>
		}
		else{

			complement_zValue = -(complement_zValue*0.8);
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <bmi055_apply_accel_all_angles+0x2e0>)
 80007aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ae:	4610      	mov	r0, r2
 80007b0:	4619      	mov	r1, r3
 80007b2:	a309      	add	r3, pc, #36	; (adr r3, 80007d8 <bmi055_apply_accel_all_angles+0x2b8>)
 80007b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007b8:	f00d fdda 	bl	800e370 <__aeabi_dmul>
 80007bc:	4602      	mov	r2, r0
 80007be:	460b      	mov	r3, r1
 80007c0:	4614      	mov	r4, r2
 80007c2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <bmi055_apply_accel_all_angles+0x2e0>)
 80007c8:	e9c3 4500 	strd	r4, r5, [r3]

//		angle_vec.x = intergrated_complement_x;
//		angle_vec.y = intergrated_complement_y;
//		angle_vec.z = intergrated_complement_z;

}
 80007cc:	3730      	adds	r7, #48	; 0x30
 80007ce:	46bd      	mov	sp, r7
 80007d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80007d4:	f3af 8000 	nop.w
 80007d8:	9999999a 	.word	0x9999999a
 80007dc:	3fe99999 	.word	0x3fe99999
 80007e0:	9999999a 	.word	0x9999999a
 80007e4:	3fc99999 	.word	0x3fc99999
 80007e8:	1ffe8ce8 	.word	0x1ffe8ce8
 80007ec:	1ffe8c08 	.word	0x1ffe8c08
 80007f0:	1ffe8e00 	.word	0x1ffe8e00
 80007f4:	1ffe8d08 	.word	0x1ffe8d08
 80007f8:	1ffe8d28 	.word	0x1ffe8d28
 80007fc:	1ffe8c68 	.word	0x1ffe8c68
 8000800:	1ffe8c70 	.word	0x1ffe8c70
 8000804:	f3af 8000 	nop.w

08000808 <bmi055_start>:


void bmi055_start(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
		SPI_MASTER_SetBaudRate(&SPI_MASTER_0, SPI_MASTER_0.config->channel_config->baudrate);
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <bmi055_start+0x5c>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4813      	ldr	r0, [pc, #76]	; (8000864 <bmi055_start+0x5c>)
 8000816:	4619      	mov	r1, r3
 8000818:	f003 f980 	bl	8003b1c <SPI_MASTER_SetBaudRate>
		XMC_GPIO_SetMode(BMI_CSA_PORT, BMI_CSA_PIN, BMI_CSA_MODE);
 800081c:	4812      	ldr	r0, [pc, #72]	; (8000868 <bmi055_start+0x60>)
 800081e:	2106      	movs	r1, #6
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	f001 fde7 	bl	80023f4 <XMC_GPIO_SetMode>
		XMC_GPIO_SetMode(BMI_CSG_PORT, BMI_CSG_PIN, BMI_CSG_MODE);
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <bmi055_start+0x64>)
 8000828:	2106      	movs	r1, #6
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	f001 fde2 	bl	80023f4 <XMC_GPIO_SetMode>

		cycledelay((uint32_t)(145 * 2));
 8000830:	f44f 7091 	mov.w	r0, #290	; 0x122
 8000834:	f7ff fe0c 	bl	8000450 <cycledelay>

		XMC_GPIO_SetOutputHigh(BMI_CSA_PORT, BMI_CSA_PIN);
 8000838:	480b      	ldr	r0, [pc, #44]	; (8000868 <bmi055_start+0x60>)
 800083a:	2106      	movs	r1, #6
 800083c:	f7ff fda8 	bl	8000390 <XMC_GPIO_SetOutputHigh>
		XMC_GPIO_SetOutputHigh(BMI_CSG_PORT, BMI_CSG_PIN);
 8000840:	480a      	ldr	r0, [pc, #40]	; (800086c <bmi055_start+0x64>)
 8000842:	2106      	movs	r1, #6
 8000844:	f7ff fda4 	bl	8000390 <XMC_GPIO_SetOutputHigh>

		spi_flushrxbuffer(&SPI_MASTER_0);
 8000848:	4806      	ldr	r0, [pc, #24]	; (8000864 <bmi055_start+0x5c>)
 800084a:	f000 fa19 	bl	8000c80 <spi_flushrxbuffer>

		memset(acceleration_register, 0, 4);
 800084e:	4808      	ldr	r0, [pc, #32]	; (8000870 <bmi055_start+0x68>)
 8000850:	2100      	movs	r1, #0
 8000852:	2204      	movs	r2, #4
 8000854:	f00e f8cd 	bl	800e9f2 <memset>
		memset(gyro_register, 0, 4);
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <bmi055_start+0x6c>)
 800085a:	2100      	movs	r1, #0
 800085c:	2204      	movs	r2, #4
 800085e:	f00e f8c8 	bl	800e9f2 <memset>
}
 8000862:	bd80      	pop	{r7, pc}
 8000864:	1ffe8880 	.word	0x1ffe8880
 8000868:	48028200 	.word	0x48028200
 800086c:	48028500 	.word	0x48028500
 8000870:	1ffe8c38 	.word	0x1ffe8c38
 8000874:	1ffe8c48 	.word	0x1ffe8c48

08000878 <bmi055_poll_data>:


void bmi055_poll_data(){
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0


		uint16_t opcode = BMI_DATAREG_START;
 800087e:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8000882:	803b      	strh	r3, [r7, #0]

		//poll data from accelerometer
		spi_flushrxbuffer(&SPI_MASTER_0);
 8000884:	48ba      	ldr	r0, [pc, #744]	; (8000b70 <bmi055_poll_data+0x2f8>)
 8000886:	f000 f9fb 	bl	8000c80 <spi_flushrxbuffer>
		XMC_GPIO_SetOutputLow(BMI_CSA_PORT, BMI_CSA_PIN);
 800088a:	48ba      	ldr	r0, [pc, #744]	; (8000b74 <bmi055_poll_data+0x2fc>)
 800088c:	2106      	movs	r1, #6
 800088e:	f7ff fd8f 	bl	80003b0 <XMC_GPIO_SetOutputLow>
		SPI_MASTER_Transfer(&SPI_MASTER_0, (uint8_t *)&opcode, (uint8_t*)acceleration_register, 4);
 8000892:	463b      	mov	r3, r7
 8000894:	48b6      	ldr	r0, [pc, #728]	; (8000b70 <bmi055_poll_data+0x2f8>)
 8000896:	4619      	mov	r1, r3
 8000898:	4ab7      	ldr	r2, [pc, #732]	; (8000b78 <bmi055_poll_data+0x300>)
 800089a:	2304      	movs	r3, #4
 800089c:	f003 f994 	bl	8003bc8 <SPI_MASTER_Transfer>
		XMC_GPIO_SetOutputHigh(BMI_CSA_PORT, BMI_CSA_PIN);
 80008a0:	48b4      	ldr	r0, [pc, #720]	; (8000b74 <bmi055_poll_data+0x2fc>)
 80008a2:	2106      	movs	r1, #6
 80008a4:	f7ff fd74 	bl	8000390 <XMC_GPIO_SetOutputHigh>

		//poll data from gyroscope
		spi_flushrxbuffer(&SPI_MASTER_0);
 80008a8:	48b1      	ldr	r0, [pc, #708]	; (8000b70 <bmi055_poll_data+0x2f8>)
 80008aa:	f000 f9e9 	bl	8000c80 <spi_flushrxbuffer>
		XMC_GPIO_SetOutputLow(BMI_CSG_PORT, BMI_CSG_PIN);
 80008ae:	48b3      	ldr	r0, [pc, #716]	; (8000b7c <bmi055_poll_data+0x304>)
 80008b0:	2106      	movs	r1, #6
 80008b2:	f7ff fd7d 	bl	80003b0 <XMC_GPIO_SetOutputLow>
		SPI_MASTER_Transfer(&SPI_MASTER_0, (uint8_t *)&opcode, (uint8_t*)gyro_register, 4);
 80008b6:	463b      	mov	r3, r7
 80008b8:	48ad      	ldr	r0, [pc, #692]	; (8000b70 <bmi055_poll_data+0x2f8>)
 80008ba:	4619      	mov	r1, r3
 80008bc:	4ab0      	ldr	r2, [pc, #704]	; (8000b80 <bmi055_poll_data+0x308>)
 80008be:	2304      	movs	r3, #4
 80008c0:	f003 f982 	bl	8003bc8 <SPI_MASTER_Transfer>
		XMC_GPIO_SetOutputHigh(BMI_CSG_PORT, BMI_CSG_PIN);
 80008c4:	48ad      	ldr	r0, [pc, #692]	; (8000b7c <bmi055_poll_data+0x304>)
 80008c6:	2106      	movs	r1, #6
 80008c8:	f7ff fd62 	bl	8000390 <XMC_GPIO_SetOutputHigh>


		acceleration_register_copy = (uint8_t*)acceleration_register;
 80008cc:	4bad      	ldr	r3, [pc, #692]	; (8000b84 <bmi055_poll_data+0x30c>)
 80008ce:	4aaa      	ldr	r2, [pc, #680]	; (8000b78 <bmi055_poll_data+0x300>)
 80008d0:	601a      	str	r2, [r3, #0]
		gyro_register_copy = (uint8_t*)gyro_register;
 80008d2:	4bad      	ldr	r3, [pc, #692]	; (8000b88 <bmi055_poll_data+0x310>)
 80008d4:	4aaa      	ldr	r2, [pc, #680]	; (8000b80 <bmi055_poll_data+0x308>)
 80008d6:	601a      	str	r2, [r3, #0]

		//merge accelerometer data NOTE: data may not be merged as expected because the first byte in the array is a dummy byte.
		int16_t acc_xValue = (((int16_t)(acceleration_register_copy[3] << 8) | acceleration_register_copy[0]) >> 4);
 80008d8:	4baa      	ldr	r3, [pc, #680]	; (8000b84 <bmi055_poll_data+0x30c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	3303      	adds	r3, #3
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	021b      	lsls	r3, r3, #8
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	4aa7      	ldr	r2, [pc, #668]	; (8000b84 <bmi055_poll_data+0x30c>)
 80008e8:	6812      	ldr	r2, [r2, #0]
 80008ea:	7812      	ldrb	r2, [r2, #0]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	111b      	asrs	r3, r3, #4
 80008f0:	80fb      	strh	r3, [r7, #6]
		int16_t acc_yValue = (((int16_t)(acceleration_register_copy[5] << 8) | acceleration_register_copy[2]) >> 4);
 80008f2:	4ba4      	ldr	r3, [pc, #656]	; (8000b84 <bmi055_poll_data+0x30c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3305      	adds	r3, #5
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	021b      	lsls	r3, r3, #8
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4aa0      	ldr	r2, [pc, #640]	; (8000b84 <bmi055_poll_data+0x30c>)
 8000902:	6812      	ldr	r2, [r2, #0]
 8000904:	3202      	adds	r2, #2
 8000906:	7812      	ldrb	r2, [r2, #0]
 8000908:	4313      	orrs	r3, r2
 800090a:	111b      	asrs	r3, r3, #4
 800090c:	80bb      	strh	r3, [r7, #4]
		int16_t acc_zValue = (((int16_t)(acceleration_register_copy[7] << 8) | acceleration_register_copy[4]) >> 4);
 800090e:	4b9d      	ldr	r3, [pc, #628]	; (8000b84 <bmi055_poll_data+0x30c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	3307      	adds	r3, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	021b      	lsls	r3, r3, #8
 8000918:	b29b      	uxth	r3, r3
 800091a:	b21b      	sxth	r3, r3
 800091c:	4a99      	ldr	r2, [pc, #612]	; (8000b84 <bmi055_poll_data+0x30c>)
 800091e:	6812      	ldr	r2, [r2, #0]
 8000920:	3204      	adds	r2, #4
 8000922:	7812      	ldrb	r2, [r2, #0]
 8000924:	4313      	orrs	r3, r2
 8000926:	111b      	asrs	r3, r3, #4
 8000928:	807b      	strh	r3, [r7, #2]


		acc_x = -(acc_xValue*(2.0f / 2048.0f)) * 0.98;
 800092a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800092e:	ee07 3a90 	vmov	s15, r3
 8000932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000936:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8000b8c <bmi055_poll_data+0x314>
 800093a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800093e:	eef1 7a67 	vneg.f32	s15, s15
 8000942:	ee17 3a90 	vmov	r3, s15
 8000946:	4618      	mov	r0, r3
 8000948:	f00d fcbe 	bl	800e2c8 <__aeabi_f2d>
 800094c:	4602      	mov	r2, r0
 800094e:	460b      	mov	r3, r1
 8000950:	4610      	mov	r0, r2
 8000952:	4619      	mov	r1, r3
 8000954:	a380      	add	r3, pc, #512	; (adr r3, 8000b58 <bmi055_poll_data+0x2e0>)
 8000956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800095a:	f00d fd09 	bl	800e370 <__aeabi_dmul>
 800095e:	4602      	mov	r2, r0
 8000960:	460b      	mov	r3, r1
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	f00d ff9d 	bl	800e8a4 <__aeabi_d2f>
 800096a:	4602      	mov	r2, r0
 800096c:	4b88      	ldr	r3, [pc, #544]	; (8000b90 <bmi055_poll_data+0x318>)
 800096e:	601a      	str	r2, [r3, #0]
		acc_y = (acc_yValue*(2.0f / 2048.0f)) * 0.98;
 8000970:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000974:	ee07 3a90 	vmov	s15, r3
 8000978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8000b8c <bmi055_poll_data+0x314>
 8000980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000984:	ee17 0a90 	vmov	r0, s15
 8000988:	f00d fc9e 	bl	800e2c8 <__aeabi_f2d>
 800098c:	4602      	mov	r2, r0
 800098e:	460b      	mov	r3, r1
 8000990:	4610      	mov	r0, r2
 8000992:	4619      	mov	r1, r3
 8000994:	a370      	add	r3, pc, #448	; (adr r3, 8000b58 <bmi055_poll_data+0x2e0>)
 8000996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800099a:	f00d fce9 	bl	800e370 <__aeabi_dmul>
 800099e:	4602      	mov	r2, r0
 80009a0:	460b      	mov	r3, r1
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	f00d ff7d 	bl	800e8a4 <__aeabi_d2f>
 80009aa:	4602      	mov	r2, r0
 80009ac:	4b79      	ldr	r3, [pc, #484]	; (8000b94 <bmi055_poll_data+0x31c>)
 80009ae:	601a      	str	r2, [r3, #0]
		acc_z = -(acc_zValue*(2.0f / 2048.0f)) * 0.98;
 80009b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80009b4:	ee07 3a90 	vmov	s15, r3
 80009b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009bc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8000b8c <bmi055_poll_data+0x314>
 80009c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c4:	eef1 7a67 	vneg.f32	s15, s15
 80009c8:	ee17 3a90 	vmov	r3, s15
 80009cc:	4618      	mov	r0, r3
 80009ce:	f00d fc7b 	bl	800e2c8 <__aeabi_f2d>
 80009d2:	4602      	mov	r2, r0
 80009d4:	460b      	mov	r3, r1
 80009d6:	4610      	mov	r0, r2
 80009d8:	4619      	mov	r1, r3
 80009da:	a35f      	add	r3, pc, #380	; (adr r3, 8000b58 <bmi055_poll_data+0x2e0>)
 80009dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e0:	f00d fcc6 	bl	800e370 <__aeabi_dmul>
 80009e4:	4602      	mov	r2, r0
 80009e6:	460b      	mov	r3, r1
 80009e8:	4610      	mov	r0, r2
 80009ea:	4619      	mov	r1, r3
 80009ec:	f00d ff5a 	bl	800e8a4 <__aeabi_d2f>
 80009f0:	4602      	mov	r2, r0
 80009f2:	4b69      	ldr	r3, [pc, #420]	; (8000b98 <bmi055_poll_data+0x320>)
 80009f4:	601a      	str	r2, [r3, #0]

		acc_x_ms2 = acc_x*GRAVITY_MS;
 80009f6:	4b66      	ldr	r3, [pc, #408]	; (8000b90 <bmi055_poll_data+0x318>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f00d fc64 	bl	800e2c8 <__aeabi_f2d>
 8000a00:	4602      	mov	r2, r0
 8000a02:	460b      	mov	r3, r1
 8000a04:	4610      	mov	r0, r2
 8000a06:	4619      	mov	r1, r3
 8000a08:	a355      	add	r3, pc, #340	; (adr r3, 8000b60 <bmi055_poll_data+0x2e8>)
 8000a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a0e:	f00d fcaf 	bl	800e370 <__aeabi_dmul>
 8000a12:	4602      	mov	r2, r0
 8000a14:	460b      	mov	r3, r1
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f00d ff43 	bl	800e8a4 <__aeabi_d2f>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	4b5e      	ldr	r3, [pc, #376]	; (8000b9c <bmi055_poll_data+0x324>)
 8000a22:	601a      	str	r2, [r3, #0]
		acc_y_ms2 = acc_y*GRAVITY_MS;
 8000a24:	4b5b      	ldr	r3, [pc, #364]	; (8000b94 <bmi055_poll_data+0x31c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f00d fc4d 	bl	800e2c8 <__aeabi_f2d>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	460b      	mov	r3, r1
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	a34a      	add	r3, pc, #296	; (adr r3, 8000b60 <bmi055_poll_data+0x2e8>)
 8000a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a3c:	f00d fc98 	bl	800e370 <__aeabi_dmul>
 8000a40:	4602      	mov	r2, r0
 8000a42:	460b      	mov	r3, r1
 8000a44:	4610      	mov	r0, r2
 8000a46:	4619      	mov	r1, r3
 8000a48:	f00d ff2c 	bl	800e8a4 <__aeabi_d2f>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	4b54      	ldr	r3, [pc, #336]	; (8000ba0 <bmi055_poll_data+0x328>)
 8000a50:	601a      	str	r2, [r3, #0]
		acc_z_ms2 = acc_z*GRAVITY_MS;
 8000a52:	4b51      	ldr	r3, [pc, #324]	; (8000b98 <bmi055_poll_data+0x320>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f00d fc36 	bl	800e2c8 <__aeabi_f2d>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	460b      	mov	r3, r1
 8000a60:	4610      	mov	r0, r2
 8000a62:	4619      	mov	r1, r3
 8000a64:	a33e      	add	r3, pc, #248	; (adr r3, 8000b60 <bmi055_poll_data+0x2e8>)
 8000a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a6a:	f00d fc81 	bl	800e370 <__aeabi_dmul>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	460b      	mov	r3, r1
 8000a72:	4610      	mov	r0, r2
 8000a74:	4619      	mov	r1, r3
 8000a76:	f00d ff15 	bl	800e8a4 <__aeabi_d2f>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	4b49      	ldr	r3, [pc, #292]	; (8000ba4 <bmi055_poll_data+0x32c>)
 8000a7e:	601a      	str	r2, [r3, #0]

		ms_xValue = acc_x_ms2;
 8000a80:	4b46      	ldr	r3, [pc, #280]	; (8000b9c <bmi055_poll_data+0x324>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f00d fc1f 	bl	800e2c8 <__aeabi_f2d>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	4946      	ldr	r1, [pc, #280]	; (8000ba8 <bmi055_poll_data+0x330>)
 8000a90:	e9c1 2300 	strd	r2, r3, [r1]
		ms_yValue = acc_y_ms2;
 8000a94:	4b42      	ldr	r3, [pc, #264]	; (8000ba0 <bmi055_poll_data+0x328>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00d fc15 	bl	800e2c8 <__aeabi_f2d>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	4942      	ldr	r1, [pc, #264]	; (8000bac <bmi055_poll_data+0x334>)
 8000aa4:	e9c1 2300 	strd	r2, r3, [r1]
		ms_zValue = acc_z_ms2;
 8000aa8:	4b3e      	ldr	r3, [pc, #248]	; (8000ba4 <bmi055_poll_data+0x32c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f00d fc0b 	bl	800e2c8 <__aeabi_f2d>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	493e      	ldr	r1, [pc, #248]	; (8000bb0 <bmi055_poll_data+0x338>)
 8000ab8:	e9c1 2300 	strd	r2, r3, [r1]


		//merge gyroscope data NOTE: data may not be merged as expected because the first byte in the array is a dummy byte.
		gyro_xValue = (((int16_t)(gyro_register_copy[3] << 8) | gyro_register_copy[0]));
 8000abc:	4b32      	ldr	r3, [pc, #200]	; (8000b88 <bmi055_poll_data+0x310>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3303      	adds	r3, #3
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <bmi055_poll_data+0x310>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	4b37      	ldr	r3, [pc, #220]	; (8000bb4 <bmi055_poll_data+0x33c>)
 8000ad6:	801a      	strh	r2, [r3, #0]
		gyro_yValue = (((int16_t)(gyro_register_copy[5] << 8) | gyro_register_copy[2]));
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <bmi055_poll_data+0x310>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3305      	adds	r3, #5
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <bmi055_poll_data+0x310>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3302      	adds	r3, #2
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <bmi055_poll_data+0x340>)
 8000af4:	801a      	strh	r2, [r3, #0]
		gyro_zValue = (((int16_t)(gyro_register_copy[7] << 8) | gyro_register_copy[4]));
 8000af6:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <bmi055_poll_data+0x310>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3307      	adds	r3, #7
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <bmi055_poll_data+0x310>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	3304      	adds	r3, #4
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <bmi055_poll_data+0x344>)
 8000b12:	801a      	strh	r2, [r3, #0]



		gyro_x = -(gyro_xValue* (2000.0f / 32767.0f)) * (M_PI/180.0f);
 8000b14:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <bmi055_poll_data+0x33c>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	b21b      	sxth	r3, r3
 8000b1a:	ee07 3a90 	vmov	s15, r3
 8000b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b22:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000bc0 <bmi055_poll_data+0x348>
 8000b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2a:	eef1 7a67 	vneg.f32	s15, s15
 8000b2e:	ee17 3a90 	vmov	r3, s15
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00d fbc8 	bl	800e2c8 <__aeabi_f2d>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	4619      	mov	r1, r3
 8000b40:	a309      	add	r3, pc, #36	; (adr r3, 8000b68 <bmi055_poll_data+0x2f0>)
 8000b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b46:	f00d fc13 	bl	800e370 <__aeabi_dmul>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	4610      	mov	r0, r2
 8000b50:	4619      	mov	r1, r3
 8000b52:	e037      	b.n	8000bc4 <bmi055_poll_data+0x34c>
 8000b54:	f3af 8000 	nop.w
 8000b58:	f5c28f5c 	.word	0xf5c28f5c
 8000b5c:	3fef5c28 	.word	0x3fef5c28
 8000b60:	3a92a305 	.word	0x3a92a305
 8000b64:	40239d01 	.word	0x40239d01
 8000b68:	a2529d39 	.word	0xa2529d39
 8000b6c:	3f91df46 	.word	0x3f91df46
 8000b70:	1ffe8880 	.word	0x1ffe8880
 8000b74:	48028200 	.word	0x48028200
 8000b78:	1ffe8c38 	.word	0x1ffe8c38
 8000b7c:	48028500 	.word	0x48028500
 8000b80:	1ffe8c48 	.word	0x1ffe8c48
 8000b84:	1ffe8c28 	.word	0x1ffe8c28
 8000b88:	1ffe8c20 	.word	0x1ffe8c20
 8000b8c:	3a800000 	.word	0x3a800000
 8000b90:	1ffe8d08 	.word	0x1ffe8d08
 8000b94:	1ffe8c08 	.word	0x1ffe8c08
 8000b98:	1ffe8e00 	.word	0x1ffe8e00
 8000b9c:	1ffe8c1c 	.word	0x1ffe8c1c
 8000ba0:	1ffe8b80 	.word	0x1ffe8b80
 8000ba4:	1ffe8c88 	.word	0x1ffe8c88
 8000ba8:	1ffe8c00 	.word	0x1ffe8c00
 8000bac:	1ffe8d20 	.word	0x1ffe8d20
 8000bb0:	1ffe8df8 	.word	0x1ffe8df8
 8000bb4:	1ffe8df0 	.word	0x1ffe8df0
 8000bb8:	1ffe8c18 	.word	0x1ffe8c18
 8000bbc:	1ffe8cf8 	.word	0x1ffe8cf8
 8000bc0:	3d7a01f4 	.word	0x3d7a01f4
 8000bc4:	f00d fe6e 	bl	800e8a4 <__aeabi_d2f>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <bmi055_poll_data+0x3f0>)
 8000bcc:	601a      	str	r2, [r3, #0]
		gyro_y = (gyro_yValue* (2000.0f / 32767.0f)) * (M_PI/180.0f);
 8000bce:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <bmi055_poll_data+0x3f4>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	ee07 3a90 	vmov	s15, r3
 8000bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bdc:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000c70 <bmi055_poll_data+0x3f8>
 8000be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be4:	ee17 0a90 	vmov	r0, s15
 8000be8:	f00d fb6e 	bl	800e2c8 <__aeabi_f2d>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	a31a      	add	r3, pc, #104	; (adr r3, 8000c60 <bmi055_poll_data+0x3e8>)
 8000bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfa:	f00d fbb9 	bl	800e370 <__aeabi_dmul>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
 8000c02:	4610      	mov	r0, r2
 8000c04:	4619      	mov	r1, r3
 8000c06:	f00d fe4d 	bl	800e8a4 <__aeabi_d2f>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <bmi055_poll_data+0x3fc>)
 8000c0e:	601a      	str	r2, [r3, #0]
		gyro_z = -(gyro_zValue* (2000.0f / 32767.0f)) * (M_PI/180.0f);
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <bmi055_poll_data+0x400>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	ee07 3a90 	vmov	s15, r3
 8000c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c1e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000c70 <bmi055_poll_data+0x3f8>
 8000c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c26:	eef1 7a67 	vneg.f32	s15, s15
 8000c2a:	ee17 3a90 	vmov	r3, s15
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00d fb4a 	bl	800e2c8 <__aeabi_f2d>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	a308      	add	r3, pc, #32	; (adr r3, 8000c60 <bmi055_poll_data+0x3e8>)
 8000c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c42:	f00d fb95 	bl	800e370 <__aeabi_dmul>
 8000c46:	4602      	mov	r2, r0
 8000c48:	460b      	mov	r3, r1
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f00d fe29 	bl	800e8a4 <__aeabi_d2f>
 8000c52:	4602      	mov	r2, r0
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <bmi055_poll_data+0x404>)
 8000c56:	601a      	str	r2, [r3, #0]
//
//		bmi055_mat.acc_x = (acc_xValue*(2.0f / 2048.0f)) * 0.98;
//		bmi055_mat.acc_y = (acc_yValue*(2.0f / 2048.0f)) * 0.98;
//		bmi055_mat.acc_z = (acc_zValue*(2.0f / 2048.0f)) * 0.98;

}
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	a2529d39 	.word	0xa2529d39
 8000c64:	3f91df46 	.word	0x3f91df46
 8000c68:	1ffe8c98 	.word	0x1ffe8c98
 8000c6c:	1ffe8c18 	.word	0x1ffe8c18
 8000c70:	3d7a01f4 	.word	0x3d7a01f4
 8000c74:	1ffe8c24 	.word	0x1ffe8c24
 8000c78:	1ffe8cf8 	.word	0x1ffe8cf8
 8000c7c:	1ffe8df4 	.word	0x1ffe8df4

08000c80 <spi_flushrxbuffer>:



void spi_flushrxbuffer(const SPI_MASTER_t *const handle)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	/* Clear the receive FIFO */
	XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fba1 	bl	80003d4 <XMC_USIC_CH_RXFIFO_Flush>
	while(!SPI_MASTER_IsRxFIFOEmpty(handle)) { SPI_MASTER_GetReceivedWord(handle); };
 8000c92:	e002      	b.n	8000c9a <spi_flushrxbuffer+0x1a>
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff fbbf 	bl	8000418 <SPI_MASTER_GetReceivedWord>
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fbca 	bl	8000434 <SPI_MASTER_IsRxFIFOEmpty>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f083 0301 	eor.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1f3      	bne.n	8000c94 <spi_flushrxbuffer+0x14>
}
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop

08000cb4 <initGPS>:
 */

#include "Header/GPS.h"


void initGPS(){
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

	headerStateMachineFilter = "$GNRMC\n";
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <initGPS+0x14>)
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <initGPS+0x18>)
 8000cbc:	601a      	str	r2, [r3, #0]

}
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	1ffe8ef8 	.word	0x1ffe8ef8
 8000ccc:	0801143c 	.word	0x0801143c

08000cd0 <swapGPSBuffers>:


void swapGPSBuffers(){
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0

	uint8_t * tempSentence = firstSentenceBuffer;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <swapGPSBuffers+0x58>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	607b      	str	r3, [r7, #4]
	firstSentenceBuffer = secondSentenceBuffer;
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <swapGPSBuffers+0x5c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <swapGPSBuffers+0x58>)
 8000ce2:	6013      	str	r3, [r2, #0]
	secondSentenceBuffer = tempSentence;
 8000ce4:	4a11      	ldr	r2, [pc, #68]	; (8000d2c <swapGPSBuffers+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]

	//currentSentenceBuffer = firstSentenceBuffer;

	outputBufferStart = firstSentenceBuffer;
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <swapGPSBuffers+0x58>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <swapGPSBuffers+0x60>)
 8000cf0:	6013      	str	r3, [r2, #0]
	outputBufferCurrent = firstSentenceBuffer;
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <swapGPSBuffers+0x58>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <swapGPSBuffers+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]
	outputBufferEnd = firstSentenceBuffer+199;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <swapGPSBuffers+0x58>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	33c7      	adds	r3, #199	; 0xc7
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <swapGPSBuffers+0x68>)
 8000d02:	6013      	str	r3, [r2, #0]

	secondOutputBufferStart = secondSentenceBuffer;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <swapGPSBuffers+0x5c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0c      	ldr	r2, [pc, #48]	; (8000d3c <swapGPSBuffers+0x6c>)
 8000d0a:	6013      	str	r3, [r2, #0]
	secondOutputBufferCurrent = secondSentenceBuffer;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <swapGPSBuffers+0x5c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <swapGPSBuffers+0x70>)
 8000d12:	6013      	str	r3, [r2, #0]
	secondOutputBufferEnd = secondSentenceBuffer+199;
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <swapGPSBuffers+0x5c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	33c7      	adds	r3, #199	; 0xc7
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <swapGPSBuffers+0x74>)
 8000d1c:	6013      	str	r3, [r2, #0]
}
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	1ffe8f00 	.word	0x1ffe8f00
 8000d2c:	1ffe8ef4 	.word	0x1ffe8ef4
 8000d30:	1ffe8fd8 	.word	0x1ffe8fd8
 8000d34:	1ffe8ef0 	.word	0x1ffe8ef0
 8000d38:	1ffe8e20 	.word	0x1ffe8e20
 8000d3c:	1ffe8f04 	.word	0x1ffe8f04
 8000d40:	1ffe8e14 	.word	0x1ffe8e14
 8000d44:	1ffe8e18 	.word	0x1ffe8e18

08000d48 <USIC1_1_IRQHandler>:

void gpsInterrupt(){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0


	UART_Receive(&UART_0, outputBufferCurrent, 1);
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <USIC1_1_IRQHandler+0x84>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <USIC1_1_IRQHandler+0x88>)
 8000d52:	4619      	mov	r1, r3
 8000d54:	2201      	movs	r2, #1
 8000d56:	f002 f817 	bl	8002d88 <UART_Receive>


	if(headerStateMachineFilter[messageState] == *outputBufferCurrent){ //sequence correct go to next position;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <USIC1_1_IRQHandler+0x8c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a1e      	ldr	r2, [pc, #120]	; (8000dd8 <USIC1_1_IRQHandler+0x90>)
 8000d60:	6812      	ldr	r2, [r2, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	781a      	ldrb	r2, [r3, #0]
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <USIC1_1_IRQHandler+0x84>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d11a      	bne.n	8000da6 <USIC1_1_IRQHandler+0x5e>
		messageState++;
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <USIC1_1_IRQHandler+0x90>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <USIC1_1_IRQHandler+0x90>)
 8000d78:	6013      	str	r3, [r2, #0]
		outputBufferCurrent++;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <USIC1_1_IRQHandler+0x84>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <USIC1_1_IRQHandler+0x84>)
 8000d82:	6013      	str	r3, [r2, #0]
		if(messageState == 7){
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <USIC1_1_IRQHandler+0x90>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b07      	cmp	r3, #7
 8000d8a:	d11d      	bne.n	8000dc8 <USIC1_1_IRQHandler+0x80>
			swapGPSBuffers();
 8000d8c:	f7ff ffa0 	bl	8000cd0 <swapGPSBuffers>
			outputBufferCurrent = outputBufferStart;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <USIC1_1_IRQHandler+0x94>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <USIC1_1_IRQHandler+0x84>)
 8000d96:	6013      	str	r3, [r2, #0]
			messageState = 0;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <USIC1_1_IRQHandler+0x90>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
			outputBufferReady = true;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <USIC1_1_IRQHandler+0x98>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
 8000da4:	e010      	b.n	8000dc8 <USIC1_1_IRQHandler+0x80>

		}

	}
	else if (messageState  < 6){ // sequence incorrect oh mi god
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <USIC1_1_IRQHandler+0x90>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b05      	cmp	r3, #5
 8000dac:	dc07      	bgt.n	8000dbe <USIC1_1_IRQHandler+0x76>
		outputBufferCurrent = outputBufferStart;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <USIC1_1_IRQHandler+0x94>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <USIC1_1_IRQHandler+0x84>)
 8000db4:	6013      	str	r3, [r2, #0]
		messageState = 0;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <USIC1_1_IRQHandler+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	e004      	b.n	8000dc8 <USIC1_1_IRQHandler+0x80>

	}
	else{ //data part of sequence just increment here;
		outputBufferCurrent++;
 8000dbe:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <USIC1_1_IRQHandler+0x84>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	4a01      	ldr	r2, [pc, #4]	; (8000dcc <USIC1_1_IRQHandler+0x84>)
 8000dc6:	6013      	str	r3, [r2, #0]

//	if(messageState > 0){

//	}

}
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	1ffe8ef0 	.word	0x1ffe8ef0
 8000dd0:	1ffe8800 	.word	0x1ffe8800
 8000dd4:	1ffe8ef8 	.word	0x1ffe8ef8
 8000dd8:	1ffe8fd4 	.word	0x1ffe8fd4
 8000ddc:	1ffe8fd8 	.word	0x1ffe8fd8
 8000de0:	1ffe8e10 	.word	0x1ffe8e10

08000de4 <udp_initialize>:


#include "Header/UDP.h"

void udp_initialize()
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	IP_ADDR4(&returnaddr, ip1,ip2,ip3,ip4);
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <udp_initialize+0x18>)
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <udp_initialize+0x1c>)
 8000dec:	601a      	str	r2, [r3, #0]
	com_pcb = udp_new();
 8000dee:	f00b fefd 	bl	800cbec <udp_new>
 8000df2:	4602      	mov	r2, r0
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <udp_initialize+0x20>)
 8000df6:	601a      	str	r2, [r3, #0]
}
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	1ffe8c2c 	.word	0x1ffe8c2c
 8000e00:	0900a8c0 	.word	0x0900a8c0
 8000e04:	1ffe8d18 	.word	0x1ffe8d18

08000e08 <udp_send_event_r>:




void udp_send_event_r(angle_data* strct)
{
 8000e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e0c:	b096      	sub	sp, #88	; 0x58
 8000e0e:	af10      	add	r7, sp, #64	; 0x40
 8000e10:	6078      	str	r0, [r7, #4]
//	((char*)b->payload)[0] = 7;
//	//ADMS,avg_x,avg_y,avg_z,min_x,min_y,min_z,max_x,max_y,max_z$
//	sprintf(r_msg, "ADR,%f,%f,%f,%f,%f,%f,%f,%f,%f$", strct->avg_x, strct->avg_y, strct->avg_z, strct->min_x, strct->min_y, strct->min_z, strct->max_x, strct->max_y, strct->max_z);


	sprintf(r_msg, "ADR,%f,%f,%f,%f,%f,%f,%f,%f,%f$", strct->avg_x, strct->avg_y, strct->avg_z, strct->min_x, strct->min_y, strct->min_z, strct->max_x, strct->max_y, strct->max_z);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	ed93 4b00 	vldr	d4, [r3]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	ed93 5b06 	vldr	d5, [r3, #24]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	ed93 6b08 	vldr	d6, [r3, #32]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	e9d3 ab0c 	ldrd	sl, fp, [r3, #48]	; 0x30
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000e48:	e9cd 4500 	strd	r4, r5, [sp]
 8000e4c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000e50:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000e54:	ed8d 6b06 	vstr	d6, [sp, #24]
 8000e58:	ed8d 7b08 	vstr	d7, [sp, #32]
 8000e5c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8000e60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8000e64:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000e68:	481c      	ldr	r0, [pc, #112]	; (8000edc <udp_send_event_r+0xd4>)
 8000e6a:	491d      	ldr	r1, [pc, #116]	; (8000ee0 <udp_send_event_r+0xd8>)
 8000e6c:	ec53 2b14 	vmov	r2, r3, d4
 8000e70:	f00e fa7e 	bl	800f370 <siprintf>
	struct pbuf* b = pbuf_alloc(PBUF_TRANSPORT, strlen(r_msg), PBUF_RAM);
 8000e74:	4819      	ldr	r0, [pc, #100]	; (8000edc <udp_send_event_r+0xd4>)
 8000e76:	f00e fa9f 	bl	800f3b8 <strlen>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	2038      	movs	r0, #56	; 0x38
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000e86:	f006 fb2b 	bl	80074e0 <pbuf_alloc>
 8000e8a:	6178      	str	r0, [r7, #20]
	memcpy (b->payload, r_msg, strlen(r_msg));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	685c      	ldr	r4, [r3, #4]
 8000e90:	4812      	ldr	r0, [pc, #72]	; (8000edc <udp_send_event_r+0xd4>)
 8000e92:	f00e fa91 	bl	800f3b8 <strlen>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4620      	mov	r0, r4
 8000e9a:	4910      	ldr	r1, [pc, #64]	; (8000edc <udp_send_event_r+0xd4>)
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	f004 f9a7 	bl	80051f0 <memcpy>
	char* c = (char*)b->payload;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	613b      	str	r3, [r7, #16]
	err_t e = udp_sendto(com_pcb, b, &returnaddr, PORT_COM_OUT);
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <udp_send_event_r+0xdc>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	6979      	ldr	r1, [r7, #20]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <udp_send_event_r+0xe0>)
 8000eb2:	f64c 4320 	movw	r3, #52256	; 0xcc20
 8000eb6:	f00b fcfb 	bl	800c8b0 <udp_sendto>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]
	if(e == ERR_OK){
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d102      	bne.n	8000ecc <udp_send_event_r+0xc4>
		printf("ok");
 8000ec6:	4809      	ldr	r0, [pc, #36]	; (8000eec <udp_send_event_r+0xe4>)
 8000ec8:	f00e fa00 	bl	800f2cc <iprintf>
	}

	pbuf_free(b);
 8000ecc:	6978      	ldr	r0, [r7, #20]
 8000ece:	f006 fd23 	bl	8007918 <pbuf_free>
}
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000eda:	bf00      	nop
 8000edc:	1ffe8b84 	.word	0x1ffe8b84
 8000ee0:	08011444 	.word	0x08011444
 8000ee4:	1ffe8d18 	.word	0x1ffe8d18
 8000ee8:	1ffe8c2c 	.word	0x1ffe8c2c
 8000eec:	08011464 	.word	0x08011464

08000ef0 <udp_send_event_ms>:


void udp_send_event_ms(ms_data* strct)
{
 8000ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ef4:	b096      	sub	sp, #88	; 0x58
 8000ef6:	af10      	add	r7, sp, #64	; 0x40
 8000ef8:	6078      	str	r0, [r7, #4]



	sprintf(ms_msg, "ADMS,%f,%f,%f,%f,%f,%f,%f,%f,%f$", strct->avg_x, strct->avg_y, strct->avg_z, strct->min_x, strct->min_y, strct->min_z, strct->max_x, strct->max_y, strct->max_z);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	ed93 4b00 	vldr	d4, [r3]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	ed93 5b06 	vldr	d5, [r3, #24]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	ed93 6b08 	vldr	d6, [r3, #32]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	e9d3 ab0c 	ldrd	sl, fp, [r3, #48]	; 0x30
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000f30:	e9cd 4500 	strd	r4, r5, [sp]
 8000f34:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000f38:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000f3c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8000f40:	ed8d 7b08 	vstr	d7, [sp, #32]
 8000f44:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8000f48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8000f4c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000f50:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <udp_send_event_ms+0xd4>)
 8000f52:	491d      	ldr	r1, [pc, #116]	; (8000fc8 <udp_send_event_ms+0xd8>)
 8000f54:	ec53 2b14 	vmov	r2, r3, d4
 8000f58:	f00e fa0a 	bl	800f370 <siprintf>

	struct pbuf* b = pbuf_alloc(PBUF_TRANSPORT, strlen(ms_msg), PBUF_RAM);
 8000f5c:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <udp_send_event_ms+0xd4>)
 8000f5e:	f00e fa2b 	bl	800f3b8 <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	2038      	movs	r0, #56	; 0x38
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000f6e:	f006 fab7 	bl	80074e0 <pbuf_alloc>
 8000f72:	6178      	str	r0, [r7, #20]
	memcpy (b->payload, ms_msg, strlen(ms_msg));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	685c      	ldr	r4, [r3, #4]
 8000f78:	4812      	ldr	r0, [pc, #72]	; (8000fc4 <udp_send_event_ms+0xd4>)
 8000f7a:	f00e fa1d 	bl	800f3b8 <strlen>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4620      	mov	r0, r4
 8000f82:	4910      	ldr	r1, [pc, #64]	; (8000fc4 <udp_send_event_ms+0xd4>)
 8000f84:	461a      	mov	r2, r3
 8000f86:	f004 f933 	bl	80051f0 <memcpy>
	char* c = (char*)b->payload;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	613b      	str	r3, [r7, #16]
	err_t e = udp_sendto(com_pcb, b, &returnaddr, PORT_COM_OUT);
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <udp_send_event_ms+0xdc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	6979      	ldr	r1, [r7, #20]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <udp_send_event_ms+0xe0>)
 8000f9a:	f64c 4320 	movw	r3, #52256	; 0xcc20
 8000f9e:	f00b fc87 	bl	800c8b0 <udp_sendto>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
	if(e == ERR_OK){
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <udp_send_event_ms+0xc4>
		printf("ok");
 8000fae:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <udp_send_event_ms+0xe4>)
 8000fb0:	f00e f98c 	bl	800f2cc <iprintf>
	}

	pbuf_free(b);
 8000fb4:	6978      	ldr	r0, [r7, #20]
 8000fb6:	f006 fcaf 	bl	8007918 <pbuf_free>
}
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000fc2:	bf00      	nop
 8000fc4:	1ffe8d88 	.word	0x1ffe8d88
 8000fc8:	08011468 	.word	0x08011468
 8000fcc:	1ffe8d18 	.word	0x1ffe8d18
 8000fd0:	1ffe8c2c 	.word	0x1ffe8c2c
 8000fd4:	08011464 	.word	0x08011464

08000fd8 <udp_send_event>:

void udp_send_event(char* message)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]


	u16_t l = strlen(message);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f00e f9e9 	bl	800f3b8 <strlen>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	82fb      	strh	r3, [r7, #22]
	struct pbuf* b = pbuf_alloc(PBUF_TRANSPORT, l, PBUF_RAM);
 8000fea:	8afb      	ldrh	r3, [r7, #22]
 8000fec:	2038      	movs	r0, #56	; 0x38
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000ff4:	f006 fa74 	bl	80074e0 <pbuf_alloc>
 8000ff8:	6138      	str	r0, [r7, #16]
	//((char*)b->payload)[0] = 3;
	memcpy (b->payload, message, l);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	8afb      	ldrh	r3, [r7, #22]
 8001000:	4610      	mov	r0, r2
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	461a      	mov	r2, r3
 8001006:	f004 f8f3 	bl	80051f0 <memcpy>
	char* c = (char*)b->payload;
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	60fb      	str	r3, [r7, #12]
	err_t e = udp_sendto(com_pcb, b, &returnaddr, PORT_COM_OUT);
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <udp_send_event+0x68>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	6939      	ldr	r1, [r7, #16]
 8001018:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <udp_send_event+0x6c>)
 800101a:	f64c 4320 	movw	r3, #52256	; 0xcc20
 800101e:	f00b fc47 	bl	800c8b0 <udp_sendto>
 8001022:	4603      	mov	r3, r0
 8001024:	72fb      	strb	r3, [r7, #11]
	if(e == ERR_OK){
 8001026:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <udp_send_event+0x5c>
		printf("ok");
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <udp_send_event+0x70>)
 8001030:	f00e f94c 	bl	800f2cc <iprintf>
	}

	pbuf_free(b);
 8001034:	6938      	ldr	r0, [r7, #16]
 8001036:	f006 fc6f 	bl	8007918 <pbuf_free>
}
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	1ffe8d18 	.word	0x1ffe8d18
 8001044:	1ffe8c2c 	.word	0x1ffe8c2c
 8001048:	08011464 	.word	0x08011464

0800104c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	460b      	mov	r3, r1
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	7afb      	ldrb	r3, [r7, #11]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3204      	adds	r2, #4
 800106e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001072:	7afb      	ldrb	r3, [r7, #11]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4619      	mov	r1, r3
 800107c:	23f8      	movs	r3, #248	; 0xf8
 800107e:	408b      	lsls	r3, r1
 8001080:	43db      	mvns	r3, r3
 8001082:	ea02 0103 	and.w	r1, r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	1d02      	adds	r2, r0, #4
 800108a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001092:	7afb      	ldrb	r3, [r7, #11]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4619      	mov	r1, r3
 8001098:	2303      	movs	r3, #3
 800109a:	408b      	lsls	r3, r1
 800109c:	43db      	mvns	r3, r3
 800109e:	401a      	ands	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4a3a      	ldr	r2, [pc, #232]	; (8001190 <XMC_GPIO_Init+0x144>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d003      	beq.n	80010b4 <XMC_GPIO_Init+0x68>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4a39      	ldr	r2, [pc, #228]	; (8001194 <XMC_GPIO_Init+0x148>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d10a      	bne.n	80010ca <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010b8:	7afb      	ldrb	r3, [r7, #11]
 80010ba:	2101      	movs	r1, #1
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	401a      	ands	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	661a      	str	r2, [r3, #96]	; 0x60
 80010c8:	e042      	b.n	8001150 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	da3c      	bge.n	8001150 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	7afb      	ldrb	r3, [r7, #11]
 80010dc:	409a      	lsls	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	7afb      	ldrb	r3, [r7, #11]
 80010ec:	08db      	lsrs	r3, r3, #3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3210      	adds	r2, #16
 80010f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4619      	mov	r1, r3
 8001104:	2307      	movs	r3, #7
 8001106:	408b      	lsls	r3, r1
 8001108:	43db      	mvns	r3, r3
 800110a:	ea02 0103 	and.w	r1, r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f100 0210 	add.w	r2, r0, #16
 8001114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8001118:	7afb      	ldrb	r3, [r7, #11]
 800111a:	08db      	lsrs	r3, r3, #3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	7afb      	ldrb	r3, [r7, #11]
 8001122:	08db      	lsrs	r3, r3, #3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3210      	adds	r2, #16
 800112c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7a1b      	ldrb	r3, [r3, #8]
 8001134:	4619      	mov	r1, r3
 8001136:	7afb      	ldrb	r3, [r7, #11]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	ea42 0103 	orr.w	r1, r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f100 0210 	add.w	r2, r0, #16
 800114c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8001150:	7afb      	ldrb	r3, [r7, #11]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4618      	mov	r0, r3
 8001158:	7afb      	ldrb	r3, [r7, #11]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	b2db      	uxtb	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3204      	adds	r2, #4
 8001164:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	7afb      	ldrb	r3, [r7, #11]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	ea42 0103 	orr.w	r1, r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1d02      	adds	r2, r0, #4
 8001182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	48028e00 	.word	0x48028e00
 8001194:	48028f00 	.word	0x48028f00

08001198 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2003ffc0 	.word	0x2003ffc0

080011b0 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <XMC_SCU_GetMirrorStatus+0x14>)
 80011b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	50004000 	.word	0x50004000

080011c8 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80011d0:	f7ff f874 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <XMC_SCU_lDelay+0x3c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <XMC_SCU_lDelay+0x40>)
 80011da:	fba2 2303 	umull	r2, r3, r2, r3
 80011de:	0c9a      	lsrs	r2, r3, #18
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e003      	b.n	80011f6 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80011ee:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3301      	adds	r3, #1
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d3f7      	bcc.n	80011ee <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	2003ffc0 	.word	0x2003ffc0
 8001208:	431bde83 	.word	0x431bde83

0800120c <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8001212:	685b      	ldr	r3, [r3, #4]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	50004074 	.word	0x50004074

08001224 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800122c:	4a03      	ldr	r2, [pc, #12]	; (800123c <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60d3      	str	r3, [r2, #12]
}
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	50004074 	.word	0x50004074

08001240 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af02      	add	r7, sp, #8
 8001246:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8001248:	2000      	movs	r0, #0
 800124a:	f000 f8bf 	bl	80013cc <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800124e:	f000 faa5 	bl	800179c <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	79db      	ldrb	r3, [r3, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00a      	beq.n	8001270 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800125a:	f000 fadd 	bl	8001818 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800125e:	bf00      	nop
 8001260:	f000 fac8 	bl	80017f4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8001264:	4603      	mov	r3, r0
 8001266:	f083 0301 	eor.w	r3, r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1f7      	bne.n	8001260 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7a5b      	ldrb	r3, [r3, #9]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f923 	bl	80014c0 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800127a:	bf00      	nop
 800127c:	f7ff ff98 	bl	80011b0 <XMC_SCU_GetMirrorStatus>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1fa      	bne.n	800127c <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7a1b      	ldrb	r3, [r3, #8]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fa60 	bl	8001750 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7c1b      	ldrb	r3, [r3, #16]
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f931 	bl	80014fc <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7c5b      	ldrb	r3, [r3, #17]
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f954 	bl	800154c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7c9b      	ldrb	r3, [r3, #18]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f93b 	bl	8001524 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7cdb      	ldrb	r3, [r3, #19]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f95e 	bl	8001574 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	799b      	ldrb	r3, [r3, #6]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00a      	beq.n	80012d6 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80012c0:	f000 fae2 	bl	8001888 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80012c4:	bf00      	nop
 80012c6:	f000 fb07 	bl	80018d8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f083 0301 	eor.w	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f7      	bne.n	80012c6 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	78db      	ldrb	r3, [r3, #3]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80012de:	f000 fb1f 	bl	8001920 <XMC_SCU_CLOCK_DisableSystemPll>
 80012e2:	e014      	b.n	800130e <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80012e4:	f000 fb0c 	bl	8001900 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	8899      	ldrh	r1, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80012f4:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80012fa:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	4608      	mov	r0, r1
 8001304:	4611      	mov	r1, r2
 8001306:	462a      	mov	r2, r5
 8001308:	4623      	mov	r3, r4
 800130a:	f000 fb19 	bl	8001940 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001316:	d103      	bne.n	8001320 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8001318:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800131c:	f000 f856 	bl	80013cc <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8001320:	f7fe ffcc 	bl	80002bc <SystemCoreClockUpdate>
}
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bdb0      	pop	{r4, r5, r7, pc}
 800132a:	bf00      	nop

0800132c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	0f1b      	lsrs	r3, r3, #28
 8001338:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001340:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	461a      	mov	r2, r3
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8001350:	4413      	add	r3, r2
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	601a      	str	r2, [r3, #0]
}
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	50004414 	.word	0x50004414

08001364 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	0f1b      	lsrs	r3, r3, #28
 8001370:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001378:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	461a      	mov	r2, r3
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8001388:	4413      	add	r3, r2
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	bf14      	ite	ne
 8001394:	2301      	movne	r3, #1
 8001396:	2300      	moveq	r3, #0
 8001398:	b2db      	uxtb	r3, r3
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	5000440c 	.word	0x5000440c

080013ac <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80013b0:	f7ff fef2 	bl	8001198 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80013b4:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80013b8:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	50004600 	.word	0x50004600

080013cc <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80013d4:	4906      	ldr	r1, [pc, #24]	; (80013f0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	50004600 	.word	0x50004600

080013f4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80013fc:	4906      	ldr	r1, [pc, #24]	; (8001418 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	50004600 	.word	0x50004600

0800141c <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8001424:	4906      	ldr	r1, [pc, #24]	; (8001440 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4313      	orrs	r3, r2
 8001432:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	50004600 	.word	0x50004600

08001444 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d108      	bne.n	8001466 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001454:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	60d3      	str	r3, [r2, #12]
 8001464:	e007      	b.n	8001476 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001466:	4a06      	ldr	r2, [pc, #24]	; (8001480 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	60d3      	str	r3, [r2, #12]
  }
}
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	50004710 	.word	0x50004710

08001484 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800148e:	bf00      	nop
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8001492:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f8      	bne.n	8001490 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800149e:	4907      	ldr	r1, [pc, #28]	; (80014bc <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80014aa:	4313      	orrs	r3, r2
 80014ac:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	50004000 	.word	0x50004000
 80014bc:	50004300 	.word	0x50004300

080014c0 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80014ca:	bf00      	nop
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80014ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f8      	bne.n	80014cc <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80014da:	4907      	ldr	r1, [pc, #28]	; (80014f8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80014e4:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	50004000 	.word	0x50004000
 80014f8:	50004300 	.word	0x50004300

080014fc <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001504:	4906      	ldr	r1, [pc, #24]	; (8001520 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001512:	4313      	orrs	r3, r2
 8001514:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	50004600 	.word	0x50004600

08001524 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800152c:	4906      	ldr	r1, [pc, #24]	; (8001548 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800153a:	4313      	orrs	r3, r2
 800153c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	50004600 	.word	0x50004600

0800154c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001554:	4906      	ldr	r1, [pc, #24]	; (8001570 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001562:	4313      	orrs	r3, r2
 8001564:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	50004600 	.word	0x50004600

08001574 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800157c:	4906      	ldr	r1, [pc, #24]	; (8001598 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800158a:	4313      	orrs	r3, r2
 800158c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	50004600 	.word	0x50004600

0800159c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80015a4:	4906      	ldr	r1, [pc, #24]	; (80015c0 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80015b2:	4313      	orrs	r3, r2
 80015b4:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	50004600 	.word	0x50004600

080015c4 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80015cc:	4906      	ldr	r1, [pc, #24]	; (80015e8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80015da:	4313      	orrs	r3, r2
 80015dc:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	50004600 	.word	0x50004600

080015ec <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80015f4:	4906      	ldr	r1, [pc, #24]	; (8001610 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8001602:	4313      	orrs	r3, r2
 8001604:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	50004600 	.word	0x50004600

08001614 <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 800161c:	4906      	ldr	r1, [pc, #24]	; (8001638 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8001620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001622:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 800162a:	4313      	orrs	r3, r2
 800162c:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	50004600 	.word	0x50004600

0800163c <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	6053      	str	r3, [r2, #4]
}
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	50004600 	.word	0x50004600

0800165c <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	0f1b      	lsrs	r3, r3, #28
 8001668:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001670:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4613      	mov	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	461a      	mov	r2, r3
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8001680:	4413      	add	r3, r2
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	601a      	str	r2, [r3, #0]
}
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	50004648 	.word	0x50004648

08001694 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	0f1b      	lsrs	r3, r3, #28
 80016a0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80016a8:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80016b8:	4413      	add	r3, r2
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf14      	ite	ne
 80016c4:	2301      	movne	r3, #1
 80016c6:	2300      	moveq	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	50004640 	.word	0x50004640

080016dc <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80016e6:	4a19      	ldr	r2, [pc, #100]	; (800174c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	f043 0310 	orr.w	r3, r3, #16
 80016fc:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80016fe:	4913      	ldr	r1, [pc, #76]	; (800174c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3b01      	subs	r3, #1
 8001704:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3b01      	subs	r3, #1
 800170a:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800170c:	4313      	orrs	r3, r2
 800170e:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800171a:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 800171c:	4a0b      	ldr	r2, [pc, #44]	; (800174c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f023 0310 	bic.w	r3, r3, #16
 8001726:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8001728:	4a08      	ldr	r2, [pc, #32]	; (800174c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001732:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8001734:	bf00      	nop
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f9      	beq.n	8001736 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	50004710 	.word	0x50004710

08001750 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 800175a:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001764:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d10e      	bne.n	800178a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 800176c:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001776:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8001778:	2064      	movs	r0, #100	; 0x64
 800177a:	f7ff fd25 	bl	80011c8 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 800177e:	4a06      	ldr	r2, [pc, #24]	; (8001798 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001788:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 800178a:	2064      	movs	r0, #100	; 0x64
 800178c:	f7ff fd1c 	bl	80011c8 <XMC_SCU_lDelay>
}
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	50004710 	.word	0x50004710

0800179c <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d109      	bne.n	80017c0 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80017b2:	bf00      	nop
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f9      	beq.n	80017b4 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00a      	beq.n	80017e2 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80017ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d2:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 80017d4:	bf00      	nop
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f9      	bne.n	80017d6 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	50004200 	.word	0x50004200
 80017f0:	50004400 	.word	0x50004400

080017f4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	50004300 	.word	0x50004300

08001818 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 800181c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001820:	f7ff fd00 	bl	8001224 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800182e:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8001830:	bf00      	nop
 8001832:	f7ff fceb 	bl	800120c <XMC_SCU_INTERUPT_GetEventStatus>
 8001836:	4603      	mov	r3, r0
 8001838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f8      	beq.n	8001832 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8001840:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001844:	f7ff fcee 	bl	8001224 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 800184a:	2208      	movs	r2, #8
 800184c:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 800184e:	bf00      	nop
 8001850:	f7ff fcdc 	bl	800120c <XMC_SCU_INTERUPT_GetEventStatus>
 8001854:	4603      	mov	r3, r0
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f8      	beq.n	8001850 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 800185e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001862:	f7ff fcdf 	bl	8001224 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8001866:	4a07      	ldr	r2, [pc, #28]	; (8001884 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8001872:	bf00      	nop
 8001874:	f7ff fcca 	bl	800120c <XMC_SCU_INTERUPT_GetEventStatus>
 8001878:	4603      	mov	r3, r0
 800187a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f8      	beq.n	8001874 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8001882:	bd80      	pop	{r7, pc}
 8001884:	50004300 	.word	0x50004300

08001888 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 800188c:	4a0f      	ldr	r2, [pc, #60]	; (80018cc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001896:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8001898:	4d0d      	ldr	r5, [pc, #52]	; (80018d0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 80018a2:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80018a6:	f00b fbd3 	bl	800d050 <OSCHP_GetFrequency>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 80018ae:	fba3 2302 	umull	r2, r3, r3, r2
 80018b2:	0d1b      	lsrs	r3, r3, #20
 80018b4:	3b01      	subs	r3, #1
 80018b6:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80018b8:	4323      	orrs	r3, r4
 80018ba:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 80018bc:	4a03      	ldr	r2, [pc, #12]	; (80018cc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80018be:	4b03      	ldr	r3, [pc, #12]	; (80018cc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6053      	str	r3, [r2, #4]
}
 80018c8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	50004710 	.word	0x50004710
 80018d0:	50004700 	.word	0x50004700
 80018d4:	6b5fca6b 	.word	0x6b5fca6b

080018d8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80018e4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80018e8:	bf0c      	ite	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	2300      	movne	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	50004710 	.word	0x50004710

08001900 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8001904:	4a05      	ldr	r2, [pc, #20]	; (800191c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190e:	f023 0302 	bic.w	r3, r3, #2
 8001912:	6053      	str	r3, [r2, #4]
}
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	50004710 	.word	0x50004710

08001920 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8001924:	4a05      	ldr	r2, [pc, #20]	; (800193c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192e:	f043 0302 	orr.w	r3, r3, #2
 8001932:	6053      	str	r3, [r2, #4]
}
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	50004710 	.word	0x50004710

08001940 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60ba      	str	r2, [r7, #8]
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4603      	mov	r3, r0
 800194c:	81fb      	strh	r3, [r7, #14]
 800194e:	460b      	mov	r3, r1
 8001950:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8001952:	89fb      	ldrh	r3, [r7, #14]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fd75 	bl	8001444 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 800195a:	7b7b      	ldrb	r3, [r7, #13]
 800195c:	2b01      	cmp	r3, #1
 800195e:	f040 8084 	bne.w	8001a6a <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8001962:	89fb      	ldrh	r3, [r7, #14]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d109      	bne.n	800197c <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8001968:	f00b fb72 	bl	800d050 <OSCHP_GetFrequency>
 800196c:	4602      	mov	r2, r0
 800196e:	4b4b      	ldr	r3, [pc, #300]	; (8001a9c <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8001970:	fba3 2302 	umull	r2, r3, r3, r2
 8001974:	0c9b      	lsrs	r3, r3, #18
 8001976:	059b      	lsls	r3, r3, #22
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e002      	b.n	8001982 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 800197c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001980:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	fb02 f203 	mul.w	r2, r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001990:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	4a42      	ldr	r2, [pc, #264]	; (8001aa0 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	0d9b      	lsrs	r3, r3, #22
 800199e:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 80019a0:	4a40      	ldr	r2, [pc, #256]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80019a2:	4b40      	ldr	r3, [pc, #256]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 80019ac:	4a3d      	ldr	r2, [pc, #244]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80019ae:	4b3d      	ldr	r3, [pc, #244]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80019b8:	493a      	ldr	r1, [pc, #232]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80019ba:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80019c0:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	3a01      	subs	r2, #1
 80019c6:	0212      	lsls	r2, r2, #8
 80019c8:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80019d0:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80019d8:	4313      	orrs	r3, r2
 80019da:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80019dc:	4a31      	ldr	r2, [pc, #196]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e6:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80019e8:	4a2e      	ldr	r2, [pc, #184]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80019ea:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f023 0310 	bic.w	r3, r3, #16
 80019f2:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80019f4:	4a2b      	ldr	r2, [pc, #172]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fe:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001a00:	bf00      	nop
 8001a02:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f9      	beq.n	8001a02 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001a0e:	4a25      	ldr	r2, [pc, #148]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8001a1a:	bf00      	nop
 8001a1c:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f9      	bne.n	8001a1c <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	4a20      	ldr	r2, [pc, #128]	; (8001aac <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	095b      	lsrs	r3, r3, #5
 8001a32:	0d9b      	lsrs	r3, r3, #22
 8001a34:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8001a36:	6a3a      	ldr	r2, [r7, #32]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d202      	bcs.n	8001a44 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8001a3e:	6938      	ldr	r0, [r7, #16]
 8001a40:	f000 f838 	bl	8001ab4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	0d9b      	lsrs	r3, r3, #22
 8001a52:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8001a54:	6a3a      	ldr	r2, [r7, #32]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d202      	bcs.n	8001a62 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8001a5c:	6938      	ldr	r0, [r7, #16]
 8001a5e:	f000 f829 	bl	8001ab4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8001a62:	6a38      	ldr	r0, [r7, #32]
 8001a64:	f000 f826 	bl	8001ab4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8001a68:	e015      	b.n	8001a96 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8001a6a:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001a7c:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8001a88:	bf00      	nop
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f9      	beq.n	8001a8a <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	431bde83 	.word	0x431bde83
 8001aa0:	aaaaaaab 	.word	0xaaaaaaab
 8001aa4:	50004710 	.word	0x50004710
 8001aa8:	f08080ff 	.word	0xf08080ff
 8001aac:	88888889 	.word	0x88888889
 8001ab0:	b60b60b7 	.word	0xb60b60b7

08001ab4 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8001abc:	4907      	ldr	r1, [pc, #28]	; (8001adc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8001acc:	4313      	orrs	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8001ad0:	2032      	movs	r0, #50	; 0x32
 8001ad2:	f7ff fb79 	bl	80011c8 <XMC_SCU_lDelay>
}
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	50004710 	.word	0x50004710

08001ae0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aee:	60da      	str	r2, [r3, #12]
}
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop

08001afc <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <XMC_CCU4_lDeassertReset+0x4c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d103      	bne.n	8001b14 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8001b0c:	2004      	movs	r0, #4
 8001b0e:	f7ff fc0d 	bl	800132c <XMC_SCU_RESET_DeassertPeripheralReset>
 8001b12:	e016      	b.n	8001b42 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a0d      	ldr	r2, [pc, #52]	; (8001b4c <XMC_CCU4_lDeassertReset+0x50>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d103      	bne.n	8001b24 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8001b1c:	2008      	movs	r0, #8
 8001b1e:	f7ff fc05 	bl	800132c <XMC_SCU_RESET_DeassertPeripheralReset>
 8001b22:	e00e      	b.n	8001b42 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <XMC_CCU4_lDeassertReset+0x54>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d103      	bne.n	8001b34 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8001b2c:	2010      	movs	r0, #16
 8001b2e:	f7ff fbfd 	bl	800132c <XMC_SCU_RESET_DeassertPeripheralReset>
 8001b32:	e006      	b.n	8001b42 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <XMC_CCU4_lDeassertReset+0x58>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d102      	bne.n	8001b42 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8001b3c:	4806      	ldr	r0, [pc, #24]	; (8001b58 <XMC_CCU4_lDeassertReset+0x5c>)
 8001b3e:	f7ff fbf5 	bl	800132c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	4000c000 	.word	0x4000c000
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	40014000 	.word	0x40014000
 8001b54:	48004000 	.word	0x48004000
 8001b58:	10000001 	.word	0x10000001

08001b5c <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <XMC_CCU4_lUngateClock+0x4c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d103      	bne.n	8001b74 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8001b6c:	2004      	movs	r0, #4
 8001b6e:	f7ff fd75 	bl	800165c <XMC_SCU_CLOCK_UngatePeripheralClock>
 8001b72:	e016      	b.n	8001ba2 <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <XMC_CCU4_lUngateClock+0x50>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d103      	bne.n	8001b84 <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8001b7c:	2008      	movs	r0, #8
 8001b7e:	f7ff fd6d 	bl	800165c <XMC_SCU_CLOCK_UngatePeripheralClock>
 8001b82:	e00e      	b.n	8001ba2 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <XMC_CCU4_lUngateClock+0x54>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d103      	bne.n	8001b94 <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8001b8c:	2010      	movs	r0, #16
 8001b8e:	f7ff fd65 	bl	800165c <XMC_SCU_CLOCK_UngatePeripheralClock>
 8001b92:	e006      	b.n	8001ba2 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <XMC_CCU4_lUngateClock+0x58>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d102      	bne.n	8001ba2 <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8001b9c:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <XMC_CCU4_lUngateClock+0x5c>)
 8001b9e:	f7ff fd5d 	bl	800165c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	4000c000 	.word	0x4000c000
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40014000 	.word	0x40014000
 8001bb4:	48004000 	.word	0x48004000
 8001bb8:	10000001 	.word	0x10000001

08001bbc <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8001bc4:	2010      	movs	r0, #16
 8001bc6:	f7ff fd39 	bl	800163c <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffc6 	bl	8001b5c <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff93 	bl	8001afc <XMC_CCU4_lDeassertReset>
#endif
}
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ffe7 	bl	8001bbc <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ff76 	bl	8001ae0 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c00:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	039b      	lsls	r3, r3, #14
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	795b      	ldrb	r3, [r3, #5]
 8001c2e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	051a      	lsls	r2, r3, #20
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	791b      	ldrb	r3, [r3, #4]
 8001c3e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	795b      	ldrb	r3, [r3, #5]
 8001c4e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	795b      	ldrb	r3, [r3, #5]
 8001c5e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	791b      	ldrb	r3, [r3, #4]
 8001c6e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
 8001c90:	4613      	mov	r3, r2
 8001c92:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001c9a:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	2b09      	cmp	r3, #9
 8001ca0:	d82c      	bhi.n	8001cfc <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8001ca2:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001cd1 	.word	0x08001cd1
 8001cac:	08001cd1 	.word	0x08001cd1
 8001cb0:	08001cdb 	.word	0x08001cdb
 8001cb4:	08001cdb 	.word	0x08001cdb
 8001cb8:	08001cfd 	.word	0x08001cfd
 8001cbc:	08001cfd 	.word	0x08001cfd
 8001cc0:	08001cfd 	.word	0x08001cfd
 8001cc4:	08001cfd 	.word	0x08001cfd
 8001cc8:	08001ce5 	.word	0x08001ce5
 8001ccc:	08001cf1 	.word	0x08001cf1
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
      break;
 8001cd8:	e016      	b.n	8001d08 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8001cda:	230c      	movs	r3, #12
 8001cdc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	617b      	str	r3, [r7, #20]
      break;
 8001ce2:	e011      	b.n	8001d08 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8001ce4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ce8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8001cea:	2308      	movs	r3, #8
 8001cec:	617b      	str	r3, [r7, #20]
      break;
 8001cee:	e00b      	b.n	8001d08 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8001cf0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cf4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8001cf6:	230a      	movs	r3, #10
 8001cf8:	617b      	str	r3, [r7, #20]
      break;
 8001cfa:	e005      	b.n	8001d08 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8001cfc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001d00:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8001d02:	230c      	movs	r3, #12
 8001d04:	617b      	str	r3, [r7, #20]
      break;
 8001d06:	bf00      	nop
  }
  
  srs &= ~mask; 
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8001d12:	78ba      	ldrb	r2, [r7, #2]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8001d28:	371c      	adds	r7, #28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop

08001d34 <XMC_ETH_MAC_Reset>:
 *
 * \par
 * The function resets the ETH MAC peripheral. It blocks until reset.
 */
__STATIC_INLINE void XMC_ETH_MAC_Reset(XMC_ETH_MAC_t *const eth_mac)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_SWR_Msk;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d52:	601a      	str	r2, [r3, #0]
  while ((eth_mac->regs->BUS_MODE & (uint32_t)ETH_BUS_MODE_SWR_Msk) != 0U)
 8001d54:	bf00      	nop
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f6      	bne.n	8001d56 <XMC_ETH_MAC_Reset+0x22>
  {
  }
}
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop

08001d74 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	2003ffc0 	.word	0x2003ffc0
 8001d98:	50004600 	.word	0x50004600

08001d9c <XMC_SCU_CLOCK_GetEthernetClockFrequency>:
 * fETH = fSYS >> 1;
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetSystemClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEthernetClockFrequency(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  return XMC_SCU_CLOCK_GetSystemClockFrequency() >> 1U;
 8001da0:	f7ff ffe8 	bl	8001d74 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001da4:	4603      	mov	r3, r0
 8001da6:	085b      	lsrs	r3, r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}

08001dac <XCM_ETH_MAC_IsNormalEvent>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Check if the event passed is a normal event */
__STATIC_INLINE bool XCM_ETH_MAC_IsNormalEvent(uint32_t event)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT |
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	f244 0345 	movw	r3, #16453	; 0x4045
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf14      	ite	ne
 8001dc0:	2301      	movne	r3, #1
 8001dc2:	2300      	moveq	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
                          (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |
                          (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE |
                          (uint32_t)XMC_ETH_MAC_EVENT_EARLY_RECEIVE)) != (uint32_t)0);
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop

08001dd4 <XCM_ETH_MAC_IsAbnormalEvent>:

/* Check if the event passed is an abnormal event */
__STATIC_INLINE bool XCM_ETH_MAC_IsAbnormalEvent(uint32_t event)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
   return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED |
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	f242 73ba 	movw	r3, #10170	; 0x27ba
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE |
                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED |
                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT |
                           (uint32_t)XMC_ETH_MAC_EVENT_EARLY_TRANSMIT |
                           (uint32_t)XMC_ETH_MAC_EVENT_BUS_ERROR)) != (uint32_t)0);
 }
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop

08001dfc <XMC_ETH_MAC_InitEx>:
}

#endif

void XMC_ETH_MAC_InitEx(XMC_ETH_MAC_t *const eth_mac)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_ETH_MAC_InitEx: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  XMC_ETH_MAC_Reset(eth_mac);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff95 	bl	8001d34 <XMC_ETH_MAC_Reset>

  /* Initialize MAC configuration */
  eth_mac->regs->MAC_CONFIGURATION = (uint32_t)ETH_MAC_CONFIGURATION_IPC_Msk;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e12:	601a      	str	r2, [r3, #0]

  /* Initialize Filter registers */
  eth_mac->regs->FLOW_CONTROL = ETH_FLOW_CONTROL_DZPQ_Msk; /* Disable Zero Quanta Pause */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2280      	movs	r2, #128	; 0x80
 8001e1a:	619a      	str	r2, [r3, #24]

  eth_mac->regs->OPERATION_MODE = (uint32_t)ETH_OPERATION_MODE_RSF_Msk |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e24:	3318      	adds	r3, #24
 8001e26:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <XMC_ETH_MAC_InitEx+0x90>)
 8001e28:	601a      	str	r2, [r3, #0]
	                              (uint32_t)ETH_OPERATION_MODE_TSF_Msk |
	                              (uint32_t)ETH_OPERATION_MODE_OSF_Msk;

  /* Increase enhanced descriptor to 8 WORDS, required when the Advanced Time-Stamp feature or Full IPC Offload Engine is enabled */
  eth_mac->regs->BUS_MODE = (uint32_t)ETH_BUS_MODE_ATDS_Msk |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e32:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <XMC_ETH_MAC_InitEx+0x94>)
 8001e34:	601a      	str	r2, [r3, #0]
	                        (uint32_t)ETH_BUS_MODE_AAL_Msk | /* the AHB interface generates all bursts aligned to the start address LS bits */
	                        (uint32_t)ETH_BUS_MODE_FB_Msk | /* DMA attempts to execute fixed-length Burst transfers on the AHB Master interface */
	                        (uint32_t)(0x20 << ETH_BUS_MODE_PBL_Pos); /* maximum Burst length */

  /* Initialize DMA Descriptors */
  XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f82c 	bl	8001e94 <XMC_ETH_MAC_InitRxDescriptors>
  XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f881 	bl	8001f44 <XMC_ETH_MAC_InitTxDescriptors>

  /* Clear interrupts */
  eth_mac->regs->STATUS = 0xFFFFFFFFUL;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4a:	3314      	adds	r3, #20
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	601a      	str	r2, [r3, #0]

  /* Disable MMC interrupt events */
  eth_mac->regs->MMC_TRANSMIT_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8001e5a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  eth_mac->regs->MMC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8001e66:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  eth_mac->regs->MMC_IPC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_IPC_RECEIVE_INTERRUPT_MSK;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8001e72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Disable PMT and timestamp interrupt events */
  eth_mac->regs->INTERRUPT_MASK = ETH_INTERRUPT_MASK_PMTIM_Msk | ETH_INTERRUPT_MASK_TSIM_Msk;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f44f 7202 	mov.w	r2, #520	; 0x208
 8001e7e:	63da      	str	r2, [r3, #60]	; 0x3c

  eth_mac->frame_end = NULL;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
}
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	02200004 	.word	0x02200004
 8001e90:	02012080 	.word	0x02012080

08001e94 <XMC_ETH_MAC_InitRxDescriptors>:
  return status;
}

/* Initialize RX descriptors */
void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  /*
   * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
   * (buffer2) is the next descriptor address
   */
  for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	e037      	b.n	8001f12 <XMC_ETH_MAC_InitRxDescriptors+0x7e>
  {
  eth_mac->rx_desc[i].status = (uint32_t)ETH_MAC_DMA_RDES0_OWN;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	015b      	lsls	r3, r3, #5
 8001eaa:	4413      	add	r3, r2
 8001eac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001eb0:	601a      	str	r2, [r3, #0]
  eth_mac->rx_desc[i].length = (uint32_t)ETH_MAC_DMA_RDES1_RCH | (uint32_t)XMC_ETH_MAC_BUF_SIZE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015b      	lsls	r3, r3, #5
 8001eba:	4413      	add	r3, r2
 8001ebc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001ec0:	605a      	str	r2, [r3, #4]
  eth_mac->rx_desc[i].buffer1 = (uint32_t)&(eth_mac->rx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691a      	ldr	r2, [r3, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	015b      	lsls	r3, r3, #5
 8001eca:	4413      	add	r3, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6991      	ldr	r1, [r2, #24]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8001ed6:	fb00 f202 	mul.w	r2, r0, r2
 8001eda:	440a      	add	r2, r1
 8001edc:	609a      	str	r2, [r3, #8]
    next = i + 1U;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
    if (next == eth_mac->num_rx_buf)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eea:	461a      	mov	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d101      	bne.n	8001ef6 <XMC_ETH_MAC_InitRxDescriptors+0x62>
    {
      next = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
    }
    eth_mac->rx_desc[i].buffer2 = (uint32_t)&(eth_mac->rx_desc[next]);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015b      	lsls	r3, r3, #5
 8001efe:	4413      	add	r3, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6911      	ldr	r1, [r2, #16]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	0152      	lsls	r2, r2, #5
 8001f08:	440a      	add	r2, r1
 8001f0a:	60da      	str	r2, [r3, #12]

  /*
   * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
   * (buffer2) is the next descriptor address
   */
  for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d8c0      	bhi.n	8001ea2 <XMC_ETH_MAC_InitRxDescriptors+0xe>
    {
      next = 0U;
    }
    eth_mac->rx_desc[i].buffer2 = (uint32_t)&(eth_mac->rx_desc[next]);
  }
  eth_mac->regs->RECEIVE_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->rx_desc[0]);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6912      	ldr	r2, [r2, #16]
 8001f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	601a      	str	r2, [r3, #0]
  eth_mac->rx_index = 0U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop

08001f44 <XMC_ETH_MAC_InitTxDescriptors>:

/* Initialize TX descriptors */
void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t next;

  XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the next descriptor address */
  for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	e02e      	b.n	8001fb0 <XMC_ETH_MAC_InitTxDescriptors+0x6c>
  {
  eth_mac->tx_desc[i].status = ETH_MAC_DMA_TDES0_TCH | ETH_MAC_DMA_TDES0_LS | ETH_MAC_DMA_TDES0_FS;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015b      	lsls	r3, r3, #5
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <XMC_ETH_MAC_InitTxDescriptors+0x9c>)
 8001f5e:	601a      	str	r2, [r3, #0]
  eth_mac->tx_desc[i].buffer1 = (uint32_t)&(eth_mac->tx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695a      	ldr	r2, [r3, #20]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	015b      	lsls	r3, r3, #5
 8001f68:	4413      	add	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	69d1      	ldr	r1, [r2, #28]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8001f74:	fb00 f202 	mul.w	r2, r0, r2
 8001f78:	440a      	add	r2, r1
 8001f7a:	609a      	str	r2, [r3, #8]
    next = i + 1U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
    if (next == eth_mac->num_tx_buf)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d101      	bne.n	8001f94 <XMC_ETH_MAC_InitTxDescriptors+0x50>
    {
        next = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]
    }
    eth_mac->tx_desc[i].buffer2 = (uint32_t)&(eth_mac->tx_desc[next]);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	015b      	lsls	r3, r3, #5
 8001f9c:	4413      	add	r3, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6951      	ldr	r1, [r2, #20]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	0152      	lsls	r2, r2, #5
 8001fa6:	440a      	add	r2, r1
 8001fa8:	60da      	str	r2, [r3, #12]
  uint32_t next;

  XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the next descriptor address */
  for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3301      	adds	r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d8c9      	bhi.n	8001f52 <XMC_ETH_MAC_InitTxDescriptors+0xe>
    {
        next = 0U;
    }
    eth_mac->tx_desc[i].buffer2 = (uint32_t)&(eth_mac->tx_desc[next]);
  }
  eth_mac->regs->TRANSMIT_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->tx_desc[0]);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6952      	ldr	r2, [r2, #20]
 8001fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fca:	3310      	adds	r3, #16
 8001fcc:	601a      	str	r2, [r3, #0]
  eth_mac->tx_index = 0U;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	30100000 	.word	0x30100000

08001fe4 <XMC_ETH_MAC_GetRxFrameSize>:
  return (len);
}

/* Get RX frame size */
uint32_t XMC_ETH_MAC_GetRxFrameSize(XMC_ETH_MAC_t *const eth_mac)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint32_t len = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]

  status = eth_mac->rx_desc[eth_mac->rx_index].status;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001ffa:	015b      	lsls	r3, r3, #5
 8001ffc:	4413      	add	r3, r2
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60bb      	str	r3, [r7, #8]

  if (status & ETH_MAC_DMA_RDES0_OWN)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	da02      	bge.n	800200e <XMC_ETH_MAC_GetRxFrameSize+0x2a>
  {
    /* Owned by DMA */
    len = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	e018      	b.n	8002040 <XMC_ETH_MAC_GetRxFrameSize+0x5c>
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <XMC_ETH_MAC_GetRxFrameSize+0x48>
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if (status & ETH_MAC_DMA_RDES0_OWN)
  {
    /* Owned by DMA */
    len = 0U;
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 800201e:	2b00      	cmp	r3, #0
 8002020:	d004      	beq.n	800202c <XMC_ETH_MAC_GetRxFrameSize+0x48>
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
           ((status & ETH_MAC_DMA_RDES0_LS) == 0U)) 
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
  {
    /* Owned by DMA */
    len = 0U;
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 8002028:	2b00      	cmp	r3, #0
 800202a:	d103      	bne.n	8002034 <XMC_ETH_MAC_GetRxFrameSize+0x50>
           ((status & ETH_MAC_DMA_RDES0_LS) == 0U)) 
  {
    /* Error, this block is invalid */
    len = 0xFFFFFFFFU;
 800202c:	f04f 33ff 	mov.w	r3, #4294967295
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	e005      	b.n	8002040 <XMC_ETH_MAC_GetRxFrameSize+0x5c>
  }
  else 
  {
    /* Subtract CRC */
    len = ((status & ETH_MAC_DMA_RDES0_FL) >> 16U) - 4U;
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <XMC_ETH_MAC_GetRxFrameSize+0x6c>)
 8002038:	4013      	ands	r3, r2
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	3b04      	subs	r3, #4
 800203e:	60fb      	str	r3, [r7, #12]
  }

  return len;
 8002040:	68fb      	ldr	r3, [r7, #12]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	3fff0000 	.word	0x3fff0000

08002054 <XMC_ETH_MAC_SetManagmentClockDivider>:

/* Set management clock divider */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t eth_mac_clk;
  XMC_ETH_MAC_STATUS_t status;
  __IO uint32_t *reg;

  eth_mac_clk = XMC_SCU_CLOCK_GetEthernetClockFrequency();
 800205c:	f7ff fe9e 	bl	8001d9c <XMC_SCU_CLOCK_GetEthernetClockFrequency>
 8002060:	6138      	str	r0, [r7, #16]
  status = XMC_ETH_MAC_STATUS_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	75fb      	strb	r3, [r7, #23]

  reg = &(eth_mac->regs->GMII_ADDRESS);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	3310      	adds	r3, #16
 800206c:	60fb      	str	r3, [r7, #12]
  if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_35MHZ)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4a1a      	ldr	r2, [pc, #104]	; (80020dc <XMC_ETH_MAC_SetManagmentClockDivider+0x88>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d803      	bhi.n	800207e <XMC_ETH_MAC_SetManagmentClockDivider+0x2a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_16;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2208      	movs	r2, #8
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	e029      	b.n	80020d2 <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_60MHZ)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <XMC_ETH_MAC_SetManagmentClockDivider+0x8c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d803      	bhi.n	800208e <XMC_ETH_MAC_SetManagmentClockDivider+0x3a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_26;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	220c      	movs	r2, #12
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	e021      	b.n	80020d2 <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_100MHZ)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <XMC_ETH_MAC_SetManagmentClockDivider+0x90>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d803      	bhi.n	800209e <XMC_ETH_MAC_SetManagmentClockDivider+0x4a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_42;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e019      	b.n	80020d2 <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_150MHZ)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <XMC_ETH_MAC_SetManagmentClockDivider+0x94>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d803      	bhi.n	80020ae <XMC_ETH_MAC_SetManagmentClockDivider+0x5a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_62;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2204      	movs	r2, #4
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	e011      	b.n	80020d2 <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_200MHZ)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <XMC_ETH_MAC_SetManagmentClockDivider+0x98>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d803      	bhi.n	80020be <XMC_ETH_MAC_SetManagmentClockDivider+0x6a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_102;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2210      	movs	r2, #16
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e009      	b.n	80020d2 <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_250MHZ)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <XMC_ETH_MAC_SetManagmentClockDivider+0x9c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d803      	bhi.n	80020ce <XMC_ETH_MAC_SetManagmentClockDivider+0x7a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_124;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2214      	movs	r2, #20
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e001      	b.n	80020d2 <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else
  {
    status = XMC_ETH_MAC_STATUS_ERROR;
 80020ce:	2302      	movs	r3, #2
 80020d0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	02160ec0 	.word	0x02160ec0
 80020e0:	03938700 	.word	0x03938700
 80020e4:	05f5e100 	.word	0x05f5e100
 80020e8:	08f0d180 	.word	0x08f0d180
 80020ec:	0bebc200 	.word	0x0bebc200
 80020f0:	0ee6b280 	.word	0x0ee6b280

080020f4 <XMC_ETH_MAC_Enable>:

/* ETH MAC enable */
void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(eth_mac);

  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_ETH);
 80020fc:	2004      	movs	r0, #4
 80020fe:	f7ff fa9d 	bl	800163c <XMC_SCU_CLOCK_EnableClock>
#if UC_DEVICE != XMC4500
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
 8002102:	4804      	ldr	r0, [pc, #16]	; (8002114 <XMC_ETH_MAC_Enable+0x20>)
 8002104:	f7ff faaa 	bl	800165c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <XMC_ETH_MAC_Enable+0x20>)
 800210a:	f7ff f90f 	bl	800132c <XMC_SCU_RESET_DeassertPeripheralReset>
}
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000004 	.word	0x20000004

08002118 <XMC_ETH_MAC_ReadPhy>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_ETH);
}

/* Read physical layer and obtain status */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t *data)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	72fb      	strb	r3, [r7, #11]
 8002126:	4613      	mov	r3, r2
 8002128:	72bb      	strb	r3, [r7, #10]
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	6912      	ldr	r2, [r2, #16]
 8002134:	f002 013c 	and.w	r1, r2, #60	; 0x3c
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
 8002138:	7afa      	ldrb	r2, [r7, #11]
 800213a:	02d2      	lsls	r2, r2, #11
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 800213c:	4311      	orrs	r1, r2
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));
 800213e:	7aba      	ldrb	r2, [r7, #10]
 8002140:	0192      	lsls	r2, r2, #6
{
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8002142:	430a      	orrs	r2, r1
 8002144:	f042 0201 	orr.w	r2, r2, #1
 8002148:	611a      	str	r2, [r3, #16]
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));

  /* Poll busy bit during max PHY_TIMEOUT time */
  retries = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  do
  {
    if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d107      	bne.n	800216c <XMC_ETH_MAC_ReadPhy+0x54>
    {
      *data = (uint16_t)(eth_mac->regs->GMII_DATA & ETH_GMII_DATA_MD_Msk);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	b29a      	uxth	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	801a      	strh	r2, [r3, #0]
      return XMC_ETH_MAC_STATUS_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	e008      	b.n	800217e <XMC_ETH_MAC_ReadPhy+0x66>
    }
    ++retries;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3301      	adds	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
  } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002178:	4293      	cmp	r3, r2
 800217a:	d9e8      	bls.n	800214e <XMC_ETH_MAC_ReadPhy+0x36>

  return XMC_ETH_MAC_STATUS_ERROR;
 800217c:	2302      	movs	r3, #2
}
 800217e:	4618      	mov	r0, r3
 8002180:	371c      	adds	r7, #28
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop

0800218c <XMC_ETH_MAC_WritePhy>:

/* Write physical layer and return status */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	4608      	mov	r0, r1
 8002196:	4611      	mov	r1, r2
 8002198:	461a      	mov	r2, r3
 800219a:	4603      	mov	r3, r0
 800219c:	70fb      	strb	r3, [r7, #3]
 800219e:	460b      	mov	r3, r1
 80021a0:	70bb      	strb	r3, [r7, #2]
 80021a2:	4613      	mov	r3, r2
 80021a4:	803b      	strh	r3, [r7, #0]
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	883a      	ldrh	r2, [r7, #0]
 80021ac:	615a      	str	r2, [r3, #20]
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	6912      	ldr	r2, [r2, #16]
 80021b8:	f002 013c 	and.w	r1, r2, #60	; 0x3c
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	02d2      	lsls	r2, r2, #11
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
 80021c0:	4311      	orrs	r1, r2
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));
 80021c2:	78ba      	ldrb	r2, [r7, #2]
 80021c4:	0192      	lsls	r2, r2, #6
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
{
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 80021c6:	430a      	orrs	r2, r1
 80021c8:	f042 0203 	orr.w	r2, r2, #3
 80021cc:	611a      	str	r2, [r3, #16]
                                           (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));

   /* Poll busy bit during max PHY_TIMEOUT time */
  retries = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
  do
  {
    if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <XMC_ETH_MAC_WritePhy+0x58>
    {
      return XMC_ETH_MAC_STATUS_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e008      	b.n	80021f6 <XMC_ETH_MAC_WritePhy+0x6a>
    }
    ++retries;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
  } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d9ee      	bls.n	80021d2 <XMC_ETH_MAC_WritePhy+0x46>

  return XMC_ETH_MAC_STATUS_ERROR;
 80021f4:	2302      	movs	r3, #2
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop

08002204 <XMC_ETH_MAC_EnableEvent>:
  }
}

/* Enable event */
void XMC_ETH_MAC_EnableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_EnableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->INTERRUPT_MASK &= ~(event >> 16U);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	0c12      	lsrs	r2, r2, #16
 800221c:	43d2      	mvns	r2, r2
 800221e:	400a      	ands	r2, r1
 8002220:	63da      	str	r2, [r3, #60]	; 0x3c

  event &= (uint16_t)0x7fffU;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002228:	603b      	str	r3, [r7, #0]
  if (XCM_ETH_MAC_IsNormalEvent(event))
 800222a:	6838      	ldr	r0, [r7, #0]
 800222c:	f7ff fdbe 	bl	8001dac <XCM_ETH_MAC_IsNormalEvent>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <XMC_ETH_MAC_EnableEvent+0x3a>
  {
  event |= (uint32_t)ETH_INTERRUPT_ENABLE_NIE_Msk;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	603b      	str	r3, [r7, #0]
  }

  if (XCM_ETH_MAC_IsAbnormalEvent(event))
 800223e:	6838      	ldr	r0, [r7, #0]
 8002240:	f7ff fdc8 	bl	8001dd4 <XCM_ETH_MAC_IsAbnormalEvent>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <XMC_ETH_MAC_EnableEvent+0x4e>
  {
  event |= (uint32_t)ETH_INTERRUPT_ENABLE_AIE_Msk;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002250:	603b      	str	r3, [r7, #0]
  }

  eth_mac->regs->INTERRUPT_ENABLE |= event;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6819      	ldr	r1, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225e:	331c      	adds	r3, #28
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	431a      	orrs	r2, r3
 8002266:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800226a:	331c      	adds	r3, #28
 800226c:	601a      	str	r2, [r3, #0]
}
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <XMC_ETH_MAC_DisableEvent>:

/* Disable event */
void XMC_ETH_MAC_DisableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_DisableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->INTERRUPT_MASK |= event >> 16U;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	0c12      	lsrs	r2, r2, #16
 800228c:	430a      	orrs	r2, r1
 800228e:	63da      	str	r2, [r3, #60]	; 0x3c

  event &= 0x7fffU;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002296:	603b      	str	r3, [r7, #0]
  eth_mac->regs->INTERRUPT_ENABLE &= ~event;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a4:	331c      	adds	r3, #28
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	401a      	ands	r2, r3
 80022ae:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80022b2:	331c      	adds	r3, #28
 80022b4:	601a      	str	r2, [r3, #0]
}
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <XMC_ETH_MAC_ClearEventStatus>:

/* Clear event status */
void XMC_ETH_MAC_ClearEventStatus(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_ClearEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  if ((eth_mac->regs->STATUS & ETH_STATUS_NIS_Msk) != 0U)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d2:	3314      	adds	r3, #20
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <XMC_ETH_MAC_ClearEventStatus+0x26>
  {
    event |= (uint32_t)ETH_STATUS_NIS_Msk;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	603b      	str	r3, [r7, #0]
  }

  if ((eth_mac->regs->STATUS & ETH_STATUS_AIS_Msk) != 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ee:	3314      	adds	r3, #20
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <XMC_ETH_MAC_ClearEventStatus+0x42>
  {
    event |= (uint32_t)ETH_STATUS_AIS_Msk;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002300:	603b      	str	r3, [r7, #0]
  }

  eth_mac->regs->STATUS = event & 0x0001FFFFU;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800230c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002310:	3314      	adds	r3, #20
 8002312:	601a      	str	r2, [r3, #0]
}
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop

08002320 <XMC_ETH_MAC_ReturnRxDescriptor>:
      temp_status);
}

/* Return RX descriptor */
void XMC_ETH_MAC_ReturnRxDescriptor(XMC_ETH_MAC_t *const eth_mac)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  eth_mac->rx_desc[eth_mac->rx_index].status |= ETH_MAC_DMA_RDES0_OWN;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002332:	015b      	lsls	r3, r3, #5
 8002334:	4413      	add	r3, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6911      	ldr	r1, [r2, #16]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8002340:	0152      	lsls	r2, r2, #5
 8002342:	440a      	add	r2, r1
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800234a:	601a      	str	r2, [r3, #0]
  eth_mac->rx_index++;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002352:	3301      	adds	r3, #1
 8002354:	b2da      	uxtb	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  if (eth_mac->rx_index == eth_mac->num_rx_buf)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002368:	429a      	cmp	r2, r3
 800236a:	d103      	bne.n	8002374 <XMC_ETH_MAC_ReturnRxDescriptor+0x54>
  {
    eth_mac->rx_index = 0U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  } 
}
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop

08002380 <XMC_ETH_MAC_ReturnTxDescriptor>:

/* Return TX descriptor */
void XMC_ETH_MAC_ReturnTxDescriptor(XMC_ETH_MAC_t *const eth_mac)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  eth_mac->tx_ts_index = eth_mac->tx_index;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  eth_mac->tx_desc[eth_mac->tx_index].status |= ETH_MAC_DMA_TDES0_CIC |ETH_MAC_DMA_TDES0_OWN;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800239e:	015b      	lsls	r3, r3, #5
 80023a0:	441a      	add	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6959      	ldr	r1, [r3, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80023ac:	015b      	lsls	r3, r3, #5
 80023ae:	440b      	add	r3, r1
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023b6:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80023ba:	6013      	str	r3, [r2, #0]
  eth_mac->tx_index++;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80023c2:	3301      	adds	r3, #1
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  if (eth_mac->tx_index == eth_mac->num_tx_buf)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023d8:	429a      	cmp	r2, r3
 80023da:	d103      	bne.n	80023e4 <XMC_ETH_MAC_ReturnTxDescriptor+0x64>
  {
    eth_mac->tx_index = 0U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  } 

  eth_mac->frame_end = NULL;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	621a      	str	r2, [r3, #32]
}
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70fb      	strb	r3, [r7, #3]
 8002400:	4613      	mov	r3, r2
 8002402:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	b2db      	uxtb	r3, r3
 800240a:	4618      	mov	r0, r3
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3204      	adds	r2, #4
 8002418:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4619      	mov	r1, r3
 8002426:	23f8      	movs	r3, #248	; 0xf8
 8002428:	408b      	lsls	r3, r1
 800242a:	43db      	mvns	r3, r3
 800242c:	ea02 0103 	and.w	r1, r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	1d02      	adds	r2, r0, #4
 8002434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4618      	mov	r0, r3
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3204      	adds	r2, #4
 800244c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002450:	78bb      	ldrb	r3, [r7, #2]
 8002452:	78f9      	ldrb	r1, [r7, #3]
 8002454:	f001 0103 	and.w	r1, r1, #3
 8002458:	00c9      	lsls	r1, r1, #3
 800245a:	408b      	lsls	r3, r1
 800245c:	ea42 0103 	orr.w	r1, r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	1d02      	adds	r2, r0, #4
 8002464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop

08002474 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	70fb      	strb	r3, [r7, #3]
 8002480:	4613      	mov	r3, r2
 8002482:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4619      	mov	r1, r3
 800248e:	2303      	movs	r3, #3
 8002490:	408b      	lsls	r3, r1
 8002492:	43db      	mvns	r3, r3
 8002494:	401a      	ands	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800249e:	78bb      	ldrb	r3, [r7, #2]
 80024a0:	78f9      	ldrb	r1, [r7, #3]
 80024a2:	0049      	lsls	r1, r1, #1
 80024a4:	408b      	lsls	r3, r1
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	675a      	str	r2, [r3, #116]	; 0x74
}
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop

080024b8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80024ca:	b2db      	uxtb	r3, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f023 020f 	bic.w	r2, r3, #15
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop

08002500 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f94c 	bl	80027a8 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	795b      	ldrb	r3, [r3, #5]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d112      	bne.n	800253e <XMC_SPI_CH_Init+0x3e>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	791b      	ldrb	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <XMC_SPI_CH_Init+0x30>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	4619      	mov	r1, r3
 8002528:	2202      	movs	r2, #2
 800252a:	f000 f9f9 	bl	8002920 <XMC_USIC_CH_SetBaudrateEx>
 800252e:	e006      	b.n	800253e <XMC_SPI_CH_Init+0x3e>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4619      	mov	r1, r3
 8002538:	2202      	movs	r2, #2
 800253a:	f000 f981 	bl	8002840 <XMC_USIC_CH_SetBaudrate>
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a0e      	ldr	r2, [pc, #56]	; (800257c <XMC_SPI_CH_Init+0x7c>)
 8002542:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800254a:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	795b      	ldrb	r3, [r3, #5]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d107      	bne.n	8002564 <XMC_SPI_CH_Init+0x64>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	799b      	ldrb	r3, [r3, #6]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8002558:	f043 030b 	orr.w	r3, r3, #11
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f04f 32ff 	mov.w	r2, #4294967295
 800256a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	891b      	ldrh	r3, [r3, #8]
 8002570:	461a      	mov	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	073f0102 	.word	0x073f0102

08002580 <XMC_SPI_CH_SetBaudrate>:

XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  XMC_SPI_CH_STATUS_t status;
  
  status = XMC_SPI_CH_STATUS_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 1U))
 800258e:	f7fe ff0d 	bl	80013ac <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8002592:	4603      	mov	r3, r0
 8002594:	085a      	lsrs	r2, r3, #1
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d309      	bcc.n	80025b0 <XMC_SPI_CH_SetBaudrate+0x30>
  {
    if (XMC_USIC_CH_SetBaudrate(channel, rate, XMC_SPI_CH_OVERSAMPLING) == XMC_USIC_CH_STATUS_OK)
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	6839      	ldr	r1, [r7, #0]
 80025a0:	2202      	movs	r2, #2
 80025a2:	f000 f94d 	bl	8002840 <XMC_USIC_CH_SetBaudrate>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <XMC_SPI_CH_SetBaudrate+0x30>
    {
      status = XMC_SPI_CH_STATUS_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]
    }
  } 
  return status;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop

080025bc <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80025ca:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d103      	bne.n	80025da <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d6:	81fb      	strh	r3, [r7, #14]
 80025d8:	e003      	b.n	80025e2 <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80025e0:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 80025e2:	89fb      	ldrh	r3, [r7, #14]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <XMC_SPI_CH_Stop>:
                         (((divider_factor1_int_min - 1) << USIC_CH_PCR_SSCMode_PCTQ1_Pos) & (uint32_t)USIC_CH_PCR_SSCMode_PCTQ1_Msk) |
                         (((divider_factor2 - 1 ) << USIC_CH_PCR_SSCMode_DCTQ1_Pos) & (uint32_t)USIC_CH_PCR_SSCMode_DCTQ1_Msk);
}

XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  XMC_SPI_CH_STATUS_t status = XMC_SPI_CH_STATUS_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]

  if (((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY) != 0U)
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff5b 	bl	80024b8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002602:	4603      	mov	r3, r0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	b25b      	sxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	da02      	bge.n	8002612 <XMC_SPI_CH_Stop+0x22>
  {
    status = XMC_SPI_CH_STATUS_BUSY;
 800260c:	2302      	movs	r3, #2
 800260e:	73fb      	strb	r3, [r7, #15]
 8002610:	e003      	b.n	800261a <XMC_SPI_CH_Stop+0x2a>
  }
  else
  {

    /* USIC channel in IDLE mode */
    XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	2100      	movs	r1, #0
 8002616:	f7ff ff5f 	bl	80024d8 <XMC_USIC_CH_SetMode>
  }

  return status;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002636:	b2db      	uxtb	r3, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop

08002660 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 800266a:	2310      	movs	r3, #16
 800266c:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f89a 	bl	80027a8 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	7a1b      	ldrb	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	7a1b      	ldrb	r3, [r3, #8]
 8002680:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	791b      	ldrb	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <XMC_UART_CH_Init+0x3e>
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	4611      	mov	r1, r2
 8002696:	461a      	mov	r2, r3
 8002698:	f000 f942 	bl	8002920 <XMC_USIC_CH_SetBaudrateEx>
 800269c:	e006      	b.n	80026ac <XMC_UART_CH_Init+0x4c>
  }
  else
  {
    /* Fractional divider mode */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	4619      	mov	r1, r3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	f000 f8ca 	bl	8002840 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	79db      	ldrb	r3, [r3, #7]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	085b      	lsrs	r3, r3, #1
 80026b8:	3301      	adds	r3, #1
 80026ba:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80026bc:	4313      	orrs	r3, r2
 80026be:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	795b      	ldrb	r3, [r3, #5]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	061b      	lsls	r3, r3, #24
 80026d2:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	799b      	ldrb	r3, [r3, #6]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <XMC_UART_CH_Init+0x96>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	799b      	ldrb	r3, [r3, #6]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	635a      	str	r2, [r3, #52]	; 0x34
 80026f4:	e008      	b.n	8002708 <XMC_UART_CH_Init+0xa8>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	795b      	ldrb	r3, [r3, #5]
 80026fe:	3b01      	subs	r3, #1
 8002700:	041b      	lsls	r3, r3, #16
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800270e:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f04f 32ff 	mov.w	r2, #4294967295
 8002716:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	895b      	ldrh	r3, [r3, #10]
 800271c:	461a      	mov	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <XMC_UART_CH_Transmit>:
  
  return (XMC_UART_CH_STATUS_t)status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800273a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d110      	bne.n	8002764 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002742:	bf00      	nop
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff ff6d 	bl	8002624 <XMC_USIC_CH_GetTransmitBufferStatus>
 800274a:	4603      	mov	r3, r0
 800274c:	2b80      	cmp	r3, #128	; 0x80
 800274e:	d0f9      	beq.n	8002744 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002756:	f7ff ff75 	bl	8002644 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002762:	e003      	b.n	800276c <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8002764:	887a      	ldrh	r2, [r7, #2]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop

08002774 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002782:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	81fb      	strh	r3, [r7, #14]
 8002790:	e003      	b.n	800279a <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002798:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800279a:	89fb      	ldrh	r3, [r7, #14]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a1a      	ldr	r2, [pc, #104]	; (800281c <XMC_USIC_CH_Enable+0x74>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d003      	beq.n	80027c0 <XMC_USIC_CH_Enable+0x18>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a19      	ldr	r2, [pc, #100]	; (8002820 <XMC_USIC_CH_Enable+0x78>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d103      	bne.n	80027c8 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 80027c0:	4818      	ldr	r0, [pc, #96]	; (8002824 <XMC_USIC_CH_Enable+0x7c>)
 80027c2:	f000 f99b 	bl	8002afc <XMC_USIC_Enable>
 80027c6:	e016      	b.n	80027f6 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a17      	ldr	r2, [pc, #92]	; (8002828 <XMC_USIC_CH_Enable+0x80>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d003      	beq.n	80027d8 <XMC_USIC_CH_Enable+0x30>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a16      	ldr	r2, [pc, #88]	; (800282c <XMC_USIC_CH_Enable+0x84>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d103      	bne.n	80027e0 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80027d8:	4815      	ldr	r0, [pc, #84]	; (8002830 <XMC_USIC_CH_Enable+0x88>)
 80027da:	f000 f98f 	bl	8002afc <XMC_USIC_Enable>
 80027de:	e00a      	b.n	80027f6 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a14      	ldr	r2, [pc, #80]	; (8002834 <XMC_USIC_CH_Enable+0x8c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d003      	beq.n	80027f0 <XMC_USIC_CH_Enable+0x48>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a13      	ldr	r2, [pc, #76]	; (8002838 <XMC_USIC_CH_Enable+0x90>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d102      	bne.n	80027f6 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 80027f0:	4812      	ldr	r0, [pc, #72]	; (800283c <XMC_USIC_CH_Enable+0x94>)
 80027f2:	f000 f983 	bl	8002afc <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2203      	movs	r2, #3
 80027fa:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 80027fc:	bf00      	nop
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f9      	beq.n	80027fe <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f023 020f 	bic.w	r2, r3, #15
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40030000 	.word	0x40030000
 8002820:	40030200 	.word	0x40030200
 8002824:	40030008 	.word	0x40030008
 8002828:	48020000 	.word	0x48020000
 800282c:	48020200 	.word	0x48020200
 8002830:	48020008 	.word	0x48020008
 8002834:	48024000 	.word	0x48024000
 8002838:	48024200 	.word	0x48024200
 800283c:	48024008 	.word	0x48024008

08002840 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08e      	sub	sp, #56	; 0x38
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b63      	cmp	r3, #99	; 0x63
 8002850:	d958      	bls.n	8002904 <XMC_USIC_CH_SetBaudrate+0xc4>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d055      	beq.n	8002904 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8002858:	f7fe fda8 	bl	80013ac <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800285c:	4602      	mov	r2, r0
 800285e:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8002860:	fba3 2302 	umull	r2, r3, r3, r2
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4a2b      	ldr	r2, [pc, #172]	; (8002918 <XMC_USIC_CH_SetBaudrate+0xd8>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8002874:	2301      	movs	r3, #1
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8002878:	2301      	movs	r3, #1
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 800287c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002880:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8002882:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
 8002888:	e022      	b.n	80028d0 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800288e:	fb02 f203 	mul.w	r2, r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	0a9b      	lsrs	r3, r3, #10
 80028a4:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ac:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b4:	d209      	bcs.n	80028ca <XMC_USIC_CH_SetBaudrate+0x8a>
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d205      	bcs.n	80028ca <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80028ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028cc:	3b01      	subs	r3, #1
 80028ce:	633b      	str	r3, [r7, #48]	; 0x30
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1d9      	bne.n	800288a <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <XMC_USIC_CH_SetBaudrate+0xdc>)
 80028e6:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	3a01      	subs	r2, #1
 80028ec:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80028ee:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80028f6:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002902:	e002      	b.n	800290a <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 800290a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800290e:	4618      	mov	r0, r3
 8002910:	3738      	adds	r7, #56	; 0x38
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	51eb851f 	.word	0x51eb851f
 800291c:	fc0080ef 	.word	0xfc0080ef

08002920 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08c      	sub	sp, #48	; 0x30
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 800292c:	f7fe fd3e 	bl	80013ac <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8002930:	4603      	mov	r3, r0
 8002932:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	fb02 f303 	mul.w	r3, r2, r3
 800293c:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 8002942:	6a3a      	ldr	r2, [r7, #32]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	429a      	cmp	r2, r3
 8002948:	dd5f      	ble.n	8002a0a <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 800294a:	6a3a      	ldr	r2, [r7, #32]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 8002954:	e010      	b.n	8002978 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	3301      	adds	r3, #1
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	fb02 f303 	mul.w	r3, r2, r3
 8002964:	461a      	mov	r2, r3
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	fb03 f302 	mul.w	r3, r3, r2
 800296c:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 800296e:	6a3a      	ldr	r2, [r7, #32]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	fb92 f3f3 	sdiv	r3, r2, r3
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800297e:	4293      	cmp	r3, r2
 8002980:	d8e9      	bhi.n	8002956 <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8002982:	6a3a      	ldr	r2, [r7, #32]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	3301      	adds	r3, #1
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80029ba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	1acb      	subs	r3, r1, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bfb8      	it	lt
 80029c8:	425b      	neglt	r3, r3
 80029ca:	429a      	cmp	r2, r3
 80029cc:	da02      	bge.n	80029d4 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 80029ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d0:	3301      	adds	r3, #1
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 80029ec:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	3a01      	subs	r2, #1
 80029f2:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80029f4:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	3b01      	subs	r3, #1
 80029fa:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80029fc:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a08:	e002      	b.n	8002a10 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8002a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3730      	adds	r7, #48	; 0x30
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	fc0080ef 	.word	0xfc0080ef

08002a20 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a36:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8002a48:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	0211      	lsls	r1, r2, #8
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8002a52:	79fa      	ldrb	r2, [r7, #7]
 8002a54:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8002a56:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8002a58:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	f8ffc0c0 	.word	0xf8ffc0c0

08002a70 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002a86:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8002a98:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	0211      	lsls	r1, r2, #8
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8002aa2:	79fa      	ldrb	r2, [r7, #7]
 8002aa4:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8002aa6:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	efffc0c0 	.word	0xefffc0c0

08002ac4 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	460b      	mov	r3, r1
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	7afb      	ldrb	r3, [r7, #11]
 8002ad8:	2107      	movs	r1, #7
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8002ae2:	7afb      	ldrb	r3, [r7, #11]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8002aea:	431a      	orrs	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop

08002afc <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a28      	ldr	r2, [pc, #160]	; (8002ba8 <XMC_USIC_Enable+0xac>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d118      	bne.n	8002b3e <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8002b0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002b10:	f7fe fda4 	bl	800165c <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8002b14:	bf00      	nop
 8002b16:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002b1a:	f7fe fdbb 	bl	8001694 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f8      	bne.n	8002b16 <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8002b24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002b28:	f7fe fc00 	bl	800132c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8002b2c:	bf00      	nop
 8002b2e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002b32:	f7fe fc17 	bl	8001364 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f8      	bne.n	8002b2e <XMC_USIC_Enable+0x32>
 8002b3c:	e030      	b.n	8002ba0 <XMC_USIC_Enable+0xa4>
#endif 
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a1a      	ldr	r2, [pc, #104]	; (8002bac <XMC_USIC_Enable+0xb0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d114      	bne.n	8002b70 <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8002b46:	481a      	ldr	r0, [pc, #104]	; (8002bb0 <XMC_USIC_Enable+0xb4>)
 8002b48:	f7fe fd88 	bl	800165c <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8002b4c:	bf00      	nop
 8002b4e:	4818      	ldr	r0, [pc, #96]	; (8002bb0 <XMC_USIC_Enable+0xb4>)
 8002b50:	f7fe fda0 	bl	8001694 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f9      	bne.n	8002b4e <XMC_USIC_Enable+0x52>
#endif 
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8002b5a:	4815      	ldr	r0, [pc, #84]	; (8002bb0 <XMC_USIC_Enable+0xb4>)
 8002b5c:	f7fe fbe6 	bl	800132c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8002b60:	bf00      	nop
 8002b62:	4813      	ldr	r0, [pc, #76]	; (8002bb0 <XMC_USIC_Enable+0xb4>)
 8002b64:	f7fe fbfe 	bl	8001364 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f9      	bne.n	8002b62 <XMC_USIC_Enable+0x66>
 8002b6e:	e017      	b.n	8002ba0 <XMC_USIC_Enable+0xa4>
#endif 
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <XMC_USIC_Enable+0xb8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d113      	bne.n	8002ba0 <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8002b78:	480f      	ldr	r0, [pc, #60]	; (8002bb8 <XMC_USIC_Enable+0xbc>)
 8002b7a:	f7fe fd6f 	bl	800165c <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 8002b7e:	bf00      	nop
 8002b80:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <XMC_USIC_Enable+0xbc>)
 8002b82:	f7fe fd87 	bl	8001694 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f9      	bne.n	8002b80 <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8002b8c:	480a      	ldr	r0, [pc, #40]	; (8002bb8 <XMC_USIC_Enable+0xbc>)
 8002b8e:	f7fe fbcd 	bl	800132c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8002b92:	bf00      	nop
 8002b94:	4808      	ldr	r0, [pc, #32]	; (8002bb8 <XMC_USIC_Enable+0xbc>)
 8002b96:	f7fe fbe5 	bl	8001364 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f9      	bne.n	8002b94 <XMC_USIC_Enable+0x98>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40030008 	.word	0x40030008
 8002bac:	48020008 	.word	0x48020008
 8002bb0:	10000080 	.word	0x10000080
 8002bb4:	48024008 	.word	0x48024008
 8002bb8:	10000100 	.word	0x10000100

08002bbc <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <_sbrk+0x5c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <_sbrk+0x5c>)
 8002bce:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <_sbrk+0x60>)
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <_sbrk+0x5c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3303      	adds	r3, #3
 8002bdc:	f023 0303 	bic.w	r3, r3, #3
 8002be0:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8002be2:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <_sbrk+0x5c>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <_sbrk+0x64>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d207      	bcs.n	8002c00 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <_sbrk+0x5c>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	4a07      	ldr	r2, [pc, #28]	; (8002c18 <_sbrk+0x5c>)
 8002bfa:	6013      	str	r3, [r2, #0]
    return (base);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	e006      	b.n	8002c0e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8002c00:	f00b fea0 	bl	800e944 <__errno>
 8002c04:	4602      	mov	r2, r0
 8002c06:	230c      	movs	r3, #12
 8002c08:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	1ffe89b0 	.word	0x1ffe89b0
 8002c1c:	200030a0 	.word	0x200030a0
 8002c20:	2003ffc0 	.word	0x2003ffc0

08002c24 <_init>:

/* Init */
void _init(void)
{}
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	401a      	ands	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop

08002c54 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c66:	b2db      	uxtb	r3, r3
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	401a      	ands	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop

08002c9c <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cfa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bf14      	ite	ne
 8002d1e:	2301      	movne	r3, #1
 8002d20:	2300      	moveq	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <XMC_UART_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableEvent(),  XMC_UART_CH_ClearStatusFlag()\n\n\n
 */
__STATIC_INLINE uint32_t XMC_UART_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  return channel->PSR_ASCMode;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop

08002d64 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4798      	blx	r3
 8002d78:	4603      	mov	r3, r0
 8002d7a:	73fb      	strb	r3, [r7, #15]

  return status;
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop

08002d88 <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8002d94:	2304      	movs	r3, #4
 8002d96:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->receive_mode)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d000      	beq.n	8002da6 <UART_Receive+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8002da4:	e007      	b.n	8002db6 <UART_Receive+0x2e>
    ret_stat = UART_StartReceiveDMA(handle, data_ptr, count);
    break;
#endif
#ifdef UART_RX_DIRECT_USED
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	f000 f808 	bl	8002dc0 <UART_lStartReceivePolling>
 8002db0:	4603      	mov	r3, r0
 8002db2:	75fb      	strb	r3, [r7, #23]
    break;
 8002db4:	bf00      	nop
#endif
  default:
    break;
  }
  return ret_stat;
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <UART_lStartReceivePolling>:
 * cannot be aborted since it is blocking implementation. Based on FIFO selection,
 * either RBUF or OUT register will be read.
 *
 */
static UART_STATUS_t UART_lStartReceivePolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	77fb      	strb	r3, [r7, #31]
  uint32_t loc_status;

  XMC_ASSERT("UART_Receive: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if ((data_ptr != NULL) && (count > 0U))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d060      	beq.n	8002e98 <UART_lStartReceivePolling+0xd8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d05d      	beq.n	8002e98 <UART_lStartReceivePolling+0xd8>
  {
    ret_stat = UART_STATUS_BUSY;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	77fb      	strb	r3, [r7, #31]
    if (handle->runtime->rx_busy == false)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	7e5b      	ldrb	r3, [r3, #25]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f083 0301 	eor.w	r3, r3, #1
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d052      	beq.n	8002e98 <UART_lStartReceivePolling+0xd8>
    {
      handle->runtime->rx_busy = true;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2201      	movs	r2, #1
 8002df8:	765a      	strb	r2, [r3, #25]
      if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d004      	beq.n	8002e10 <UART_lStartReceivePolling+0x50>
      {
        /*Clear the receive FIFO, configure the trigger lime
         * and enable the receive events*/
        XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff6e 	bl	8002cec <XMC_USIC_CH_RXFIFO_Flush>
      }
      for (loc_index = 0U; loc_index < count; loc_index++)
 8002e10:	2300      	movs	r3, #0
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	e036      	b.n	8002e84 <UART_lStartReceivePolling+0xc4>
      {
        /*If receive FIFO is configured, wait for FIFO to get data.*/
        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <UART_lStartReceivePolling+0x76>
        {
          /*Wait if FIFO empty*/
          while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 8002e22:	bf00      	nop
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff6d 	bl	8002d08 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f7      	bne.n	8002e24 <UART_lStartReceivePolling+0x64>
 8002e34:	e018      	b.n	8002e68 <UART_lStartReceivePolling+0xa8>
          }
        }
        else
        {
          /*Wait for RIF or AIF flag update*/
          loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff78 	bl	8002d30 <XMC_UART_CH_GetStatusFlag>
 8002e40:	6178      	str	r0, [r7, #20]
          while (!(loc_status & ((uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION |
 8002e42:	e005      	b.n	8002e50 <UART_lStartReceivePolling+0x90>
                (uint32_t)XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION)))
          {
            loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff71 	bl	8002d30 <XMC_UART_CH_GetStatusFlag>
 8002e4e:	6178      	str	r0, [r7, #20]
        }
        else
        {
          /*Wait for RIF or AIF flag update*/
          loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
          while (!(loc_status & ((uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION |
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f4      	beq.n	8002e44 <UART_lStartReceivePolling+0x84>
            loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
          }
          /*Clear the detected event.
           * Both events should not be cleared at once, otherwise if 2 bytes are received, only
           * one byte will be read.*/
          XMC_UART_CH_ClearStatusFlag(handle->channel,
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002e64:	f7ff ff70 	bl	8002d48 <XMC_UART_CH_ClearStatusFlag>
              ((uint32_t)XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION | (uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
        }
        data_ptr[loc_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	18d4      	adds	r4, r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fc7e 	bl	8002774 <XMC_UART_CH_GetReceivedData>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	7023      	strb	r3, [r4, #0]
      {
        /*Clear the receive FIFO, configure the trigger lime
         * and enable the receive events*/
        XMC_USIC_CH_RXFIFO_Flush(handle->channel);
      }
      for (loc_index = 0U; loc_index < count; loc_index++)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	3301      	adds	r3, #1
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d3c4      	bcc.n	8002e16 <UART_lStartReceivePolling+0x56>
          XMC_UART_CH_ClearStatusFlag(handle->channel,
              ((uint32_t)XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION | (uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
        }
        data_ptr[loc_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
      }
      ret_stat = UART_STATUS_SUCCESS;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	77fb      	strb	r3, [r7, #31]
      handle->runtime->rx_busy = false;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2200      	movs	r2, #0
 8002e96:	765a      	strb	r2, [r3, #25]
    }
  }
  return ret_stat;
 8002e98:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd90      	pop	{r4, r7, pc}
 8002ea2:	bf00      	nop

08002ea4 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d240      	bcs.n	8002f40 <UART_lTransmitHandler+0x9c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d027      	beq.n	8002f1a <UART_lTransmitHandler+0x76>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8002eca:	e01a      	b.n	8002f02 <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d212      	bcs.n	8002efe <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	4608      	mov	r0, r1
 8002eec:	4619      	mov	r1, r3
 8002eee:	f7ff fc1b 	bl	8002728 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	60da      	str	r2, [r3, #12]
 8002efc:	e001      	b.n	8002f02 <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
 8002efe:	bf00      	nop
 8002f00:	e053      	b.n	8002faa <UART_lTransmitHandler+0x106>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fec8 	bl	8002c9c <XMC_USIC_CH_TXFIFO_IsFull>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f083 0301 	eor.w	r3, r3, #1
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1d9      	bne.n	8002ecc <UART_lTransmitHandler+0x28>
 8002f18:	e047      	b.n	8002faa <UART_lTransmitHandler+0x106>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	4413      	add	r3, r2
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	4608      	mov	r0, r1
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f7ff fbfa 	bl	8002728 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	e034      	b.n	8002faa <UART_lTransmitHandler+0x106>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff febd 	bl	8002cc4 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d02c      	beq.n	8002faa <UART_lTransmitHandler+0x106>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <UART_lTransmitHandler+0xc8>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002f66:	f7ff fe85 	bl	8002c74 <XMC_USIC_CH_TXFIFO_DisableEvent>
 8002f6a:	e006      	b.n	8002f7a <UART_lTransmitHandler+0xd6>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f76:	f7ff fe5b 	bl	8002c30 <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002f7a:	bf00      	nop
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fe67 	bl	8002c54 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b80      	cmp	r3, #128	; 0x80
 8002f8a:	d0f7      	beq.n	8002f7c <UART_lTransmitHandler+0xd8>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <UART_lTransmitHandler+0x106>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4798      	blx	r3
      }
    }
  }
}
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fbc:	0a1b      	lsrs	r3, r3, #8
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	db0b      	blt.n	8002ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fde:	4908      	ldr	r1, [pc, #32]	; (8003000 <__NVIC_EnableIRQ+0x34>)
 8002fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	79fa      	ldrb	r2, [r7, #7]
 8002fe8:	f002 021f 	and.w	r2, r2, #31
 8002fec:	2001      	movs	r0, #1
 8002fee:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000e100 	.word	0xe000e100

08003004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003014:	2b00      	cmp	r3, #0
 8003016:	db0a      	blt.n	800302e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003018:	490d      	ldr	r1, [pc, #52]	; (8003050 <__NVIC_SetPriority+0x4c>)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	0092      	lsls	r2, r2, #2
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	440b      	add	r3, r1
 8003028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800302c:	e00a      	b.n	8003044 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302e:	4909      	ldr	r1, [pc, #36]	; (8003054 <__NVIC_SetPriority+0x50>)
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	3b04      	subs	r3, #4
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	0092      	lsls	r2, r2, #2
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	440b      	add	r3, r1
 8003042:	761a      	strb	r2, [r3, #24]
  }
}
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e100 	.word	0xe000e100
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	; 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f1c3 0307 	rsb	r3, r3, #7
 8003072:	2b06      	cmp	r3, #6
 8003074:	bf28      	it	cs
 8003076:	2306      	movcs	r3, #6
 8003078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3306      	adds	r3, #6
 800307e:	2b06      	cmp	r3, #6
 8003080:	d902      	bls.n	8003088 <NVIC_EncodePriority+0x30>
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3b01      	subs	r3, #1
 8003086:	e000      	b.n	800308a <NVIC_EncodePriority+0x32>
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2201      	movs	r2, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	1e5a      	subs	r2, r3, #1
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	401a      	ands	r2, r3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	1e59      	subs	r1, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80030ac:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3724      	adds	r7, #36	; 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop

080030bc <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	70fb      	strb	r3, [r7, #3]
 80030c8:	4613      	mov	r3, r2
 80030ca:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80030cc:	78f8      	ldrb	r0, [r7, #3]
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	3306      	adds	r3, #6
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80030de:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80030e0:	431a      	orrs	r2, r3
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	1d83      	adds	r3, r0, #6
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop

080030f8 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	f023 030f 	bic.w	r3, r3, #15
 8003128:	f043 0202 	orr.w	r2, r3, #2
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop

0800313c <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8003142:	2300      	movs	r3, #0
 8003144:	71fb      	strb	r3, [r7, #7]
  /*Reset the runtime state variables*/
  UART_0.runtime->tx_busy = false;
 8003146:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <UART_0_init+0x98>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2200      	movs	r2, #0
 800314c:	761a      	strb	r2, [r3, #24]
  UART_0.runtime->rx_busy = false;
 800314e:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <UART_0_init+0x98>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2200      	movs	r2, #0
 8003154:	765a      	strb	r2, [r3, #25]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 4U, &UART_0_rx_pin_config);
 8003156:	4820      	ldr	r0, [pc, #128]	; (80031d8 <UART_0_init+0x9c>)
 8003158:	2104      	movs	r1, #4
 800315a:	4a20      	ldr	r2, [pc, #128]	; (80031dc <UART_0_init+0xa0>)
 800315c:	f7fd ff76 	bl	800104c <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH0, &UART_0_channel_config);
 8003160:	481f      	ldr	r0, [pc, #124]	; (80031e0 <UART_0_init+0xa4>)
 8003162:	4920      	ldr	r1, [pc, #128]	; (80031e4 <UART_0_init+0xa8>)
 8003164:	f7ff fa7c 	bl	8002660 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, XMC_USIC_CH_INPUT_DX0, 0U);
 8003168:	481d      	ldr	r0, [pc, #116]	; (80031e0 <UART_0_init+0xa4>)
 800316a:	2100      	movs	r1, #0
 800316c:	2200      	movs	r2, #0
 800316e:	f7ff ffa5 	bl	80030bc <XMC_USIC_CH_SetInputSource>
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH0);
 8003172:	481b      	ldr	r0, [pc, #108]	; (80031e0 <UART_0_init+0xa4>)
 8003174:	f7ff ffd0 	bl	8003118 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 5U, &UART_0_tx_pin_config);
 8003178:	4817      	ldr	r0, [pc, #92]	; (80031d8 <UART_0_init+0x9c>)
 800317a:	2105      	movs	r1, #5
 800317c:	4a1a      	ldr	r2, [pc, #104]	; (80031e8 <UART_0_init+0xac>)
 800317e:	f7fd ff65 	bl	800104c <XMC_GPIO_Init>

  /*Set service request for transmit interrupt*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
 8003182:	4817      	ldr	r0, [pc, #92]	; (80031e0 <UART_0_init+0xa4>)
 8003184:	2104      	movs	r1, #4
 8003186:	2200      	movs	r2, #0
 8003188:	f7ff fc9c 	bl	8002ac4 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for receive interrupt*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
 800318c:	4814      	ldr	r0, [pc, #80]	; (80031e0 <UART_0_init+0xa4>)
 800318e:	2108      	movs	r1, #8
 8003190:	2201      	movs	r2, #1
 8003192:	f7ff fc97 	bl	8002ac4 <XMC_USIC_CH_SetInterruptNodePointer>
     1U);
  /*Enable UART standard receive event*/
  XMC_USIC_CH_EnableEvent(XMC_UART1_CH0, XMC_USIC_CH_EVENT_STANDARD_RECEIVE);
 8003196:	4812      	ldr	r0, [pc, #72]	; (80031e0 <UART_0_init+0xa4>)
 8003198:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800319c:	f7ff ffac 	bl	80030f8 <XMC_USIC_CH_EnableEvent>
  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 80031a0:	480f      	ldr	r0, [pc, #60]	; (80031e0 <UART_0_init+0xa4>)
 80031a2:	2110      	movs	r1, #16
 80031a4:	2202      	movs	r2, #2
 80031a6:	f7ff fc8d 	bl	8002ac4 <XMC_USIC_CH_SetInterruptNodePointer>
     2U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80031aa:	f7ff ff01 	bl	8002fb0 <__NVIC_GetPriorityGrouping>
 80031ae:	4603      	mov	r3, r0
 80031b0:	4618      	mov	r0, r3
 80031b2:	213f      	movs	r1, #63	; 0x3f
 80031b4:	2200      	movs	r2, #0
 80031b6:	f7ff ff4f 	bl	8003058 <NVIC_EncodePriority>
 80031ba:	4603      	mov	r3, r0
 80031bc:	205a      	movs	r0, #90	; 0x5a
 80031be:	4619      	mov	r1, r3
 80031c0:	f7ff ff20 	bl	8003004 <__NVIC_SetPriority>
                        63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)90);
 80031c4:	205a      	movs	r0, #90	; 0x5a
 80031c6:	f7ff ff01 	bl	8002fcc <__NVIC_EnableIRQ>
  return status;
 80031ca:	79fb      	ldrb	r3, [r7, #7]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	1ffe8800 	.word	0x1ffe8800
 80031d8:	48028000 	.word	0x48028000
 80031dc:	080114dc 	.word	0x080114dc
 80031e0:	48020000 	.word	0x48020000
 80031e4:	0801148c 	.word	0x0801148c
 80031e8:	08011498 	.word	0x08011498

080031ec <USIC1_0_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_0_TX_HANDLER()
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&UART_0);
 80031f0:	4801      	ldr	r0, [pc, #4]	; (80031f8 <USIC1_0_IRQHandler+0xc>)
 80031f2:	f7ff fe57 	bl	8002ea4 <UART_lTransmitHandler>
}
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	1ffe8800 	.word	0x1ffe8800

080031fc <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	2201      	movs	r2, #1
 800320c:	409a      	lsls	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	60da      	str	r2, [r3, #12]
}
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	60da      	str	r2, [r3, #12]
}
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	611a      	str	r2, [r3, #16]
}
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8003258:	887a      	ldrh	r2, [r7, #2]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8003274:	887a      	ldrh	r2, [r7, #2]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	611a      	str	r2, [r3, #16]
}
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop

080032a0 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	2101      	movs	r1, #1
 80032b6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80032de:	f083 0301 	eor.w	r3, r3, #1
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d009      	beq.n	80032fc <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d104      	bne.n	80032fc <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f808 	bl	8003308 <TIMER_CCU4_lInit>
 80032f8:	4603      	mov	r3, r0
 80032fa:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop

08003308 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	4618      	mov	r0, r3
 8003316:	f001 fa57 	bl	80047c8 <GLOBAL_CCU4_Init>
 800331a:	4603      	mov	r3, r0
 800331c:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	7e1b      	ldrb	r3, [r3, #24]
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	f7ff ff66 	bl	80031fc <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	4610      	mov	r0, r2
 800333a:	4619      	mov	r1, r3
 800333c:	f7fe fc6c 	bl	8001c18 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f82d 	bl	80033a0 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00f      	beq.n	8003370 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800335a:	4610      	mov	r0, r2
 800335c:	2100      	movs	r1, #0
 800335e:	461a      	mov	r2, r3
 8003360:	f7fe fc90 	bl	8001c84 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	4618      	mov	r0, r3
 800336a:	2100      	movs	r1, #0
 800336c:	f7ff ff98 	bl	80032a0 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff5d 	bl	8003234 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003388:	2b00      	cmp	r3, #0
 800338a:	d004      	beq.n	8003396 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff43 	bl	800321c <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8003396:	7bfb      	ldrb	r3, [r7, #15]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	f7ff ff4a 	bl	800324c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	4618      	mov	r0, r3
 80033be:	2100      	movs	r1, #0
 80033c0:	f7ff ff52 	bl	8003268 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	f7ff ff57 	bl	8003284 <XMC_CCU4_EnableShadowTransfer>
}
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <__NVIC_GetPriorityGrouping+0x18>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033e8:	0a1b      	lsrs	r3, r3, #8
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	db0a      	blt.n	8003422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340c:	490d      	ldr	r1, [pc, #52]	; (8003444 <__NVIC_SetPriority+0x4c>)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	0092      	lsls	r2, r2, #2
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	440b      	add	r3, r1
 800341c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003420:	e00a      	b.n	8003438 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003422:	4909      	ldr	r1, [pc, #36]	; (8003448 <__NVIC_SetPriority+0x50>)
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	3b04      	subs	r3, #4
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	0092      	lsls	r2, r2, #2
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	440b      	add	r3, r1
 8003436:	761a      	strb	r2, [r3, #24]
  }
}
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	e000e100 	.word	0xe000e100
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f1c3 0307 	rsb	r3, r3, #7
 8003466:	2b06      	cmp	r3, #6
 8003468:	bf28      	it	cs
 800346a:	2306      	movcs	r3, #6
 800346c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3306      	adds	r3, #6
 8003472:	2b06      	cmp	r3, #6
 8003474:	d902      	bls.n	800347c <NVIC_EncodePriority+0x30>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3b01      	subs	r3, #1
 800347a:	e000      	b.n	800347e <NVIC_EncodePriority+0x32>
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2201      	movs	r2, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	1e5a      	subs	r2, r3, #1
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	401a      	ands	r2, r3
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	1e59      	subs	r1, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80034a0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop

080034b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c0:	d301      	bcc.n	80034c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c2:	2301      	movs	r3, #1
 80034c4:	e00f      	b.n	80034e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <SysTick_Config+0x40>)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ce:	f04f 30ff 	mov.w	r0, #4294967295
 80034d2:	213f      	movs	r1, #63	; 0x3f
 80034d4:	f7ff ff90 	bl	80033f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <SysTick_Config+0x40>)
 80034da:	2200      	movs	r2, #0
 80034dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034de:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <SysTick_Config+0x40>)
 80034e0:	2207      	movs	r2, #7
 80034e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	e000e010 	.word	0xe000e010

080034f4 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 80034f4:	b490      	push	{r4, r7}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8003500:	496b      	ldr	r1, [pc, #428]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	3318      	adds	r3, #24
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8003514:	4b67      	ldr	r3, [pc, #412]	; (80036b4 <SYSTIMER_lInsertTimerList+0x1c0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4a62      	ldr	r2, [pc, #392]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003528:	4413      	add	r3, r2
 800352a:	4a62      	ldr	r2, [pc, #392]	; (80036b4 <SYSTIMER_lInsertTimerList+0x1c0>)
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e0bb      	b.n	80036a8 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8003530:	4b60      	ldr	r3, [pc, #384]	; (80036b4 <SYSTIMER_lInsertTimerList+0x1c0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 800353a:	e0ab      	b.n	8003694 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	461a      	mov	r2, r3
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	dc7a      	bgt.n	8003644 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d026      	beq.n	80035a4 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	6859      	ldr	r1, [r3, #4]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4a52      	ldr	r2, [pc, #328]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003566:	4413      	add	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	6859      	ldr	r1, [r3, #4]
 800356e:	4850      	ldr	r0, [pc, #320]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4403      	add	r3, r0
 800357c:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 800357e:	494c      	ldr	r1, [pc, #304]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4a45      	ldr	r2, [pc, #276]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 800359c:	441a      	add	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	e01c      	b.n	80035de <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 80035a4:	4b43      	ldr	r3, [pc, #268]	; (80036b4 <SYSTIMER_lInsertTimerList+0x1c0>)
 80035a6:	6819      	ldr	r1, [r3, #0]
 80035a8:	4841      	ldr	r0, [pc, #260]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4403      	add	r3, r0
 80035b6:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 80035b8:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <SYSTIMER_lInsertTimerList+0x1c0>)
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4a3a      	ldr	r2, [pc, #232]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80035c8:	4413      	add	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4a36      	ldr	r2, [pc, #216]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80035d8:	4413      	add	r3, r2
 80035da:	4a36      	ldr	r2, [pc, #216]	; (80036b4 <SYSTIMER_lInsertTimerList+0x1c0>)
 80035dc:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 80035de:	4934      	ldr	r1, [pc, #208]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	18d1      	adds	r1, r2, r3
 80035f4:	482e      	ldr	r0, [pc, #184]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4403      	add	r3, r0
 8003602:	3318      	adds	r3, #24
 8003604:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8003606:	492a      	ldr	r1, [pc, #168]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	6819      	ldr	r1, [r3, #0]
 8003616:	4826      	ldr	r0, [pc, #152]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4403      	add	r3, r0
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6998      	ldr	r0, [r3, #24]
 8003628:	4c21      	ldr	r4, [pc, #132]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4423      	add	r3, r4
 8003636:	3318      	adds	r3, #24
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	1ac3      	subs	r3, r0, r3
 800363c:	618b      	str	r3, [r1, #24]
        found_flag = true;
 800363e:	2301      	movs	r3, #1
 8003640:	73fb      	strb	r3, [r7, #15]
 8003642:	e024      	b.n	800368e <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	dd21      	ble.n	800368e <SYSTIMER_lInsertTimerList+0x19a>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d11d      	bne.n	800368e <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8003652:	4917      	ldr	r1, [pc, #92]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4a10      	ldr	r2, [pc, #64]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003670:	441a      	add	r2, r3
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8003676:	6939      	ldr	r1, [r7, #16]
 8003678:	480d      	ldr	r0, [pc, #52]	; (80036b0 <SYSTIMER_lInsertTimerList+0x1bc>)
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4403      	add	r3, r0
 8003686:	3318      	adds	r3, #24
 8003688:	6019      	str	r1, [r3, #0]
          found_flag = true;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d006      	beq.n	80036a8 <SYSTIMER_lInsertTimerList+0x1b4>
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	f083 0301 	eor.w	r3, r3, #1
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f47f af4a 	bne.w	800353c <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc90      	pop	{r4, r7}
 80036ae:	4770      	bx	lr
 80036b0:	1ffe8fe0 	.word	0x1ffe8fe0
 80036b4:	1ffe89d0 	.word	0x1ffe89d0

080036b8 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4a29      	ldr	r2, [pc, #164]	; (8003770 <SYSTIMER_lRemoveTimerList+0xb8>)
 80036cc:	4413      	add	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d107      	bne.n	80036e8 <SYSTIMER_lRemoveTimerList+0x30>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d103      	bne.n	80036e8 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 80036e0:	4b24      	ldr	r3, [pc, #144]	; (8003774 <SYSTIMER_lRemoveTimerList+0xbc>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e03d      	b.n	8003764 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d114      	bne.n	800371a <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1f      	ldr	r2, [pc, #124]	; (8003774 <SYSTIMER_lRemoveTimerList+0xbc>)
 80036f6:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 80036f8:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <SYSTIMER_lRemoveTimerList+0xbc>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2200      	movs	r2, #0
 80036fe:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8003700:	4b1c      	ldr	r3, [pc, #112]	; (8003774 <SYSTIMER_lRemoveTimerList+0xbc>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1b      	ldr	r2, [pc, #108]	; (8003774 <SYSTIMER_lRemoveTimerList+0xbc>)
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	6991      	ldr	r1, [r2, #24]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	6992      	ldr	r2, [r2, #24]
 800370e:	440a      	add	r2, r1
 8003710:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e024      	b.n	8003764 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d107      	bne.n	8003732 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	e018      	b.n	8003764 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	6852      	ldr	r2, [r2, #4]
 8003744:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	6991      	ldr	r1, [r2, #24]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	6992      	ldr	r2, [r2, #24]
 8003754:	440a      	add	r2, r1
 8003756:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	605a      	str	r2, [r3, #4]
  }
}
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	1ffe8fe0 	.word	0x1ffe8fe0
 8003774:	1ffe89d0 	.word	0x1ffe89d0

08003778 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 800377e:	4b2f      	ldr	r3, [pc, #188]	; (800383c <SYSTIMER_lTimerHandler+0xc4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8003784:	e050      	b.n	8003828 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d013      	beq.n	80037b8 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ff8f 	bl	80036b8 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	461a      	mov	r2, r3
 80037a6:	2301      	movs	r3, #1
 80037a8:	4093      	lsls	r3, r2
 80037aa:	43da      	mvns	r2, r3
 80037ac:	4b24      	ldr	r3, [pc, #144]	; (8003840 <SYSTIMER_lTimerHandler+0xc8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4013      	ands	r3, r2
 80037b2:	4a23      	ldr	r2, [pc, #140]	; (8003840 <SYSTIMER_lTimerHandler+0xc8>)
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e034      	b.n	8003822 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	7b1b      	ldrb	r3, [r3, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d112      	bne.n	80037e6 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7b5b      	ldrb	r3, [r3, #13]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d12c      	bne.n	8003822 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff73 	bl	80036b8 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6912      	ldr	r2, [r2, #16]
 80037e0:	4610      	mov	r0, r2
 80037e2:	4798      	blx	r3
 80037e4:	e01d      	b.n	8003822 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	7b1b      	ldrb	r3, [r3, #12]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d118      	bne.n	8003820 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7b5b      	ldrb	r3, [r3, #13]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d115      	bne.n	8003822 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff ff5c 	bl	80036b8 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69da      	ldr	r2, [r3, #28]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fe71 	bl	80034f4 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6912      	ldr	r2, [r2, #16]
 800381a:	4610      	mov	r0, r2
 800381c:	4798      	blx	r3
 800381e:	e000      	b.n	8003822 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 8003820:	e009      	b.n	8003836 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <SYSTIMER_lTimerHandler+0xc4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <SYSTIMER_lTimerHandler+0xbe>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0a7      	beq.n	8003786 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	1ffe89d0 	.word	0x1ffe89d0
 8003840:	1ffe89d4 	.word	0x1ffe89d4

08003844 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <SysTick_Handler+0x40>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8003850:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <SysTick_Handler+0x44>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3301      	adds	r3, #1
 8003856:	4a0c      	ldr	r2, [pc, #48]	; (8003888 <SysTick_Handler+0x44>)
 8003858:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00e      	beq.n	800387e <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d905      	bls.n	8003874 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	1e5a      	subs	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	619a      	str	r2, [r3, #24]
 8003872:	e004      	b.n	800387e <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 800387a:	f7ff ff7d 	bl	8003778 <SYSTIMER_lTimerHandler>
    }
  }
}
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	1ffe89d0 	.word	0x1ffe89d0
 8003888:	1ffe89d8 	.word	0x1ffe89d8

0800388c <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8003894:	2300      	movs	r3, #0
 8003896:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	f083 0301 	eor.w	r3, r3, #1
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d020      	beq.n	80038e8 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 80038a6:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <SYSTIMER_Init+0x68>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 80038ac:	4812      	ldr	r0, [pc, #72]	; (80038f8 <SYSTIMER_Init+0x6c>)
 80038ae:	f7ff fdff 	bl	80034b0 <SysTick_Config>
 80038b2:	4603      	mov	r3, r0
 80038b4:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d015      	beq.n	80038e8 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 80038bc:	f7ff fd8e 	bl	80033dc <__NVIC_GetPriorityGrouping>
 80038c0:	4603      	mov	r3, r0
 80038c2:	4618      	mov	r0, r3
 80038c4:	213f      	movs	r1, #63	; 0x3f
 80038c6:	2200      	movs	r2, #0
 80038c8:	f7ff fdc0 	bl	800344c <NVIC_EncodePriority>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f04f 30ff 	mov.w	r0, #4294967295
 80038d2:	4619      	mov	r1, r3
 80038d4:	f7ff fd90 	bl	80033f8 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <SYSTIMER_Init+0x70>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 80038e4:	2300      	movs	r3, #0
 80038e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	1ffe89d0 	.word	0x1ffe89d0
 80038f8:	00023280 	.word	0x00023280
 80038fc:	1ffe89d4 	.word	0x1ffe89d4

08003900 <SYSTIMER_GetTickCount>:

/*
 *  API to get the SysTick count.
 */
uint32_t SYSTIMER_GetTickCount(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return (g_systick_count);
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <SYSTIMER_GetTickCount+0x14>)
 8003906:	681b      	ldr	r3, [r3, #0]
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	1ffe89d8 	.word	0x1ffe89d8

08003918 <XMC_USIC_CH_WriteToTBUFTCI>:
 * XMC_USIC_CH_WriteToTBUF() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
                                             const uint16_t data,
                                             const uint32_t transmit_control_information)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	460b      	mov	r3, r1
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	817b      	strh	r3, [r7, #10]
  channel->TBUF[transmit_control_information] = data;
 8003926:	8979      	ldrh	r1, [r7, #10]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	3220      	adds	r2, #32
 800392e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800394e:	b2db      	uxtb	r3, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>:
 * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
                                                       const uint16_t data,
                                                       const uint32_t frame_length)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	460b      	mov	r3, r1
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	817b      	strh	r3, [r7, #10]
  channel->IN[frame_length] = data;
 8003986:	8979      	ldrh	r1, [r7, #10]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	3260      	adds	r2, #96	; 0x60
 800398e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039aa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	bf14      	ite	ne
 80039ce:	2301      	movne	r3, #1
 80039d0:	2300      	moveq	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <XMC_USIC_CH_RXFIFO_ClearEvent>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
                                                   const uint32_t event)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  channel->TRBSCR = event;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8003a10:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 8003a12:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop

08003a28 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	f023 020f 	bic.w	r2, r3, #15
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop

08003a50 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	f7ff ffe4 	bl	8003a28 <XMC_USIC_CH_SetMode>
}
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop

08003a68 <XMC_SPI_CH_SetTransmitMode>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	019b      	lsls	r3, r3, #6
 8003a80:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop

08003a94 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
								   USIC_CH_BRG_PCTQ_Msk)) |
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	615a      	str	r2, [r3, #20]
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	f7ff ff83 	bl	80039fc <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4798      	blx	r3
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop

08003b1c <SPI_MASTER_SetBaudRate>:

/*
 * Set the baud rate during runtime.
 */
SPI_MASTER_STATUS_t SPI_MASTER_SetBaudRate(SPI_MASTER_t* const handle, const uint32_t baud_rate)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  SPI_MASTER_STATUS_t status;

  if ((false == handle->runtime->tx_busy) && (false == handle->runtime->rx_busy))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f083 0301 	eor.w	r3, r3, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d03f      	beq.n	8003bba <SPI_MASTER_SetBaudRate+0x9e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	7fdb      	ldrb	r3, [r3, #31]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	f083 0301 	eor.w	r3, r3, #1
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d036      	beq.n	8003bba <SPI_MASTER_SetBaudRate+0x9e>
  {
    /* Stops the SPI channel */
    status = (SPI_MASTER_STATUS_t)XMC_SPI_CH_Stop(handle->channel);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe fd4d 	bl	80025f0 <XMC_SPI_CH_Stop>
 8003b56:	4603      	mov	r3, r0
 8003b58:	73fb      	strb	r3, [r7, #15]

    if (SPI_MASTER_STATUS_SUCCESS == status)
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d12b      	bne.n	8003bb8 <SPI_MASTER_SetBaudRate+0x9c>
    {
      /* Set all the pins as input */
      SPI_MASTER_lPortModeReset(handle);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fb6f 	bl	8004244 <SPI_MASTER_lPortModeReset>

      /* Update the new baud rate */
      status = (SPI_MASTER_STATUS_t)XMC_SPI_CH_SetBaudrate(handle->channel, baud_rate);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	6839      	ldr	r1, [r7, #0]
 8003b6e:	f7fe fd07 	bl	8002580 <XMC_SPI_CH_SetBaudrate>
 8003b72:	4603      	mov	r3, r0
 8003b74:	73fb      	strb	r3, [r7, #15]

      if (SPI_MASTER_STATUS_SUCCESS == status)
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d109      	bne.n	8003b90 <SPI_MASTER_SetBaudRate+0x74>
      {
        /* Configure Leading/Trailing delay */
        XMC_SPI_CH_SetSlaveSelectDelay(handle->channel, (uint32_t)handle->config->leading_trailing_delay);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f7ff ff92 	bl	8003ab4 <XMC_SPI_CH_SetSlaveSelectDelay>
      }

      /* Configure the clock polarity and clock delay */
      XMC_SPI_CH_ConfigureShiftClockOutput(handle->channel,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
                                           handle->config->shift_clk_passive_level,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
        /* Configure Leading/Trailing delay */
        XMC_SPI_CH_SetSlaveSelectDelay(handle->channel, (uint32_t)handle->config->leading_trailing_delay);
      }

      /* Configure the clock polarity and clock delay */
      XMC_SPI_CH_ConfigureShiftClockOutput(handle->channel,
 8003b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f7ff ff9d 	bl	8003ae0 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                           handle->config->shift_clk_passive_level,
                                           XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
      /* Start the SPI channel */
      XMC_SPI_CH_Start(handle->channel);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ff50 	bl	8003a50 <XMC_SPI_CH_Start>

      /* Set the mode of the according the generated configuration */
      SPI_MASTER_lPortModeSet(handle);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fa73 	bl	800409c <SPI_MASTER_lPortModeSet>
  if ((false == handle->runtime->tx_busy) && (false == handle->runtime->rx_busy))
  {
    /* Stops the SPI channel */
    status = (SPI_MASTER_STATUS_t)XMC_SPI_CH_Stop(handle->channel);

    if (SPI_MASTER_STATUS_SUCCESS == status)
 8003bb6:	e002      	b.n	8003bbe <SPI_MASTER_SetBaudRate+0xa2>
 8003bb8:	e001      	b.n	8003bbe <SPI_MASTER_SetBaudRate+0xa2>
      SPI_MASTER_lPortModeSet(handle);
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_BUSY;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <SPI_MASTER_Transfer>:
 */
SPI_MASTER_STATUS_t SPI_MASTER_Transfer(const SPI_MASTER_t *const handle,
                                        uint8_t* tx_dataptr,
                                        uint8_t* rx_dataptr,
                                        uint32_t count)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_Transfer:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	613b      	str	r3, [r7, #16]

  if (XMC_SPI_CH_MODE_STANDARD == runtime_handle->spi_master_mode)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	7f1b      	ldrb	r3, [r3, #28]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d142      	bne.n	8003c70 <SPI_MASTER_Transfer+0xa8>
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d03b      	beq.n	8003c68 <SPI_MASTER_Transfer+0xa0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d038      	beq.n	8003c68 <SPI_MASTER_Transfer+0xa0>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d035      	beq.n	8003c68 <SPI_MASTER_Transfer+0xa0>
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	7fdb      	ldrb	r3, [r3, #31]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f083 0301 	eor.w	r3, r3, #1
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d02c      	beq.n	8003c66 <SPI_MASTER_Transfer+0x9e>
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f083 0301 	eor.w	r3, r3, #1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d023      	beq.n	8003c66 <SPI_MASTER_Transfer+0x9e>
      {
        runtime_handle->rx_busy = true;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2201      	movs	r2, #1
 8003c22:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = rx_dataptr;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = tx_dataptr;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = count;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = false;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        {
          status = SPI_MASTER_lReceiveDMA(handle, count);
        }
#endif
#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
        if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DIRECT)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d109      	bne.n	8003c66 <SPI_MASTER_Transfer+0x9e>
        {
          status = SPI_MASTER_lReceivePolling(handle, count);
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	6839      	ldr	r1, [r7, #0]
 8003c56:	f000 f813 	bl	8003c80 <SPI_MASTER_lReceivePolling>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	75fb      	strb	r3, [r7, #23]
          runtime_handle->rx_busy = false;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2200      	movs	r2, #0
 8003c62:	77da      	strb	r2, [r3, #31]
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8003c64:	e003      	b.n	8003c6e <SPI_MASTER_Transfer+0xa6>
 8003c66:	e002      	b.n	8003c6e <SPI_MASTER_Transfer+0xa6>
#endif
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	75fb      	strb	r3, [r7, #23]
 8003c6c:	e002      	b.n	8003c74 <SPI_MASTER_Transfer+0xac>
 8003c6e:	e001      	b.n	8003c74 <SPI_MASTER_Transfer+0xac>
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_FAILURE;
 8003c70:	2301      	movs	r3, #1
 8003c72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop

08003c80 <SPI_MASTER_lReceivePolling>:
}
#endif

#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lReceivePolling(const SPI_MASTER_t *const handle, uint32_t count)
{
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
                                                           Specify the number of bytes for the configured word length */
  uint16_t data;

  runtime_handle = handle->runtime;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	60fb      	str	r3, [r7, #12]
  data = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	827b      	strh	r3, [r7, #18]
  runtime_handle->rx_data_index = 0U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	611a      	str	r2, [r3, #16]
  runtime_handle->tx_data_index = 0U;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	609a      	str	r2, [r3, #8]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d901      	bls.n	8003cb2 <SPI_MASTER_lReceivePolling+0x32>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8003cae:	2302      	movs	r3, #2
 8003cb0:	617b      	str	r3, [r7, #20]
  }

  runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	fa03 f202 	lsl.w	r2, r3, r2
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	60da      	str	r2, [r3, #12]

  XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	7f1b      	ldrb	r3, [r3, #28]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	f7ff feca 	bl	8003a68 <XMC_SPI_CH_SetTransmitMode>

    /* Check if FIFO is enabled */
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80d6 	beq.w	8003e8e <SPI_MASTER_lReceivePolling+0x20e>
  {
    /* Clear the receive FIFO */
    XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fe58 	bl	800399c <XMC_USIC_CH_RXFIFO_Flush>
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 f9c5 	bl	8004080 <SPI_MASTER_lStdRBUFFlush>

    if (runtime_handle->tx_data_dummy == true)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00b      	beq.n	8003d1a <SPI_MASTER_lReceivePolling+0x9a>
    {
      XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	7f1b      	ldrb	r3, [r3, #28]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d12:	461a      	mov	r2, r3
 8003d14:	f7ff fe30 	bl	8003978 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 8003d18:	e01d      	b.n	8003d56 <SPI_MASTER_lReceivePolling+0xd6>
    }
    else
    {
      if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d107      	bne.n	8003d30 <SPI_MASTER_lReceivePolling+0xb0>
      {
        data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	699a      	ldr	r2, [r3, #24]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4413      	add	r3, r2
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	827b      	strh	r3, [r7, #18]
 8003d2e:	e006      	b.n	8003d3e <SPI_MASTER_lReceivePolling+0xbe>
      }
      else
      {
        data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	699a      	ldr	r2, [r3, #24]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4413      	add	r3, r2
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	827b      	strh	r3, [r7, #18]
      }
      XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	7f1b      	ldrb	r3, [r3, #28]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	461c      	mov	r4, r3
 8003d4a:	8a7b      	ldrh	r3, [r7, #18]
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4622      	mov	r2, r4
 8003d52:	f7ff fe11 	bl	8003978 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	441a      	add	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	609a      	str	r2, [r3, #8]


    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8003d62:	e061      	b.n	8003e28 <SPI_MASTER_lReceivePolling+0x1a8>
    {
      if (runtime_handle->tx_data_dummy == true)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00b      	beq.n	8003d88 <SPI_MASTER_lReceivePolling+0x108>
      {
        XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	7f1b      	ldrb	r3, [r3, #28]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d80:	461a      	mov	r2, r3
 8003d82:	f7ff fdf9 	bl	8003978 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 8003d86:	e01d      	b.n	8003dc4 <SPI_MASTER_lReceivePolling+0x144>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d107      	bne.n	8003d9e <SPI_MASTER_lReceivePolling+0x11e>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	4413      	add	r3, r2
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	827b      	strh	r3, [r7, #18]
 8003d9c:	e006      	b.n	8003dac <SPI_MASTER_lReceivePolling+0x12c>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	4413      	add	r3, r2
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	827b      	strh	r3, [r7, #18]
        }
        XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	7f1b      	ldrb	r3, [r3, #28]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	461c      	mov	r4, r3
 8003db8:	8a7b      	ldrh	r3, [r7, #18]
 8003dba:	4610      	mov	r0, r2
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	f7ff fdda 	bl	8003978 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
      }

      while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 8003dc4:	bf00      	nop
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fdf4 	bl	80039b8 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f7      	bne.n	8003dc6 <SPI_MASTER_lReceivePolling+0x146>
      {

      }

      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fe fbee 	bl	80025bc <XMC_SPI_CH_GetReceivedData>
 8003de0:	4603      	mov	r3, r0
 8003de2:	827b      	strh	r3, [r7, #18]

      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	4413      	add	r3, r2
 8003dee:	8a7a      	ldrh	r2, [r7, #18]
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d10a      	bne.n	8003e10 <SPI_MASTER_lReceivePolling+0x190>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	3301      	adds	r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	8a7a      	ldrh	r2, [r7, #18]
 8003e08:	0a12      	lsrs	r2, r2, #8
 8003e0a:	b292      	uxth	r2, r2
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	701a      	strb	r2, [r3, #0]
      }

      (runtime_handle->rx_data_index)+= bytes_per_word;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	441a      	add	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
      (runtime_handle->tx_data_index)+= bytes_per_word;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	441a      	add	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	609a      	str	r2, [r3, #8]
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;


    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d397      	bcc.n	8003d64 <SPI_MASTER_lReceivePolling+0xe4>

      (runtime_handle->rx_data_index)+= bytes_per_word;
      (runtime_handle->tx_data_index)+= bytes_per_word;
    }

    while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 8003e34:	bf00      	nop
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fdbc 	bl	80039b8 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f7      	bne.n	8003e36 <SPI_MASTER_lReceivePolling+0x1b6>
    {

    }

    data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fbb6 	bl	80025bc <XMC_SPI_CH_GetReceivedData>
 8003e50:	4603      	mov	r3, r0
 8003e52:	827b      	strh	r3, [r7, #18]

    runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	8a7a      	ldrh	r2, [r7, #18]
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]

    if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d10a      	bne.n	8003e80 <SPI_MASTER_lReceivePolling+0x200>
    {
      runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	3301      	adds	r3, #1
 8003e74:	4413      	add	r3, r2
 8003e76:	8a7a      	ldrh	r2, [r7, #18]
 8003e78:	0a12      	lsrs	r2, r2, #8
 8003e7a:	b292      	uxth	r2, r2
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	701a      	strb	r2, [r3, #0]
    }

    XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, SPI_MASTER_FIFO_RECEIVE_INDICATION_FLAG);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	2105      	movs	r1, #5
 8003e88:	f7ff fdaa 	bl	80039e0 <XMC_USIC_CH_RXFIFO_ClearEvent>
 8003e8c:	e0e9      	b.n	8004062 <SPI_MASTER_lReceivePolling+0x3e2>
  }
  else
  {
    /* Flush the RBUF0 and RBUF1 */
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f8f4 	bl	8004080 <SPI_MASTER_lStdRBUFFlush>

    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8003e98:	bf00      	nop
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fd4c 	bl	800393c <XMC_USIC_CH_GetTransmitBufferStatus>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d0f7      	beq.n	8003e9a <SPI_MASTER_lReceivePolling+0x21a>
    {
    }

    if (runtime_handle->tx_data_dummy == true)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <SPI_MASTER_lReceivePolling+0x24e>
    {
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	7f1b      	ldrb	r3, [r3, #28]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f7ff fd26 	bl	8003918 <XMC_USIC_CH_WriteToTBUFTCI>
 8003ecc:	e01d      	b.n	8003f0a <SPI_MASTER_lReceivePolling+0x28a>
    }
    else
    {
      if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d107      	bne.n	8003ee4 <SPI_MASTER_lReceivePolling+0x264>
      {
        data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	699a      	ldr	r2, [r3, #24]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4413      	add	r3, r2
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	827b      	strh	r3, [r7, #18]
 8003ee2:	e006      	b.n	8003ef2 <SPI_MASTER_lReceivePolling+0x272>
      }
      else
      {
        data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	699a      	ldr	r2, [r3, #24]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4413      	add	r3, r2
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	827b      	strh	r3, [r7, #18]
      }
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	7f1b      	ldrb	r3, [r3, #28]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	461c      	mov	r4, r3
 8003efe:	8a7b      	ldrh	r3, [r7, #18]
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	4622      	mov	r2, r4
 8003f06:	f7ff fd07 	bl	8003918 <XMC_USIC_CH_WriteToTBUFTCI>
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	441a      	add	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	609a      	str	r2, [r3, #8]

    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8003f16:	e071      	b.n	8003ffc <SPI_MASTER_lReceivePolling+0x37c>
    {
      while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8003f18:	bf00      	nop
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fd0c 	bl	800393c <XMC_USIC_CH_GetTransmitBufferStatus>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b80      	cmp	r3, #128	; 0x80
 8003f28:	d0f7      	beq.n	8003f1a <SPI_MASTER_lReceivePolling+0x29a>
      {

      }

      if (runtime_handle->tx_data_dummy == true)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00b      	beq.n	8003f4e <SPI_MASTER_lReceivePolling+0x2ce>
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	7f1b      	ldrb	r3, [r3, #28]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f46:	461a      	mov	r2, r3
 8003f48:	f7ff fce6 	bl	8003918 <XMC_USIC_CH_WriteToTBUFTCI>
 8003f4c:	e01d      	b.n	8003f8a <SPI_MASTER_lReceivePolling+0x30a>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d107      	bne.n	8003f64 <SPI_MASTER_lReceivePolling+0x2e4>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	827b      	strh	r3, [r7, #18]
 8003f62:	e006      	b.n	8003f72 <SPI_MASTER_lReceivePolling+0x2f2>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	827b      	strh	r3, [r7, #18]
        }
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	7f1b      	ldrb	r3, [r3, #28]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461c      	mov	r4, r3
 8003f7e:	8a7b      	ldrh	r3, [r7, #18]
 8003f80:	4610      	mov	r0, r2
 8003f82:	4619      	mov	r1, r3
 8003f84:	4622      	mov	r2, r4
 8003f86:	f7ff fcc7 	bl	8003918 <XMC_USIC_CH_WriteToTBUFTCI>
      }

      while (XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) == 0U)
 8003f8a:	bf00      	nop
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fce3 	bl	800395c <XMC_USIC_CH_GetReceiveBufferStatus>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f7      	beq.n	8003f8c <SPI_MASTER_lReceivePolling+0x30c>
      {

      }

      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe fb0b 	bl	80025bc <XMC_SPI_CH_GetReceivedData>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	827b      	strh	r3, [r7, #18]

      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	8a7a      	ldrh	r2, [r7, #18]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d10a      	bne.n	8003fd6 <SPI_MASTER_lReceivePolling+0x356>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	4413      	add	r3, r2
 8003fcc:	8a7a      	ldrh	r2, [r7, #18]
 8003fce:	0a12      	lsrs	r2, r2, #8
 8003fd0:	b292      	uxth	r2, r2
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]
      }

      (runtime_handle->rx_data_index)+= bytes_per_word;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	441a      	add	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	611a      	str	r2, [r3, #16]
      (runtime_handle->tx_data_index)+= bytes_per_word;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	441a      	add	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	609a      	str	r2, [r3, #8]

      XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003ff8:	f7ff fd4c 	bl	8003a94 <XMC_SPI_CH_ClearStatusFlag>
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;

    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	429a      	cmp	r2, r3
 8004006:	d387      	bcc.n	8003f18 <SPI_MASTER_lReceivePolling+0x298>
      (runtime_handle->tx_data_index)+= bytes_per_word;

      XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
    }

    while (XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) == 0U)
 8004008:	bf00      	nop
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fca4 	bl	800395c <XMC_USIC_CH_GetReceiveBufferStatus>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f7      	beq.n	800400a <SPI_MASTER_lReceivePolling+0x38a>
    {

    }

    data = XMC_SPI_CH_GetReceivedData(handle->channel);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe facc 	bl	80025bc <XMC_SPI_CH_GetReceivedData>
 8004024:	4603      	mov	r3, r0
 8004026:	827b      	strh	r3, [r7, #18]

    runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	4413      	add	r3, r2
 8004032:	8a7a      	ldrh	r2, [r7, #18]
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]

    if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d10a      	bne.n	8004054 <SPI_MASTER_lReceivePolling+0x3d4>
    {
      runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	3301      	adds	r3, #1
 8004048:	4413      	add	r3, r2
 800404a:	8a7a      	ldrh	r2, [r7, #18]
 800404c:	0a12      	lsrs	r2, r2, #8
 800404e:	b292      	uxth	r2, r2
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]
    }

    XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800405e:	f7ff fd19 	bl	8003a94 <XMC_SPI_CH_ClearStatusFlag>
  }
  runtime_handle->rx_data_count = 0U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	60da      	str	r2, [r3, #12]
  runtime_handle->rx_data_index = 0U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	611a      	str	r2, [r3, #16]
  runtime_handle->tx_data_index = 0U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	609a      	str	r2, [r3, #8]

  return SPI_MASTER_STATUS_SUCCESS;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	bd90      	pop	{r4, r7, pc}
 800407e:	bf00      	nop

08004080 <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7fe fa97 	bl	80025bc <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fe fa94 	bl	80025bc <XMC_SPI_CH_GetReceivedData>
}
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop

0800409c <SPI_MASTER_lPortModeSet>:

/*
 * This is used to reassign the mode for ports after updating the baud rate
 */
static void SPI_MASTER_lPortModeSet(const SPI_MASTER_t* handle)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t ss_line;

  /* Configure the ports with actual mode */
  for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	e01a      	b.n	80040e0 <SPI_MASTER_lPortModeSet+0x44>
  {
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	320c      	adds	r2, #12
 80040b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b6:	6818      	ldr	r0, [r3, #0]
                     handle->config->slave_select_pin[ss_line]->pin,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	320c      	adds	r2, #12
 80040c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  uint32_t ss_line;

  /* Configure the ports with actual mode */
  for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
  {
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
 80040c4:	7919      	ldrb	r1, [r3, #4]
                     handle->config->slave_select_pin[ss_line]->pin,
                     handle->config->slave_select_pin_config[ss_line]->port_config.mode);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	3214      	adds	r2, #20
 80040ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  uint32_t ss_line;

  /* Configure the ports with actual mode */
  for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
  {
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	f7fe f98d 	bl	80023f4 <XMC_GPIO_SetMode>
static void SPI_MASTER_lPortModeSet(const SPI_MASTER_t* handle)
{
  uint32_t ss_line;

  /* Configure the ports with actual mode */
  for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3301      	adds	r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80040e8:	461a      	mov	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d8dc      	bhi.n	80040aa <SPI_MASTER_lPortModeSet+0xe>
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
                     handle->config->slave_select_pin[ss_line]->pin,
                     handle->config->slave_select_pin_config[ss_line]->port_config.mode);
  }

  XMC_GPIO_SetMode(handle->config->sclk_out_pin->port,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	6819      	ldr	r1, [r3, #0]
                   handle->config->sclk_out_pin->pin,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
                     handle->config->slave_select_pin[ss_line]->pin,
                     handle->config->slave_select_pin_config[ss_line]->port_config.mode);
  }

  XMC_GPIO_SetMode(handle->config->sclk_out_pin->port,
 80040fe:	791a      	ldrb	r2, [r3, #4]
                   handle->config->sclk_out_pin->pin,
                   handle->config->sclk_out_pin_config->port_config.mode);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
                     handle->config->slave_select_pin[ss_line]->pin,
                     handle->config->slave_select_pin_config[ss_line]->port_config.mode);
  }

  XMC_GPIO_SetMode(handle->config->sclk_out_pin->port,
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	4608      	mov	r0, r1
 800410a:	4611      	mov	r1, r2
 800410c:	461a      	mov	r2, r3
 800410e:	f7fe f971 	bl	80023f4 <XMC_GPIO_SetMode>
                   handle->config->sclk_out_pin->pin,
                   handle->config->sclk_out_pin_config->port_config.mode);

  switch (handle->runtime->spi_master_mode)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	7f1b      	ldrb	r3, [r3, #28]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b07      	cmp	r3, #7
 800411c:	f200 808e 	bhi.w	800423c <SPI_MASTER_lPortModeSet+0x1a0>
 8004120:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <SPI_MASTER_lPortModeSet+0x8c>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	08004149 	.word	0x08004149
 800412c:	0800423d 	.word	0x0800423d
 8004130:	0800423d 	.word	0x0800423d
 8004134:	0800423d 	.word	0x0800423d
 8004138:	0800423d 	.word	0x0800423d
 800413c:	08004149 	.word	0x08004149
 8004140:	0800416d 	.word	0x0800416d
 8004144:	080041b3 	.word	0x080041b3
  {
    case XMC_SPI_CH_MODE_STANDARD:
    case XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_0_pin->pin,
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	689b      	ldr	r3, [r3, #8]

  switch (handle->runtime->spi_master_mode)
  {
    case XMC_SPI_CH_MODE_STANDARD:
    case XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 8004156:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	68db      	ldr	r3, [r3, #12]

  switch (handle->runtime->spi_master_mode)
  {
    case XMC_SPI_CH_MODE_STANDARD:
    case XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	4608      	mov	r0, r1
 8004162:	4611      	mov	r1, r2
 8004164:	461a      	mov	r2, r3
 8004166:	f7fe f945 	bl	80023f4 <XMC_GPIO_SetMode>
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      break;
 800416a:	e068      	b.n	800423e <SPI_MASTER_lPortModeSet+0x1a2>

    case XMC_SPI_CH_MODE_DUAL:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_0_pin->pin,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      break;

    case XMC_SPI_CH_MODE_DUAL:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 800417a:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      break;

    case XMC_SPI_CH_MODE_DUAL:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	4608      	mov	r0, r1
 8004186:	4611      	mov	r1, r2
 8004188:	461a      	mov	r2, r3
 800418a:	f7fe f933 	bl	80023f4 <XMC_GPIO_SetMode>
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_1_pin->pin,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	691b      	ldr	r3, [r3, #16]

    case XMC_SPI_CH_MODE_DUAL:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 800419c:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]

    case XMC_SPI_CH_MODE_DUAL:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	4608      	mov	r0, r1
 80041a8:	4611      	mov	r1, r2
 80041aa:	461a      	mov	r2, r3
 80041ac:	f7fe f922 	bl	80023f4 <XMC_GPIO_SetMode>
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      break;
 80041b0:	e045      	b.n	800423e <SPI_MASTER_lPortModeSet+0x1a2>

    case XMC_SPI_CH_MODE_QUAD:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_0_pin->pin,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      break;

    case XMC_SPI_CH_MODE_QUAD:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 80041c0:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      break;

    case XMC_SPI_CH_MODE_QUAD:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	4608      	mov	r0, r1
 80041cc:	4611      	mov	r1, r2
 80041ce:	461a      	mov	r2, r3
 80041d0:	f7fe f910 	bl	80023f4 <XMC_GPIO_SetMode>
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_1_pin->pin,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]

    case XMC_SPI_CH_MODE_QUAD:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 80041e2:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]

    case XMC_SPI_CH_MODE_QUAD:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	461a      	mov	r2, r3
 80041f2:	f7fe f8ff 	bl	80023f4 <XMC_GPIO_SetMode>
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_2_pin->port,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_2_pin->pin,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_2_pin->port,
 8004204:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_2_pin->pin,
                       handle->config->mosi_2_pin_config->port_config.mode);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_2_pin->port,
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	4608      	mov	r0, r1
 8004210:	4611      	mov	r1, r2
 8004212:	461a      	mov	r2, r3
 8004214:	f7fe f8ee 	bl	80023f4 <XMC_GPIO_SetMode>
                       handle->config->mosi_2_pin->pin,
                       handle->config->mosi_2_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_3_pin->port,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_3_pin->pin,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_2_pin->port,
                       handle->config->mosi_2_pin->pin,
                       handle->config->mosi_2_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_3_pin->port,
 8004226:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_3_pin->pin,
                       handle->config->mosi_3_pin_config->port_config.mode);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_2_pin->port,
                       handle->config->mosi_2_pin->pin,
                       handle->config->mosi_2_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_3_pin->port,
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	4608      	mov	r0, r1
 8004232:	4611      	mov	r1, r2
 8004234:	461a      	mov	r2, r3
 8004236:	f7fe f8dd 	bl	80023f4 <XMC_GPIO_SetMode>
                       handle->config->mosi_3_pin->pin,
                       handle->config->mosi_3_pin_config->port_config.mode);
      break;
 800423a:	e000      	b.n	800423e <SPI_MASTER_lPortModeSet+0x1a2>

    default:
      break;
 800423c:	bf00      	nop
  }
}
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <SPI_MASTER_lPortModeReset>:

/*
 * This is used to make the ports as input during update of the baud rate, to avoid the noise in output ports
 */
static void SPI_MASTER_lPortModeReset(const SPI_MASTER_t* handle)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t ss_line;

  /* Configure the ports as input */
  for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e015      	b.n	800427e <SPI_MASTER_lPortModeReset+0x3a>
  {
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	320c      	adds	r2, #12
 800425a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800425e:	6819      	ldr	r1, [r3, #0]
                     handle->config->slave_select_pin[ss_line]->pin,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	320c      	adds	r2, #12
 8004268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  uint32_t ss_line;

  /* Configure the ports as input */
  for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
  {
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
 800426c:	791b      	ldrb	r3, [r3, #4]
 800426e:	4608      	mov	r0, r1
 8004270:	4619      	mov	r1, r3
 8004272:	2200      	movs	r2, #0
 8004274:	f7fe f8be 	bl	80023f4 <XMC_GPIO_SetMode>
static void SPI_MASTER_lPortModeReset(const SPI_MASTER_t* handle)
{
  uint32_t ss_line;

  /* Configure the ports as input */
  for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3301      	adds	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8004286:	461a      	mov	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	429a      	cmp	r2, r3
 800428c:	d8e1      	bhi.n	8004252 <SPI_MASTER_lPortModeReset+0xe>
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
                     handle->config->slave_select_pin[ss_line]->pin,
                     XMC_GPIO_MODE_INPUT_TRISTATE);
  }

  XMC_GPIO_SetMode(handle->config->sclk_out_pin->port, handle->config->sclk_out_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	791b      	ldrb	r3, [r3, #4]
 800429e:	4610      	mov	r0, r2
 80042a0:	4619      	mov	r1, r3
 80042a2:	2200      	movs	r2, #0
 80042a4:	f7fe f8a6 	bl	80023f4 <XMC_GPIO_SetMode>

  switch (handle->runtime->spi_master_mode)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	7f1b      	ldrb	r3, [r3, #28]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b07      	cmp	r3, #7
 80042b2:	d871      	bhi.n	8004398 <SPI_MASTER_lPortModeReset+0x154>
 80042b4:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <SPI_MASTER_lPortModeReset+0x78>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042dd 	.word	0x080042dd
 80042c0:	08004399 	.word	0x08004399
 80042c4:	08004399 	.word	0x08004399
 80042c8:	08004399 	.word	0x08004399
 80042cc:	08004399 	.word	0x08004399
 80042d0:	080042dd 	.word	0x080042dd
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	0800432f 	.word	0x0800432f
  {
    case XMC_SPI_CH_MODE_STANDARD:
    case XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port, handle->config->mosi_0_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	791b      	ldrb	r3, [r3, #4]
 80042ec:	4610      	mov	r0, r2
 80042ee:	4619      	mov	r1, r3
 80042f0:	2200      	movs	r2, #0
 80042f2:	f7fe f87f 	bl	80023f4 <XMC_GPIO_SetMode>
      break;
 80042f6:	e050      	b.n	800439a <SPI_MASTER_lPortModeReset+0x156>

    case XMC_SPI_CH_MODE_DUAL:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port, handle->config->mosi_0_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	791b      	ldrb	r3, [r3, #4]
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	2200      	movs	r2, #0
 800430e:	f7fe f871 	bl	80023f4 <XMC_GPIO_SetMode>
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port, handle->config->mosi_1_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	791b      	ldrb	r3, [r3, #4]
 8004322:	4610      	mov	r0, r2
 8004324:	4619      	mov	r1, r3
 8004326:	2200      	movs	r2, #0
 8004328:	f7fe f864 	bl	80023f4 <XMC_GPIO_SetMode>
      break;
 800432c:	e035      	b.n	800439a <SPI_MASTER_lPortModeReset+0x156>

    case XMC_SPI_CH_MODE_QUAD:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port, handle->config->mosi_0_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	791b      	ldrb	r3, [r3, #4]
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	2200      	movs	r2, #0
 8004344:	f7fe f856 	bl	80023f4 <XMC_GPIO_SetMode>
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port, handle->config->mosi_1_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	791b      	ldrb	r3, [r3, #4]
 8004358:	4610      	mov	r0, r2
 800435a:	4619      	mov	r1, r3
 800435c:	2200      	movs	r2, #0
 800435e:	f7fe f849 	bl	80023f4 <XMC_GPIO_SetMode>
      XMC_GPIO_SetMode(handle->config->mosi_2_pin->port, handle->config->mosi_2_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	791b      	ldrb	r3, [r3, #4]
 8004372:	4610      	mov	r0, r2
 8004374:	4619      	mov	r1, r3
 8004376:	2200      	movs	r2, #0
 8004378:	f7fe f83c 	bl	80023f4 <XMC_GPIO_SetMode>
      XMC_GPIO_SetMode(handle->config->mosi_3_pin->port, handle->config->mosi_3_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	791b      	ldrb	r3, [r3, #4]
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	2200      	movs	r2, #0
 8004392:	f7fe f82f 	bl	80023f4 <XMC_GPIO_SetMode>
      break;
 8004396:	e000      	b.n	800439a <SPI_MASTER_lPortModeReset+0x156>

    default:
      break;
 8004398:	bf00      	nop
  }
}
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	70fb      	strb	r3, [r7, #3]
 80043ac:	4613      	mov	r3, r2
 80043ae:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80043b0:	78f8      	ldrb	r0, [r7, #3]
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	3306      	adds	r3, #6
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80043c2:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80043c4:	431a      	orrs	r2, r3
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	1d83      	adds	r3, r0, #6
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop

080043dc <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ec:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop

08004408 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004418:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	3b01      	subs	r3, #1
 8004420:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop

08004434 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8004448:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 800444a:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop

08004460 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f023 020f 	bic.w	r2, r3, #15
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop

08004488 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	2101      	movs	r1, #1
 8004494:	f7ff ffe4 	bl	8004460 <XMC_USIC_CH_SetMode>
}
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop

080044a0 <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	f043 0201 	orr.w	r2, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop

080044c0 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
								   USIC_CH_BRG_PCTQ_Msk)) |
 80044d8:	4313      	orrs	r3, r2
 80044da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	615a      	str	r2, [r3, #20]
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	f7ff ff99 	bl	8004434 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4619      	mov	r1, r3
 800451a:	f7ff ff5f 	bl	80043dc <XMC_USIC_CH_SetWordLength>
}
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	4619      	mov	r1, r3
 8004536:	f7ff ff67 	bl	8004408 <XMC_USIC_CH_SetFrameLength>
}
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	70fb      	strb	r3, [r7, #3]
 800454c:	4613      	mov	r3, r2
 800454e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8004550:	78f8      	ldrb	r0, [r7, #3]
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	3306      	adds	r3, #6
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8004562:	f043 0210 	orr.w	r2, r3, #16
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	1d83      	adds	r3, r0, #6
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	78bb      	ldrb	r3, [r7, #2]
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	4611      	mov	r1, r2
 8004578:	461a      	mov	r2, r3
 800457a:	f7ff ff11 	bl	80043a0 <XMC_USIC_CH_SetInputSource>
}
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 800458a:	2300      	movs	r3, #0
 800458c:	71fb      	strb	r3, [r7, #7]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI2_CH0, &SPI_MASTER_0_Channel_Config);
 800458e:	4823      	ldr	r0, [pc, #140]	; (800461c <SPI_MASTER_0_lInit+0x98>)
 8004590:	4923      	ldr	r1, [pc, #140]	; (8004620 <SPI_MASTER_0_lInit+0x9c>)
 8004592:	f7fd ffb5 	bl	8002500 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI2_CH0);
 8004596:	4821      	ldr	r0, [pc, #132]	; (800461c <SPI_MASTER_0_lInit+0x98>)
 8004598:	f7ff ff82 	bl	80044a0 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI2_CH0, (uint8_t)16);
 800459c:	481f      	ldr	r0, [pc, #124]	; (800461c <SPI_MASTER_0_lInit+0x98>)
 800459e:	2110      	movs	r1, #16
 80045a0:	f7ff ffb2 	bl	8004508 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI2_CH0, (uint8_t)16);
 80045a4:	481d      	ldr	r0, [pc, #116]	; (800461c <SPI_MASTER_0_lInit+0x98>)
 80045a6:	2110      	movs	r1, #16
 80045a8:	f7ff ffbc 	bl	8004524 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI2_CH0,
 80045ac:	481b      	ldr	r0, [pc, #108]	; (800461c <SPI_MASTER_0_lInit+0x98>)
 80045ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80045b2:	2200      	movs	r2, #0
 80045b4:	f7ff ff9a 	bl	80044ec <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI2_CH0, 1U);
 80045b8:	4818      	ldr	r0, [pc, #96]	; (800461c <SPI_MASTER_0_lInit+0x98>)
 80045ba:	2101      	movs	r1, #1
 80045bc:	f7ff ff80 	bl	80044c0 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT6_BASE, (uint8_t)5, &SPI_MASTER_0_MISO_Config.port_config);
 80045c0:	4818      	ldr	r0, [pc, #96]	; (8004624 <SPI_MASTER_0_lInit+0xa0>)
 80045c2:	2105      	movs	r1, #5
 80045c4:	4a18      	ldr	r2, [pc, #96]	; (8004628 <SPI_MASTER_0_lInit+0xa4>)
 80045c6:	f7fc fd41 	bl	800104c <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI2_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_D);
 80045ca:	4814      	ldr	r0, [pc, #80]	; (800461c <SPI_MASTER_0_lInit+0x98>)
 80045cc:	2100      	movs	r1, #0
 80045ce:	2203      	movs	r2, #3
 80045d0:	f7ff ffb6 	bl	8004540 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI2_CH0);
 80045d4:	4811      	ldr	r0, [pc, #68]	; (800461c <SPI_MASTER_0_lInit+0x98>)
 80045d6:	f7ff ff57 	bl	8004488 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)0, &SPI_MASTER_0_MOSI_Config.port_config);
 80045da:	4814      	ldr	r0, [pc, #80]	; (800462c <SPI_MASTER_0_lInit+0xa8>)
 80045dc:	2100      	movs	r1, #0
 80045de:	4a14      	ldr	r2, [pc, #80]	; (8004630 <SPI_MASTER_0_lInit+0xac>)
 80045e0:	f7fc fd34 	bl	800104c <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)2, &SPI_MASTER_0_SCLKOUT_Config.port_config);
 80045e4:	4811      	ldr	r0, [pc, #68]	; (800462c <SPI_MASTER_0_lInit+0xa8>)
 80045e6:	2102      	movs	r1, #2
 80045e8:	4a12      	ldr	r2, [pc, #72]	; (8004634 <SPI_MASTER_0_lInit+0xb0>)
 80045ea:	f7fc fd2f 	bl	800104c <XMC_GPIO_Init>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 80045ee:	480b      	ldr	r0, [pc, #44]	; (800461c <SPI_MASTER_0_lInit+0x98>)
 80045f0:	2110      	movs	r1, #16
 80045f2:	2200      	movs	r2, #0
 80045f4:	f7fe fa66 	bl	8002ac4 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
            
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI2_CH0,
 80045f8:	4808      	ldr	r0, [pc, #32]	; (800461c <SPI_MASTER_0_lInit+0x98>)
 80045fa:	2110      	movs	r1, #16
 80045fc:	2204      	movs	r2, #4
 80045fe:	2301      	movs	r3, #1
 8004600:	f7fe fa0e 	bl	8002a20 <XMC_USIC_CH_TXFIFO_Configure>
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI2_CH0,
 8004604:	4805      	ldr	r0, [pc, #20]	; (800461c <SPI_MASTER_0_lInit+0x98>)
 8004606:	2100      	movs	r1, #0
 8004608:	2204      	movs	r2, #4
 800460a:	230f      	movs	r3, #15
 800460c:	f7fe fa30 	bl	8002a70 <XMC_USIC_CH_RXFIFO_Configure>
                               0U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               15U);
             
  return status;
 8004610:	79fb      	ldrb	r3, [r7, #7]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	48024000 	.word	0x48024000
 8004620:	1ffe8850 	.word	0x1ffe8850
 8004624:	48028600 	.word	0x48028600
 8004628:	1ffe89e0 	.word	0x1ffe89e0
 800462c:	48028500 	.word	0x48028500
 8004630:	1ffe883c 	.word	0x1ffe883c
 8004634:	08011500 	.word	0x08011500

08004638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <__NVIC_GetPriorityGrouping+0x18>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004644:	0a1b      	lsrs	r3, r3, #8
}
 8004646:	4618      	mov	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800465e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004662:	2b00      	cmp	r3, #0
 8004664:	db0b      	blt.n	800467e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004666:	4908      	ldr	r1, [pc, #32]	; (8004688 <__NVIC_EnableIRQ+0x34>)
 8004668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	79fa      	ldrb	r2, [r7, #7]
 8004670:	f002 021f 	and.w	r2, r2, #31
 8004674:	2001      	movs	r0, #1
 8004676:	fa00 f202 	lsl.w	r2, r0, r2
 800467a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	e000e100 	.word	0xe000e100

0800468c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	6039      	str	r1, [r7, #0]
 8004696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469c:	2b00      	cmp	r3, #0
 800469e:	db0a      	blt.n	80046b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a0:	490d      	ldr	r1, [pc, #52]	; (80046d8 <__NVIC_SetPriority+0x4c>)
 80046a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	0092      	lsls	r2, r2, #2
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	440b      	add	r3, r1
 80046b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80046b4:	e00a      	b.n	80046cc <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b6:	4909      	ldr	r1, [pc, #36]	; (80046dc <__NVIC_SetPriority+0x50>)
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	3b04      	subs	r3, #4
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	0092      	lsls	r2, r2, #2
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	440b      	add	r3, r1
 80046ca:	761a      	strb	r2, [r3, #24]
  }
}
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	e000e100 	.word	0xe000e100
 80046dc:	e000ed00 	.word	0xe000ed00

080046e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b089      	sub	sp, #36	; 0x24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f1c3 0307 	rsb	r3, r3, #7
 80046fa:	2b06      	cmp	r3, #6
 80046fc:	bf28      	it	cs
 80046fe:	2306      	movcs	r3, #6
 8004700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	3306      	adds	r3, #6
 8004706:	2b06      	cmp	r3, #6
 8004708:	d902      	bls.n	8004710 <NVIC_EncodePriority+0x30>
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3b01      	subs	r3, #1
 800470e:	e000      	b.n	8004712 <NVIC_EncodePriority+0x32>
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2201      	movs	r2, #1
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	1e5a      	subs	r2, r3, #1
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	401a      	ands	r2, r3
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2101      	movs	r1, #1
 800472a:	fa01 f303 	lsl.w	r3, r1, r3
 800472e:	1e59      	subs	r1, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8004734:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8004736:	4618      	mov	r0, r3
 8004738:	3724      	adds	r7, #36	; 0x24
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop

08004744 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	b25b      	sxtb	r3, r3
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff ff7e 	bl	8004654 <__NVIC_EnableIRQ>
}
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop

08004760 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8004760:	b590      	push	{r4, r7, lr}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	781c      	ldrb	r4, [r3, #0]
 800476c:	f7ff ff64 	bl	8004638 <__NVIC_GetPriorityGrouping>
 8004770:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8004776:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800477c:	4608      	mov	r0, r1
 800477e:	4611      	mov	r1, r2
 8004780:	461a      	mov	r2, r3
 8004782:	f7ff ffad 	bl	80046e0 <NVIC_EncodePriority>
 8004786:	4602      	mov	r2, r0
 8004788:	b263      	sxtb	r3, r4
 800478a:	4618      	mov	r0, r3
 800478c:	4611      	mov	r1, r2
 800478e:	f7ff ff7d 	bl	800468c <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	78db      	ldrb	r3, [r3, #3]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff ffd2 	bl	8004744 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd90      	pop	{r4, r7, pc}
 80047aa:	bf00      	nop

080047ac <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ba:	60da      	str	r2, [r3, #12]
}
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop

080047c8 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	7b5b      	ldrb	r3, [r3, #13]
 80047d4:	f083 0301 	eor.w	r3, r3, #1
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00f      	beq.n	80047fe <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	7b1b      	ldrb	r3, [r3, #12]
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	f7fd f9f7 	bl	8001bdc <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff ffda 	bl	80047ac <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <__NVIC_GetPriorityGrouping+0x18>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004814:	0a1b      	lsrs	r3, r3, #8
}
 8004816:	4618      	mov	r0, r3
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	e000ed00 	.word	0xe000ed00

08004824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	2b00      	cmp	r3, #0
 8004834:	db0b      	blt.n	800484e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004836:	4908      	ldr	r1, [pc, #32]	; (8004858 <__NVIC_EnableIRQ+0x34>)
 8004838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	79fa      	ldrb	r2, [r7, #7]
 8004840:	f002 021f 	and.w	r2, r2, #31
 8004844:	2001      	movs	r0, #1
 8004846:	fa00 f202 	lsl.w	r2, r0, r2
 800484a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	e000e100 	.word	0xe000e100

0800485c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486a:	2b00      	cmp	r3, #0
 800486c:	db10      	blt.n	8004890 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800486e:	490b      	ldr	r1, [pc, #44]	; (800489c <__NVIC_DisableIRQ+0x40>)
 8004870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	79fa      	ldrb	r2, [r7, #7]
 8004878:	f002 021f 	and.w	r2, r2, #31
 800487c:	2001      	movs	r0, #1
 800487e:	fa00 f202 	lsl.w	r2, r0, r2
 8004882:	3320      	adds	r3, #32
 8004884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004888:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800488c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	e000e100 	.word	0xe000e100

080048a0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	db0c      	blt.n	80048cc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048b2:	4909      	ldr	r1, [pc, #36]	; (80048d8 <__NVIC_ClearPendingIRQ+0x38>)
 80048b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	79fa      	ldrb	r2, [r7, #7]
 80048bc:	f002 021f 	and.w	r2, r2, #31
 80048c0:	2001      	movs	r0, #1
 80048c2:	fa00 f202 	lsl.w	r2, r0, r2
 80048c6:	3360      	adds	r3, #96	; 0x60
 80048c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	e000e100 	.word	0xe000e100

080048dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	6039      	str	r1, [r7, #0]
 80048e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	db0a      	blt.n	8004906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f0:	490d      	ldr	r1, [pc, #52]	; (8004928 <__NVIC_SetPriority+0x4c>)
 80048f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	0092      	lsls	r2, r2, #2
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	440b      	add	r3, r1
 8004900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004904:	e00a      	b.n	800491c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004906:	4909      	ldr	r1, [pc, #36]	; (800492c <__NVIC_SetPriority+0x50>)
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	3b04      	subs	r3, #4
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	0092      	lsls	r2, r2, #2
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	440b      	add	r3, r1
 800491a:	761a      	strb	r2, [r3, #24]
  }
}
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	e000e100 	.word	0xe000e100
 800492c:	e000ed00 	.word	0xe000ed00

08004930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	; 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f1c3 0307 	rsb	r3, r3, #7
 800494a:	2b06      	cmp	r3, #6
 800494c:	bf28      	it	cs
 800494e:	2306      	movcs	r3, #6
 8004950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	3306      	adds	r3, #6
 8004956:	2b06      	cmp	r3, #6
 8004958:	d902      	bls.n	8004960 <NVIC_EncodePriority+0x30>
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3b01      	subs	r3, #1
 800495e:	e000      	b.n	8004962 <NVIC_EncodePriority+0x32>
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2201      	movs	r2, #1
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	1e5a      	subs	r2, r3, #1
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	401a      	ands	r2, r3
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2101      	movs	r1, #1
 800497a:	fa01 f303 	lsl.w	r3, r1, r3
 800497e:	1e59      	subs	r1, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8004984:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8004986:	4618      	mov	r0, r3
 8004988:	3724      	adds	r7, #36	; 0x24
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop

08004994 <XMC_ETH_MAC_SetPortControl>:
 * - XMC4700 LQFP144 and BGA196 packages
 * - XMC4800 LQFP144 and BGA196 packages
 *
 */
__STATIC_INLINE void XMC_ETH_MAC_SetPortControl(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_PORT_CTRL_t port_ctrl)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  XMC_UNUSED_ARG(eth_mac);
  ETH0_CON->CON = (uint32_t)port_ctrl.raw;
 800499e:	4a04      	ldr	r2, [pc, #16]	; (80049b0 <XMC_ETH_MAC_SetPortControl+0x1c>)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	6013      	str	r3, [r2, #0]
}
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	50004040 	.word	0x50004040

080049b4 <XMC_ETH_MAC_SetAddress>:
 * \par
 * The function sets the MAC address by writing to the MAC_ADDRESS0_HIGH and
 * MAC_ADDRESS0_LOW registers.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetAddress(XMC_ETH_MAC_t *const eth_mac, uint64_t addr)
{
 80049b4:	b4b0      	push	{r4, r5, r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	e9c7 2300 	strd	r2, r3, [r7]
  eth_mac->regs->MAC_ADDRESS0_HIGH = (uint32_t)(addr >> 32);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c8:	001c      	movs	r4, r3
 80049ca:	2500      	movs	r5, #0
 80049cc:	4623      	mov	r3, r4
 80049ce:	640b      	str	r3, [r1, #64]	; 0x40
  eth_mac->regs->MAC_ADDRESS0_LOW = (uint32_t)addr;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	645a      	str	r2, [r3, #68]	; 0x44
}
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	bcb0      	pop	{r4, r5, r7}
 80049de:	4770      	bx	lr

080049e0 <XMC_ETH_MAC_EnableReceptionBroadcastFrames>:
 *
 * \par
 * This function enables the AFM module to pass all received broadcast frames.
 */
__STATIC_INLINE void XMC_ETH_MAC_EnableReceptionBroadcastFrames(XMC_ETH_MAC_t *const eth_mac)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_FRAME_FILTER &= (uint32_t)~ETH_MAC_FRAME_FILTER_DBF_Msk;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	6852      	ldr	r2, [r2, #4]
 80049f2:	f022 0220 	bic.w	r2, r2, #32
 80049f6:	605a      	str	r2, [r3, #4]
}
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop

08004a04 <XMC_ETH_MAC_DisableJumboFrame>:
 *
 * \par
 * The function can be used to disable jumbo frames.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableJumboFrame(XMC_ETH_MAC_t *const eth_mac)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_JE_Msk;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004a1a:	601a      	str	r2, [r3, #0]
}
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop

08004a28 <XMC_ETH_MAC_SetLink>:
 * The function sets the link speed and duplex settings.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
                                         XMC_ETH_LINK_SPEED_t speed,
                                         XMC_ETH_LINK_DUPLEX_t duplex)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
 8004a34:	4613      	mov	r3, r2
 8004a36:	803b      	strh	r3, [r7, #0]
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	f422 4190 	bic.w	r1, r2, #18432	; 0x4800
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
                                     (uint32_t)speed | (uint32_t)duplex;
 8004a46:	887a      	ldrh	r2, [r7, #2]
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
                                         XMC_ETH_LINK_SPEED_t speed,
                                         XMC_ETH_LINK_DUPLEX_t duplex)
{
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
 8004a48:	4311      	orrs	r1, r2
                                     (uint32_t)speed | (uint32_t)duplex;
 8004a4a:	883a      	ldrh	r2, [r7, #0]
 8004a4c:	430a      	orrs	r2, r1
 */
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
                                         XMC_ETH_LINK_SPEED_t speed,
                                         XMC_ETH_LINK_DUPLEX_t duplex)
{
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
 8004a4e:	601a      	str	r2, [r3, #0]
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
                                     (uint32_t)speed | (uint32_t)duplex;
}
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop

08004a5c <XMC_ETH_MAC_IsRxDescriptorOwnedByDma>:
 *
 * \par
 * The function checks if the RX descriptor is owned by the DMA.
 */
__STATIC_INLINE bool XMC_ETH_MAC_IsRxDescriptorOwnedByDma(XMC_ETH_MAC_t *const eth_mac)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  return ((eth_mac->rx_desc[eth_mac->rx_index].status & ETH_MAC_DMA_RDES0_OWN) != 0U);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004a6e:	015b      	lsls	r3, r3, #5
 8004a70:	4413      	add	r3, r2
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	0fdb      	lsrs	r3, r3, #31
 8004a76:	b2db      	uxtb	r3, r3
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <XMC_ETH_MAC_IsTxDescriptorOwnedByDma>:
 *
 * \par
 * The function checks if the TX descriptor is owned by the DMA.
 */
__STATIC_INLINE bool XMC_ETH_MAC_IsTxDescriptorOwnedByDma(XMC_ETH_MAC_t *const eth_mac)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  return ((eth_mac->tx_desc[eth_mac->tx_index].status & ETH_MAC_DMA_TDES0_OWN) != 0U);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	695a      	ldr	r2, [r3, #20]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004a96:	015b      	lsls	r3, r3, #5
 8004a98:	4413      	add	r3, r2
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	0fdb      	lsrs	r3, r3, #31
 8004a9e:	b2db      	uxtb	r3, r3
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <XMC_ETH_MAC_EnableRx>:
 * The function enables the receiver state machine of the MAC and puts the
 * receive process in running state. The DMA then acquires the descriptor
 * from the receive list and processes the received frames.
 */
__STATIC_INLINE void XMC_ETH_MAC_EnableRx(XMC_ETH_MAC_t *const eth_mac)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_SR_Msk;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6819      	ldr	r1, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac0:	3318      	adds	r3, #24
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f043 0202 	orr.w	r2, r3, #2
 8004ac8:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004acc:	3318      	adds	r3, #24
 8004ace:	601a      	str	r2, [r3, #0]
  eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_RE_Msk;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	f042 0204 	orr.w	r2, r2, #4
 8004ade:	601a      	str	r2, [r3, #0]
}
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop

08004aec <XMC_ETH_MAC_DisableRx>:
 *
 * \par
 * The function disables the receive process.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableRx(XMC_ETH_MAC_t *const eth_mac)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_RE_Msk;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	f022 0204 	bic.w	r2, r2, #4
 8004b02:	601a      	str	r2, [r3, #0]
  eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_SR_Msk;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6819      	ldr	r1, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b10:	3318      	adds	r3, #24
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f023 0202 	bic.w	r2, r3, #2
 8004b18:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004b1c:	3318      	adds	r3, #24
 8004b1e:	601a      	str	r2, [r3, #0]
}
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop

08004b2c <XMC_ETH_MAC_EnableTx>:
 * The function enables the transmit state machine of the MAC and puts the
 * transmit process in running state. The DMA then checks the TX list at the
 * current position for transmitting a frame.
 */
__STATIC_INLINE void XMC_ETH_MAC_EnableTx(XMC_ETH_MAC_t *const eth_mac)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_ST_Msk;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6819      	ldr	r1, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b40:	3318      	adds	r3, #24
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004b48:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004b4c:	3318      	adds	r3, #24
 8004b4e:	601a      	str	r2, [r3, #0]
  eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_TE_Msk;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	f042 0208 	orr.w	r2, r2, #8
 8004b5e:	601a      	str	r2, [r3, #0]
}
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop

08004b6c <XMC_ETH_MAC_DisableTx>:
 *
 * \par
 * The function disables the transmit process.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableTx(XMC_ETH_MAC_t *const eth_mac)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_TE_Msk;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	f022 0208 	bic.w	r2, r2, #8
 8004b82:	601a      	str	r2, [r3, #0]
  eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_ST_Msk;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b90:	3318      	adds	r3, #24
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b98:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004b9c:	3318      	adds	r3, #24
 8004b9e:	601a      	str	r2, [r3, #0]
}
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop

08004bac <XMC_ETH_MAC_ResumeTx>:
 * current descriptor pointed to by the "current host transmit descriptor" reg.
 * If that descriptor is not available (owned by the CPU), the transmission
 * returns to the suspend state else the transmission resumes.
 */
__STATIC_INLINE void XMC_ETH_MAC_ResumeTx(XMC_ETH_MAC_t *const eth_mac)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TPS_Msk;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	601a      	str	r2, [r3, #0]
  eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bca:	3304      	adds	r3, #4
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
}
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop

08004bdc <XMC_ETH_MAC_ResumeRx>:
 * current descriptor pointed to by the "current host transmit descriptor" reg.
 * If that descriptor is not available (owned by the CPU), the transmission
 * returns to the suspend state else the transmission resumes.
 */
__STATIC_INLINE void XMC_ETH_MAC_ResumeRx(XMC_ETH_MAC_t *const eth_mac)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_RU_Msk;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bec:	3314      	adds	r3, #20
 8004bee:	2280      	movs	r2, #128	; 0x80
 8004bf0:	601a      	str	r2, [r3, #0]
  eth_mac->regs->RECEIVE_POLL_DEMAND = 0U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]
}
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop

08004c0c <XMC_ETH_MAC_GetTxBuffer>:
 *
 * \par<b>Description: </b><br>
 * Returns the current TX buffer.
 */
__STATIC_INLINE uint8_t *XMC_ETH_MAC_GetTxBuffer(XMC_ETH_MAC_t *const eth_mac)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  return (uint8_t *)(eth_mac->tx_desc[eth_mac->tx_index].buffer1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	695a      	ldr	r2, [r3, #20]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004c1e:	015b      	lsls	r3, r3, #5
 8004c20:	4413      	add	r3, r2
 8004c22:	689b      	ldr	r3, [r3, #8]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <XMC_ETH_MAC_GetRxBuffer>:
 *
 * \par<b>Description: </b><br>
 * Returns the current RX buffer.
 */
__STATIC_INLINE uint8_t *XMC_ETH_MAC_GetRxBuffer(XMC_ETH_MAC_t *const eth_mac)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  return (uint8_t *)(eth_mac->rx_desc[eth_mac->rx_index].buffer1); 
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004c42:	015b      	lsls	r3, r3, #5
 8004c44:	4413      	add	r3, r2
 8004c46:	689b      	ldr	r3, [r3, #8]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <XMC_ETH_MAC_SetTxBufferSize>:
 *
 * \par<b>Description: </b><br>
 * Sets the current TX buffer size.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetTxBufferSize(XMC_ETH_MAC_t *const eth_mac, uint32_t size)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  eth_mac->tx_desc[eth_mac->tx_index].length = size;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695a      	ldr	r2, [r3, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004c68:	015b      	lsls	r3, r3, #5
 8004c6a:	4413      	add	r3, r2
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	605a      	str	r2, [r3, #4]
}
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop

08004c7c <ethernetif_link_callback>:
err_t ethernetif_init(struct netif *netif);
static void ethernetif_link_callback(struct netif *netif);
static void ethernetif_link_status(void *args);

static void ethernetif_link_callback(struct netif *netif)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  XMC_ETH_LINK_SPEED_t speed;
  XMC_ETH_LINK_DUPLEX_t duplex;
  bool phy_autoneg_state;
  uint32_t retries = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]

  if (netif_is_link_up(netif))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d04f      	beq.n	8004d36 <ethernetif_link_callback+0xba>
  {

    /* If autonegotiation is enabled */
    do {
      phy_autoneg_state = XMC_ETH_PHY_IsAutonegotiationCompleted(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 8004c96:	4831      	ldr	r0, [pc, #196]	; (8004d5c <ethernetif_link_callback+0xe0>)
 8004c98:	2100      	movs	r1, #0
 8004c9a:	f008 f93b 	bl	800cf14 <XMC_ETH_PHY_IsAutonegotiationCompleted>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	74fb      	strb	r3, [r7, #19]
      retries++;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
    } while ((phy_autoneg_state == false) && (retries < ETH_LWIP_PHY_MAX_RETRIES));
 8004ca8:	7cfb      	ldrb	r3, [r7, #19]
 8004caa:	f083 0301 	eor.w	r3, r3, #1
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <ethernetif_link_callback+0x40>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	4a2a      	ldr	r2, [pc, #168]	; (8004d60 <ethernetif_link_callback+0xe4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d9ec      	bls.n	8004c96 <ethernetif_link_callback+0x1a>
    
    if(phy_autoneg_state == false)
 8004cbc:	7cfb      	ldrb	r3, [r7, #19]
 8004cbe:	f083 0301 	eor.w	r3, r3, #1
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <ethernetif_link_callback+0x52>
    {
      ETH_LWIP_Error(ETH_LWIP_ERROR_PHY_TIMEOUT);
 8004cc8:	2004      	movs	r0, #4
 8004cca:	f000 fa7f 	bl	80051cc <ETH_LWIP_Error>
    }
	
    speed = XMC_ETH_PHY_GetLinkSpeed(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 8004cce:	4823      	ldr	r0, [pc, #140]	; (8004d5c <ethernetif_link_callback+0xe0>)
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	f008 f8e7 	bl	800cea4 <XMC_ETH_PHY_GetLinkSpeed>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	823b      	strh	r3, [r7, #16]
    duplex = XMC_ETH_PHY_GetLinkDuplex(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 8004cda:	4820      	ldr	r0, [pc, #128]	; (8004d5c <ethernetif_link_callback+0xe0>)
 8004cdc:	2100      	movs	r1, #0
 8004cde:	f008 f8fd 	bl	800cedc <XMC_ETH_PHY_GetLinkDuplex>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	81fb      	strh	r3, [r7, #14]
	
    XMC_ETH_MAC_SetLink(&eth_mac, speed, duplex);
 8004ce6:	8a3a      	ldrh	r2, [r7, #16]
 8004ce8:	89fb      	ldrh	r3, [r7, #14]
 8004cea:	481c      	ldr	r0, [pc, #112]	; (8004d5c <ethernetif_link_callback+0xe0>)
 8004cec:	4611      	mov	r1, r2
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f7ff fe9a 	bl	8004a28 <XMC_ETH_MAC_SetLink>
    /* Enable ethernet interrupts */
    XMC_ETH_MAC_EnableEvent(&eth_mac, (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE);
 8004cf4:	4819      	ldr	r0, [pc, #100]	; (8004d5c <ethernetif_link_callback+0xe0>)
 8004cf6:	2140      	movs	r1, #64	; 0x40
 8004cf8:	f7fd fa84 	bl	8002204 <XMC_ETH_MAC_EnableEvent>

    NVIC_SetPriority((IRQn_Type)108, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 62U, 0U));
 8004cfc:	f7ff fd84 	bl	8004808 <__NVIC_GetPriorityGrouping>
 8004d00:	4603      	mov	r3, r0
 8004d02:	4618      	mov	r0, r3
 8004d04:	213e      	movs	r1, #62	; 0x3e
 8004d06:	2200      	movs	r2, #0
 8004d08:	f7ff fe12 	bl	8004930 <NVIC_EncodePriority>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	206c      	movs	r0, #108	; 0x6c
 8004d10:	4619      	mov	r1, r3
 8004d12:	f7ff fde3 	bl	80048dc <__NVIC_SetPriority>
    NVIC_ClearPendingIRQ((IRQn_Type)108);
 8004d16:	206c      	movs	r0, #108	; 0x6c
 8004d18:	f7ff fdc2 	bl	80048a0 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ((IRQn_Type)108);
 8004d1c:	206c      	movs	r0, #108	; 0x6c
 8004d1e:	f7ff fd81 	bl	8004824 <__NVIC_EnableIRQ>
    XMC_ETH_MAC_EnableTx(&eth_mac);
 8004d22:	480e      	ldr	r0, [pc, #56]	; (8004d5c <ethernetif_link_callback+0xe0>)
 8004d24:	f7ff ff02 	bl	8004b2c <XMC_ETH_MAC_EnableTx>
    XMC_ETH_MAC_EnableRx(&eth_mac);
 8004d28:	480c      	ldr	r0, [pc, #48]	; (8004d5c <ethernetif_link_callback+0xe0>)
 8004d2a:	f7ff febf 	bl	8004aac <XMC_ETH_MAC_EnableRx>

    netif_set_up(&xnetif);
 8004d2e:	480d      	ldr	r0, [pc, #52]	; (8004d64 <ethernetif_link_callback+0xe8>)
 8004d30:	f002 fa7a 	bl	8007228 <netif_set_up>
 8004d34:	e00f      	b.n	8004d56 <ethernetif_link_callback+0xda>

  }
  else
  {
    /* Enable ethernet interrupts */
    XMC_ETH_MAC_DisableEvent(&eth_mac, (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE);
 8004d36:	4809      	ldr	r0, [pc, #36]	; (8004d5c <ethernetif_link_callback+0xe0>)
 8004d38:	2140      	movs	r1, #64	; 0x40
 8004d3a:	f7fd fa9b 	bl	8002274 <XMC_ETH_MAC_DisableEvent>
    NVIC_DisableIRQ((IRQn_Type)108);
 8004d3e:	206c      	movs	r0, #108	; 0x6c
 8004d40:	f7ff fd8c 	bl	800485c <__NVIC_DisableIRQ>

    XMC_ETH_MAC_DisableTx(&eth_mac);
 8004d44:	4805      	ldr	r0, [pc, #20]	; (8004d5c <ethernetif_link_callback+0xe0>)
 8004d46:	f7ff ff11 	bl	8004b6c <XMC_ETH_MAC_DisableTx>
    XMC_ETH_MAC_DisableRx(&eth_mac);
 8004d4a:	4804      	ldr	r0, [pc, #16]	; (8004d5c <ethernetif_link_callback+0xe0>)
 8004d4c:	f7ff fece 	bl	8004aec <XMC_ETH_MAC_DisableRx>

    netif_set_down(&xnetif);
 8004d50:	4804      	ldr	r0, [pc, #16]	; (8004d64 <ethernetif_link_callback+0xe8>)
 8004d52:	f002 fab9 	bl	80072c8 <netif_set_down>
    /* Stop AUTOIP probing */
    autoip_stop(&xnetif);
#endif

  }
}
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	1ffe88a0 	.word	0x1ffe88a0
 8004d60:	000ffffe 	.word	0x000ffffe
 8004d64:	1ffe88d0 	.word	0x1ffe88d0

08004d68 <ethernetif_link_status>:

static void ethernetif_link_status(void *args)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(args);


  if (XMC_ETH_PHY_GetLinkStatus(&eth_mac, ETH_LWIP_0_PHY_ADDR) == XMC_ETH_LINK_STATUS_DOWN)
 8004d70:	4812      	ldr	r0, [pc, #72]	; (8004dbc <ethernetif_link_status+0x54>)
 8004d72:	2100      	movs	r1, #0
 8004d74:	f008 f87c 	bl	800ce70 <XMC_ETH_PHY_GetLinkStatus>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <ethernetif_link_status+0x2c>
  {
    if (netif_is_link_up(&xnetif))
 8004d7e:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <ethernetif_link_status+0x58>)
 8004d80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00d      	beq.n	8004da8 <ethernetif_link_status+0x40>
    {
      netif_set_link_down(&xnetif);
 8004d8c:	480c      	ldr	r0, [pc, #48]	; (8004dc0 <ethernetif_link_status+0x58>)
 8004d8e:	f002 fae9 	bl	8007364 <netif_set_link_down>
 8004d92:	e009      	b.n	8004da8 <ethernetif_link_status+0x40>
    }
  }
  else
  {
    if (!netif_is_link_up(&xnetif))
 8004d94:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <ethernetif_link_status+0x58>)
 8004d96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d102      	bne.n	8004da8 <ethernetif_link_status+0x40>
    {
      netif_set_link_up(&xnetif);
 8004da2:	4807      	ldr	r0, [pc, #28]	; (8004dc0 <ethernetif_link_status+0x58>)
 8004da4:	f002 fab6 	bl	8007314 <netif_set_link_up>
    }
  }

  sys_timeout(1000U, ethernetif_link_status, NULL);
 8004da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dac:	4905      	ldr	r1, [pc, #20]	; (8004dc4 <ethernetif_link_status+0x5c>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	f007 fba2 	bl	800c4f8 <sys_timeout>
}
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	1ffe88a0 	.word	0x1ffe88a0
 8004dc0:	1ffe88d0 	.word	0x1ffe88d0
 8004dc4:	08004d69 	.word	0x08004d69

08004dc8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(netif);

  XMC_ETH_MAC_PORT_CTRL_t port_control;
  XMC_GPIO_CONFIG_t gpio_config;

  gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 8004dd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dd4:	613b      	str	r3, [r7, #16]
  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	733b      	strb	r3, [r7, #12]
  XMC_GPIO_Init(ETH_LWIP_0_CRS_DV, &gpio_config);
 8004dda:	f107 030c 	add.w	r3, r7, #12
 8004dde:	484f      	ldr	r0, [pc, #316]	; (8004f1c <low_level_init+0x154>)
 8004de0:	2109      	movs	r1, #9
 8004de2:	461a      	mov	r2, r3
 8004de4:	f7fc f932 	bl	800104c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_RXER, &gpio_config);
 8004de8:	f107 030c 	add.w	r3, r7, #12
 8004dec:	484c      	ldr	r0, [pc, #304]	; (8004f20 <low_level_init+0x158>)
 8004dee:	2104      	movs	r1, #4
 8004df0:	461a      	mov	r2, r3
 8004df2:	f7fc f92b 	bl	800104c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_RXD0, &gpio_config);
 8004df6:	f107 030c 	add.w	r3, r7, #12
 8004dfa:	4849      	ldr	r0, [pc, #292]	; (8004f20 <low_level_init+0x158>)
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f7fc f924 	bl	800104c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_RXD1, &gpio_config);
 8004e04:	f107 030c 	add.w	r3, r7, #12
 8004e08:	4845      	ldr	r0, [pc, #276]	; (8004f20 <low_level_init+0x158>)
 8004e0a:	2103      	movs	r1, #3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f7fc f91d 	bl	800104c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_RMII_CLK, &gpio_config);
 8004e12:	f107 030c 	add.w	r3, r7, #12
 8004e16:	4841      	ldr	r0, [pc, #260]	; (8004f1c <low_level_init+0x154>)
 8004e18:	2108      	movs	r1, #8
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f7fc f916 	bl	800104c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_MDIO, &gpio_config);
 8004e20:	f107 030c 	add.w	r3, r7, #12
 8004e24:	483e      	ldr	r0, [pc, #248]	; (8004f20 <low_level_init+0x158>)
 8004e26:	2100      	movs	r1, #0
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f7fc f90f 	bl	800104c <XMC_GPIO_Init>
  
  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_MEDIUM_EDGE;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	753b      	strb	r3, [r7, #20]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8004e32:	2388      	movs	r3, #136	; 0x88
 8004e34:	733b      	strb	r3, [r7, #12]
  XMC_GPIO_Init(ETH_LWIP_0_MDC, &gpio_config);
 8004e36:	f107 030c 	add.w	r3, r7, #12
 8004e3a:	4839      	ldr	r0, [pc, #228]	; (8004f20 <low_level_init+0x158>)
 8004e3c:	2107      	movs	r1, #7
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f7fc f904 	bl	800104c <XMC_GPIO_Init>
  XMC_GPIO_SetHardwareControl(ETH_LWIP_0_MDIO, XMC_GPIO_HWCTRL_PERIPHERAL1);
 8004e44:	4836      	ldr	r0, [pc, #216]	; (8004f20 <low_level_init+0x158>)
 8004e46:	2100      	movs	r1, #0
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f7fd fb13 	bl	8002474 <XMC_GPIO_SetHardwareControl>

  port_control.mode = XMC_ETH_MAC_PORT_CTRL_MODE_RMII;
 8004e4e:	7efb      	ldrb	r3, [r7, #27]
 8004e50:	f043 0304 	orr.w	r3, r3, #4
 8004e54:	76fb      	strb	r3, [r7, #27]
  port_control.rxd0 = (XMC_ETH_MAC_PORT_CTRL_RXD0_t)0U;
 8004e56:	7e3b      	ldrb	r3, [r7, #24]
 8004e58:	f36f 0301 	bfc	r3, #0, #2
 8004e5c:	763b      	strb	r3, [r7, #24]
  port_control.rxd1 = (XMC_ETH_MAC_PORT_CTRL_RXD1_t)0U;
 8004e5e:	7e3b      	ldrb	r3, [r7, #24]
 8004e60:	f36f 0383 	bfc	r3, #2, #2
 8004e64:	763b      	strb	r3, [r7, #24]
  port_control.clk_rmii = (XMC_ETH_MAC_PORT_CTRL_CLK_RMII_t)2U;
 8004e66:	7e7b      	ldrb	r3, [r7, #25]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	f362 0301 	bfi	r3, r2, #0, #2
 8004e6e:	767b      	strb	r3, [r7, #25]
  port_control.crs_dv = (XMC_ETH_MAC_PORT_CTRL_CRS_DV_t)2U;
 8004e70:	7e7b      	ldrb	r3, [r7, #25]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f362 0383 	bfi	r3, r2, #2, #2
 8004e78:	767b      	strb	r3, [r7, #25]
  port_control.rxer = (XMC_ETH_MAC_PORT_CTRL_RXER_t)0U;
 8004e7a:	7e7b      	ldrb	r3, [r7, #25]
 8004e7c:	f36f 1387 	bfc	r3, #6, #2
 8004e80:	767b      	strb	r3, [r7, #25]
  port_control.mdio = (XMC_ETH_MAC_PORT_CTRL_MDIO_t)1U;
 8004e82:	7ebb      	ldrb	r3, [r7, #26]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f362 1387 	bfi	r3, r2, #6, #2
 8004e8a:	76bb      	strb	r3, [r7, #26]
  XMC_ETH_MAC_SetPortControl(&eth_mac, port_control);
 8004e8c:	4825      	ldr	r0, [pc, #148]	; (8004f24 <low_level_init+0x15c>)
 8004e8e:	69b9      	ldr	r1, [r7, #24]
 8004e90:	f7ff fd80 	bl	8004994 <XMC_ETH_MAC_SetPortControl>

  XMC_ETH_MAC_Enable(&eth_mac);
 8004e94:	4823      	ldr	r0, [pc, #140]	; (8004f24 <low_level_init+0x15c>)
 8004e96:	f7fd f92d 	bl	80020f4 <XMC_ETH_MAC_Enable>
  XMC_ETH_MAC_SetManagmentClockDivider(&eth_mac);
 8004e9a:	4822      	ldr	r0, [pc, #136]	; (8004f24 <low_level_init+0x15c>)
 8004e9c:	f7fd f8da 	bl	8002054 <XMC_ETH_MAC_SetManagmentClockDivider>

  int32_t status;
  if((status = XMC_ETH_PHY_Init(&eth_mac, ETH_LWIP_0_PHY_ADDR, &eth_phy_config)) != XMC_ETH_PHY_STATUS_OK)
 8004ea0:	4820      	ldr	r0, [pc, #128]	; (8004f24 <low_level_init+0x15c>)
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4a20      	ldr	r2, [pc, #128]	; (8004f28 <low_level_init+0x160>)
 8004ea6:	f007 ff63 	bl	800cd70 <XMC_ETH_PHY_Init>
 8004eaa:	61f8      	str	r0, [r7, #28]
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d004      	beq.n	8004ebc <low_level_init+0xf4>
  {
    ETH_LWIP_Error((ETH_LWIP_ERROR_t)status);
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 f988 	bl	80051cc <ETH_LWIP_Error>
  }

  XMC_ETH_MAC_InitEx(&eth_mac);
 8004ebc:	4819      	ldr	r0, [pc, #100]	; (8004f24 <low_level_init+0x15c>)
 8004ebe:	f7fc ff9d 	bl	8001dfc <XMC_ETH_MAC_InitEx>

  XMC_ETH_MAC_SetAddress(&eth_mac, eth_mac.address);
 8004ec2:	4b18      	ldr	r3, [pc, #96]	; (8004f24 <low_level_init+0x15c>)
 8004ec4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004ec8:	4816      	ldr	r0, [pc, #88]	; (8004f24 <low_level_init+0x15c>)
 8004eca:	f7ff fd73 	bl	80049b4 <XMC_ETH_MAC_SetAddress>
  XMC_ETH_MAC_DisableJumboFrame(&eth_mac);
 8004ece:	4815      	ldr	r0, [pc, #84]	; (8004f24 <low_level_init+0x15c>)
 8004ed0:	f7ff fd98 	bl	8004a04 <XMC_ETH_MAC_DisableJumboFrame>

  XMC_ETH_MAC_EnableReceptionBroadcastFrames(&eth_mac);
 8004ed4:	4813      	ldr	r0, [pc, #76]	; (8004f24 <low_level_init+0x15c>)
 8004ed6:	f7ff fd83 	bl	80049e0 <XMC_ETH_MAC_EnableReceptionBroadcastFrames>
  
  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_MEDIUM_EDGE;
 8004eda:	2301      	movs	r3, #1
 8004edc:	753b      	strb	r3, [r7, #20]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8004ede:	2388      	movs	r3, #136	; 0x88
 8004ee0:	733b      	strb	r3, [r7, #12]
  XMC_GPIO_Init(ETH_LWIP_0_TXEN, &gpio_config);
 8004ee2:	f107 030c 	add.w	r3, r7, #12
 8004ee6:	480e      	ldr	r0, [pc, #56]	; (8004f20 <low_level_init+0x158>)
 8004ee8:	2105      	movs	r1, #5
 8004eea:	461a      	mov	r2, r3
 8004eec:	f7fc f8ae 	bl	800104c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8004ef0:	2388      	movs	r3, #136	; 0x88
 8004ef2:	733b      	strb	r3, [r7, #12]
  XMC_GPIO_Init(ETH_LWIP_0_TXD0, &gpio_config);
 8004ef4:	f107 030c 	add.w	r3, r7, #12
 8004ef8:	4809      	ldr	r0, [pc, #36]	; (8004f20 <low_level_init+0x158>)
 8004efa:	2108      	movs	r1, #8
 8004efc:	461a      	mov	r2, r3
 8004efe:	f7fc f8a5 	bl	800104c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8004f02:	2388      	movs	r3, #136	; 0x88
 8004f04:	733b      	strb	r3, [r7, #12]
  XMC_GPIO_Init(ETH_LWIP_0_TXD1, &gpio_config);
 8004f06:	f107 030c 	add.w	r3, r7, #12
 8004f0a:	4805      	ldr	r0, [pc, #20]	; (8004f20 <low_level_init+0x158>)
 8004f0c:	2109      	movs	r1, #9
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f7fc f89c 	bl	800104c <XMC_GPIO_Init>

}
 8004f14:	3720      	adds	r7, #32
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	48028f00 	.word	0x48028f00
 8004f20:	48028200 	.word	0x48028200
 8004f24:	1ffe88a0 	.word	0x1ffe88a0
 8004f28:	080115a8 	.word	0x080115a8

08004f2c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  XMC_UNUSED_ARG(netif);

  struct pbuf *q;
  uint32_t framelen = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	613b      	str	r3, [r7, #16]
  uint8_t *buffer;
  
  if (p->tot_len > (u16_t)XMC_ETH_MAC_BUF_SIZE) {
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	891b      	ldrh	r3, [r3, #8]
 8004f3e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <low_level_output+0x1e>
    return ERR_BUF;
 8004f46:	23fe      	movs	r3, #254	; 0xfe
 8004f48:	e03c      	b.n	8004fc4 <low_level_output+0x98>
  }

  while (XMC_ETH_MAC_IsTxDescriptorOwnedByDma(&eth_mac));
 8004f4a:	bf00      	nop
 8004f4c:	4820      	ldr	r0, [pc, #128]	; (8004fd0 <low_level_output+0xa4>)
 8004f4e:	f7ff fd99 	bl	8004a84 <XMC_ETH_MAC_IsTxDescriptorOwnedByDma>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f9      	bne.n	8004f4c <low_level_output+0x20>

  buffer = XMC_ETH_MAC_GetTxBuffer(&eth_mac);
 8004f58:	481d      	ldr	r0, [pc, #116]	; (8004fd0 <low_level_output+0xa4>)
 8004f5a:	f7ff fe57 	bl	8004c0c <XMC_ETH_MAC_GetTxBuffer>
 8004f5e:	60f8      	str	r0, [r7, #12]

#if ETH_PAD_SIZE
  pbuf_header(p, -ETH_PAD_SIZE);    /* Drop the padding word */
 8004f60:	6838      	ldr	r0, [r7, #0]
 8004f62:	f06f 0101 	mvn.w	r1, #1
 8004f66:	f002 fcb3 	bl	80078d0 <pbuf_header>
#endif

  for(q = p; q != NULL; q = q->next)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	e017      	b.n	8004fa0 <low_level_output+0x74>
  {
    /* Send the data from the pbuf to the interface, one pbuf at a
     time. The size of the data in each pbuf is kept in the ->len
     variable. */
    MEMCPY(buffer, q->payload, q->len);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	895b      	ldrh	r3, [r3, #10]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f000 f937 	bl	80051f0 <memcpy>
    framelen += (uint32_t)q->len;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	895b      	ldrh	r3, [r3, #10]
 8004f86:	461a      	mov	r2, r3
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
    buffer += q->len;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	895b      	ldrh	r3, [r3, #10]
 8004f92:	461a      	mov	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

#if ETH_PAD_SIZE
  pbuf_header(p, -ETH_PAD_SIZE);    /* Drop the padding word */
#endif

  for(q = p; q != NULL; q = q->next)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e4      	bne.n	8004f70 <low_level_output+0x44>
    framelen += (uint32_t)q->len;
    buffer += q->len;
  }

#if ETH_PAD_SIZE
  pbuf_header(p, ETH_PAD_SIZE);    /* Reclaim the padding word */
 8004fa6:	6838      	ldr	r0, [r7, #0]
 8004fa8:	2102      	movs	r1, #2
 8004faa:	f002 fc91 	bl	80078d0 <pbuf_header>
#endif

  XMC_ETH_MAC_SetTxBufferSize(&eth_mac, framelen);
 8004fae:	4808      	ldr	r0, [pc, #32]	; (8004fd0 <low_level_output+0xa4>)
 8004fb0:	6939      	ldr	r1, [r7, #16]
 8004fb2:	f7ff fe4f 	bl	8004c54 <XMC_ETH_MAC_SetTxBufferSize>

  XMC_ETH_MAC_ReturnTxDescriptor(&eth_mac);
 8004fb6:	4806      	ldr	r0, [pc, #24]	; (8004fd0 <low_level_output+0xa4>)
 8004fb8:	f7fd f9e2 	bl	8002380 <XMC_ETH_MAC_ReturnTxDescriptor>
  XMC_ETH_MAC_ResumeTx(&eth_mac);
 8004fbc:	4804      	ldr	r0, [pc, #16]	; (8004fd0 <low_level_output+0xa4>)
 8004fbe:	f7ff fdf5 	bl	8004bac <XMC_ETH_MAC_ResumeTx>

  LINK_STATS_INC(link.xmit);

  return ERR_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	b25b      	sxtb	r3, r3
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	1ffe88a0 	.word	0x1ffe88a0

08004fd4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
  struct pbuf *p = NULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
  struct pbuf *q;
  uint32_t len;
  uint8_t *buffer;

  if (XMC_ETH_MAC_IsRxDescriptorOwnedByDma(&eth_mac) == false)
 8004fde:	482f      	ldr	r0, [pc, #188]	; (800509c <low_level_input+0xc8>)
 8004fe0:	f7ff fd3c 	bl	8004a5c <XMC_ETH_MAC_IsRxDescriptorOwnedByDma>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f083 0301 	eor.w	r3, r3, #1
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d04c      	beq.n	800508a <low_level_input+0xb6>
  {
    len = XMC_ETH_MAC_GetRxFrameSize(&eth_mac);
 8004ff0:	482a      	ldr	r0, [pc, #168]	; (800509c <low_level_input+0xc8>)
 8004ff2:	f7fc fff7 	bl	8001fe4 <XMC_ETH_MAC_GetRxFrameSize>
 8004ff6:	6078      	str	r0, [r7, #4]
  
    if ((len > 0U) && (len <= (uint32_t)XMC_ETH_MAC_BUF_SIZE))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d042      	beq.n	8005084 <low_level_input+0xb0>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005004:	4293      	cmp	r3, r2
 8005006:	d83d      	bhi.n	8005084 <low_level_input+0xb0>
    {
#if ETH_PAD_SIZE
    len += ETH_PAD_SIZE;    /* allow room for Ethernet padding */
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3302      	adds	r3, #2
 800500c:	607b      	str	r3, [r7, #4]
#endif
  
      /* We allocate a pbuf chain of pbufs from the pool. */
      p = pbuf_alloc(PBUF_RAW, (u16_t)len, PBUF_POOL);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	b29b      	uxth	r3, r3
 8005012:	2000      	movs	r0, #0
 8005014:	4619      	mov	r1, r3
 8005016:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800501a:	f002 fa61 	bl	80074e0 <pbuf_alloc>
 800501e:	60f8      	str	r0, [r7, #12]
    
      if (p != NULL)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d02d      	beq.n	8005082 <low_level_input+0xae>
      {
#if ETH_PAD_SIZE
        pbuf_header(p, -ETH_PAD_SIZE);  /* drop the padding word */
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f06f 0101 	mvn.w	r1, #1
 800502c:	f002 fc50 	bl	80078d0 <pbuf_header>
#endif
  
        buffer = XMC_ETH_MAC_GetRxBuffer(&eth_mac);
 8005030:	481a      	ldr	r0, [pc, #104]	; (800509c <low_level_input+0xc8>)
 8005032:	f7ff fdfd 	bl	8004c30 <XMC_ETH_MAC_GetRxBuffer>
 8005036:	6038      	str	r0, [r7, #0]
  
        len = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	607b      	str	r3, [r7, #4]
        /* We iterate over the pbuf chain until we have read the entire
         * packet into the pbuf. */
        for (q = p; q != NULL; q = q->next)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	60bb      	str	r3, [r7, #8]
 8005040:	e014      	b.n	800506c <low_level_input+0x98>
           * This does not necessarily have to be a memcpy, you can also preallocate
           * pbufs for a DMA-enabled MAC and after receiving truncate it to the
           * actually received size. In this case, ensure the tot_len member of the
           * pbuf is the sum of the chained pbuf len members.
           */
           MEMCPY(q->payload, &buffer[len], q->len);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	6859      	ldr	r1, [r3, #4]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	441a      	add	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	895b      	ldrh	r3, [r3, #10]
 8005050:	4608      	mov	r0, r1
 8005052:	4611      	mov	r1, r2
 8005054:	461a      	mov	r2, r3
 8005056:	f000 f8cb 	bl	80051f0 <memcpy>
           len += q->len;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	895b      	ldrh	r3, [r3, #10]
 800505e:	461a      	mov	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4413      	add	r3, r2
 8005064:	607b      	str	r3, [r7, #4]
        buffer = XMC_ETH_MAC_GetRxBuffer(&eth_mac);
  
        len = 0U;
        /* We iterate over the pbuf chain until we have read the entire
         * packet into the pbuf. */
        for (q = p; q != NULL; q = q->next)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e7      	bne.n	8005042 <low_level_input+0x6e>
           */
           MEMCPY(q->payload, &buffer[len], q->len);
           len += q->len;
        }
#if ETH_PAD_SIZE
        pbuf_header(p, ETH_PAD_SIZE);    /* Reclaim the padding word */
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	2102      	movs	r1, #2
 8005076:	f002 fc2b 	bl	80078d0 <pbuf_header>
#endif
        LINK_STATS_INC(link.recv);

        XMC_ETH_MAC_ReturnRxDescriptor(&eth_mac);  
 800507a:	4808      	ldr	r0, [pc, #32]	; (800509c <low_level_input+0xc8>)
 800507c:	f7fd f950 	bl	8002320 <XMC_ETH_MAC_ReturnRxDescriptor>
#endif
  
      /* We allocate a pbuf chain of pbufs from the pool. */
      p = pbuf_alloc(PBUF_RAW, (u16_t)len, PBUF_POOL);
    
      if (p != NULL)
 8005080:	e003      	b.n	800508a <low_level_input+0xb6>
 8005082:	e002      	b.n	800508a <low_level_input+0xb6>
      }
    }
    else
    {
      /* Discard frame */
      XMC_ETH_MAC_ReturnRxDescriptor(&eth_mac);
 8005084:	4805      	ldr	r0, [pc, #20]	; (800509c <low_level_input+0xc8>)
 8005086:	f7fd f94b 	bl	8002320 <XMC_ETH_MAC_ReturnRxDescriptor>
      LINK_STATS_INC(link.memerr);
      LINK_STATS_INC(link.drop);
    }
  }

  XMC_ETH_MAC_ResumeRx(&eth_mac);
 800508a:	4804      	ldr	r0, [pc, #16]	; (800509c <low_level_input+0xc8>)
 800508c:	f7ff fda6 	bl	8004bdc <XMC_ETH_MAC_ResumeRx>

  return p;  
 8005090:	68fb      	ldr	r3, [r7, #12]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	1ffe88a0 	.word	0x1ffe88a0

080050a0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void *arg)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
  struct eth_hdr *ethhdr;
  struct netif *netif = (struct netif *)arg;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	613b      	str	r3, [r7, #16]


    NVIC_DisableIRQ((IRQn_Type)108);
 80050b0:	206c      	movs	r0, #108	; 0x6c
 80050b2:	f7ff fbd3 	bl	800485c <__NVIC_DisableIRQ>

    p = low_level_input();
 80050b6:	f7ff ff8d 	bl	8004fd4 <low_level_input>
 80050ba:	6178      	str	r0, [r7, #20]

    while (p != NULL)
 80050bc:	e024      	b.n	8005108 <ethernetif_input+0x68>
    {
   	  ethhdr = p->payload;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	60fb      	str	r3, [r7, #12]
   	  switch (htons(ethhdr->type))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	89db      	ldrh	r3, [r3, #14]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	4618      	mov	r0, r3
 80050cc:	f001 fb94 	bl	80067f8 <lwip_htons>
 80050d0:	4603      	mov	r3, r0
 80050d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d6:	d003      	beq.n	80050e0 <ethernetif_input+0x40>
 80050d8:	f640 0206 	movw	r2, #2054	; 0x806
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10c      	bne.n	80050fa <ethernetif_input+0x5a>
   	  {
   	    case ETHTYPE_IP:
   	    case ETHTYPE_ARP:
   	      /* full packet send to tcpip_thread to process */
          if (netif->input( p, netif) != ERR_OK)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	6978      	ldr	r0, [r7, #20]
 80050e6:	6939      	ldr	r1, [r7, #16]
 80050e8:	4798      	blx	r3
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <ethernetif_input+0x58>
          {
            pbuf_free(p);
 80050f0:	6978      	ldr	r0, [r7, #20]
 80050f2:	f002 fc11 	bl	8007918 <pbuf_free>
          }

          break;
 80050f6:	e004      	b.n	8005102 <ethernetif_input+0x62>
 80050f8:	e003      	b.n	8005102 <ethernetif_input+0x62>

   	    default:
   	      pbuf_free(p);
 80050fa:	6978      	ldr	r0, [r7, #20]
 80050fc:	f002 fc0c 	bl	8007918 <pbuf_free>
   	      break;
 8005100:	bf00      	nop
   	  }
      
      p = low_level_input();
 8005102:	f7ff ff67 	bl	8004fd4 <low_level_input>
 8005106:	6178      	str	r0, [r7, #20]

    NVIC_DisableIRQ((IRQn_Type)108);

    p = low_level_input();

    while (p != NULL)
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1d7      	bne.n	80050be <ethernetif_input+0x1e>
   	  }
      
      p = low_level_input();
    }

    NVIC_ClearPendingIRQ((IRQn_Type)108);
 800510e:	206c      	movs	r0, #108	; 0x6c
 8005110:	f7ff fbc6 	bl	80048a0 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ((IRQn_Type)108);
 8005114:	206c      	movs	r0, #108	; 0x6c
 8005116:	f7ff fb85 	bl	8004824 <__NVIC_EnableIRQ>



}
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif* netif)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));

  netif->name[0] = IFNAME0;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2265      	movs	r2, #101	; 0x65
 800512c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	226e      	movs	r2, #110	; 0x6e
 8005134:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f



  netif->output = etharp_output;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a14      	ldr	r2, [pc, #80]	; (800518c <ethernetif_init+0x6c>)
 800513c:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a13      	ldr	r2, [pc, #76]	; (8005190 <ethernetif_init+0x70>)
 8005142:	619a      	str	r2, [r3, #24]

  /* maximum transfer unit */
  netif->mtu = 1500U,
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800514a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* initialize the hardware */
  low_level_init(netif);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff fe3b 	bl	8004dc8 <low_level_init>

  /* device capabilities */
  xnetif.flags = NETIF_FLAG_ETHARP;
 8005152:	4b10      	ldr	r3, [pc, #64]	; (8005194 <ethernetif_init+0x74>)
 8005154:	2208      	movs	r2, #8
 8005156:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if ETH_BROADCAST_EN == 1
  xnetif.flags |= NETIF_FLAG_BROADCAST;
 800515a:	4b0e      	ldr	r3, [pc, #56]	; (8005194 <ethernetif_init+0x74>)
 800515c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005160:	f043 0302 	orr.w	r3, r3, #2
 8005164:	b2da      	uxtb	r2, r3
 8005166:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <ethernetif_init+0x74>)
 8005168:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif


  sys_timeout(1000U, ethernetif_link_status, NULL);
 800516c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005170:	4909      	ldr	r1, [pc, #36]	; (8005198 <ethernetif_init+0x78>)
 8005172:	2200      	movs	r2, #0
 8005174:	f007 f9c0 	bl	800c4f8 <sys_timeout>

  netif_set_link_callback(netif, ethernetif_link_callback);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	4908      	ldr	r1, [pc, #32]	; (800519c <ethernetif_init+0x7c>)
 800517c:	f002 f916 	bl	80073ac <netif_set_link_callback>


  return ERR_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	b25b      	sxtb	r3, r3
}
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	08005b49 	.word	0x08005b49
 8005190:	08004f2d 	.word	0x08004f2d
 8005194:	1ffe88d0 	.word	0x1ffe88d0
 8005198:	08004d69 	.word	0x08004d69
 800519c:	08004c7d 	.word	0x08004c7d

080051a0 <ETH_LWIP_UserIRQ>:

__WEAK void ETH_LWIP_UserIRQ(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
}
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <ETH0_0_IRQHandler>:
   
void IRQ_Hdlr_108(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  XMC_ETH_MAC_ClearEventStatus(&eth_mac, XMC_ETH_MAC_EVENT_RECEIVE);
 80051b0:	4804      	ldr	r0, [pc, #16]	; (80051c4 <ETH0_0_IRQHandler+0x18>)
 80051b2:	2140      	movs	r1, #64	; 0x40
 80051b4:	f7fd f884 	bl	80022c0 <XMC_ETH_MAC_ClearEventStatus>
    ethernetif_input(&xnetif);
 80051b8:	4803      	ldr	r0, [pc, #12]	; (80051c8 <ETH0_0_IRQHandler+0x1c>)
 80051ba:	f7ff ff71 	bl	80050a0 <ethernetif_input>
  
  ETH_LWIP_UserIRQ(); 
 80051be:	f7ff ffef 	bl	80051a0 <ETH_LWIP_UserIRQ>
}
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	1ffe88a0 	.word	0x1ffe88a0
 80051c8:	1ffe88d0 	.word	0x1ffe88d0

080051cc <ETH_LWIP_Error>:
    ethernetif_input(&xnetif);
}

/*Weak function to be called incase of error*/
__WEAK void ETH_LWIP_Error (ETH_LWIP_ERROR_t error_code)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	71fb      	strb	r3, [r7, #7]
  switch (error_code)
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d004      	beq.n	80051e6 <ETH_LWIP_Error+0x1a>
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d003      	beq.n	80051e8 <ETH_LWIP_Error+0x1c>
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d002      	beq.n	80051ea <ETH_LWIP_Error+0x1e>
 80051e4:	e002      	b.n	80051ec <ETH_LWIP_Error+0x20>
  {
    case ETH_LWIP_ERROR_PHY_DEVICE_ID:
       /* Wrong PHY address configured in the ETH_LWIP APP Network Interface.
        * Because the connect PHY does not match the configuration or the PHYADR is wrong*/
       break;
 80051e6:	e002      	b.n	80051ee <ETH_LWIP_Error+0x22>

   case ETH_LWIP_ERROR_PHY_TIMEOUT:
      /* PHY did not respond.*/
      break;
 80051e8:	e001      	b.n	80051ee <ETH_LWIP_Error+0x22>

   case ETH_LWIP_ERROR_PHY_ERROR:
     /*PHY register update failed*/
     break;
 80051ea:	e000      	b.n	80051ee <ETH_LWIP_Error+0x22>

   default:
     break;
 80051ec:	bf00      	nop
  }

  for (;;);
 80051ee:	e7fe      	b.n	80051ee <ETH_LWIP_Error+0x22>

080051f0 <memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void *memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 80051f0:	0913      	lsrs	r3, r2, #4
 80051f2:	d011      	beq.n	8005218 <memcpy+0x28>
 80051f4:	f851 cb04 	ldr.w	ip, [r1], #4
 80051f8:	f840 cb04 	str.w	ip, [r0], #4
 80051fc:	f851 cb04 	ldr.w	ip, [r1], #4
 8005200:	f840 cb04 	str.w	ip, [r0], #4
 8005204:	f851 cb04 	ldr.w	ip, [r1], #4
 8005208:	f840 cb04 	str.w	ip, [r0], #4
 800520c:	f851 cb04 	ldr.w	ip, [r1], #4
 8005210:	f840 cb04 	str.w	ip, [r0], #4
 8005214:	3b01      	subs	r3, #1
 8005216:	d1ed      	bne.n	80051f4 <memcpy+0x4>
 8005218:	f012 030f 	ands.w	r3, r2, #15
 800521c:	d005      	beq.n	800522a <memcpy+0x3a>
 800521e:	f811 cb01 	ldrb.w	ip, [r1], #1
 8005222:	f800 cb01 	strb.w	ip, [r0], #1
 8005226:	3b01      	subs	r3, #1
 8005228:	d1f9      	bne.n	800521e <memcpy+0x2e>
 800522a:	4770      	bx	lr
        "    bne     3$\n"

        // Return to caller.
        "4$: bx      lr\n"
    );
}
 800522c:	4618      	mov	r0, r3
 800522e:	bf00      	nop

08005230 <sys_now>:
#include "include/arch/cc.h"
#include "../include/lwip/sys.h"


uint32_t sys_now(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  return (u32_t)(SYSTIMER_GetTickCount());
 8005234:	f7fe fb64 	bl	8003900 <SYSTIMER_GetTickCount>
 8005238:	4603      	mov	r3, r0

}
 800523a:	4618      	mov	r0, r3
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop

08005240 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800524a:	2310      	movs	r3, #16
 800524c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	895b      	ldrh	r3, [r3, #10]
 8005252:	2b10      	cmp	r3, #16
 8005254:	d800      	bhi.n	8005258 <ethernet_input+0x18>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 8005256:	e073      	b.n	8005340 <ethernet_input+0x100>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	7bdb      	ldrb	r3, [r3, #15]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <ethernet_input+0x2e>
    p->if_idx = netif_get_index(netif);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005266:	3301      	adds	r3, #1
 8005268:	b2da      	uxtb	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	7b9a      	ldrb	r2, [r3, #14]
 8005278:	7bdb      	ldrb	r3, [r3, #15]
 800527a:	021b      	lsls	r3, r3, #8
 800527c:	4313      	orrs	r3, r2
 800527e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	789b      	ldrb	r3, [r3, #2]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d024      	beq.n	80052d6 <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	789b      	ldrb	r3, [r3, #2]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d10f      	bne.n	80052b4 <ethernet_input+0x74>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	78db      	ldrb	r3, [r3, #3]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11c      	bne.n	80052d6 <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	791b      	ldrb	r3, [r3, #4]

  if (ethhdr->dest.addr[0] & 1) {
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80052a0:	2b5e      	cmp	r3, #94	; 0x5e
 80052a2:	d118      	bne.n	80052d6 <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	7b5b      	ldrb	r3, [r3, #13]
 80052a8:	f043 0310 	orr.w	r3, r3, #16
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	735a      	strb	r2, [r3, #13]
 80052b2:	e010      	b.n	80052d6 <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	3302      	adds	r3, #2
 80052b8:	4618      	mov	r0, r3
 80052ba:	4926      	ldr	r1, [pc, #152]	; (8005354 <ethernet_input+0x114>)
 80052bc:	2206      	movs	r2, #6
 80052be:	f009 fb6d 	bl	800e99c <memcmp>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d106      	bne.n	80052d6 <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	7b5b      	ldrb	r3, [r3, #13]
 80052cc:	f043 0308 	orr.w	r3, r3, #8
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80052d6:	89fb      	ldrh	r3, [r7, #14]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d003      	beq.n	80052e4 <ethernet_input+0xa4>
 80052dc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80052e0:	d016      	beq.n	8005310 <ethernet_input+0xd0>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80052e2:	e02d      	b.n	8005340 <ethernet_input+0x100>

  switch (type) {
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d100      	bne.n	80052f4 <ethernet_input+0xb4>
        goto free_and_return;
 80052f2:	e025      	b.n	8005340 <ethernet_input+0x100>
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80052f4:	8afb      	ldrh	r3, [r7, #22]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	4619      	mov	r1, r3
 80052fa:	f002 fa8d 	bl	8007818 <pbuf_remove_header>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d000      	beq.n	8005306 <ethernet_input+0xc6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: IPv4 packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
 8005304:	e01c      	b.n	8005340 <ethernet_input+0x100>
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	f001 f85f 	bl	80063cc <ip4_input>
      }
      break;
 800530e:	e015      	b.n	800533c <ethernet_input+0xfc>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d100      	bne.n	8005320 <ethernet_input+0xe0>
        goto free_and_return;
 800531e:	e00f      	b.n	8005340 <ethernet_input+0x100>
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8005320:	8afb      	ldrh	r3, [r7, #22]
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	4619      	mov	r1, r3
 8005326:	f002 fa77 	bl	8007818 <pbuf_remove_header>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d000      	beq.n	8005332 <ethernet_input+0xf2>
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
        ETHARP_STATS_INC(etharp.drop);
        goto free_and_return;
 8005330:	e006      	b.n	8005340 <ethernet_input+0x100>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	f000 fb01 	bl	800593c <etharp_input>
      }
      break;
 800533a:	bf00      	nop
      goto free_and_return;
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	e003      	b.n	8005348 <ethernet_input+0x108>

free_and_return:
  pbuf_free(p);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f002 fae9 	bl	8007918 <pbuf_free>
  return ERR_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	b25b      	sxtb	r3, r3
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	080115b0 	.word	0x080115b0

08005358 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8005366:	8c3b      	ldrh	r3, [r7, #32]
 8005368:	4618      	mov	r0, r3
 800536a:	f001 fa45 	bl	80067f8 <lwip_htons>
 800536e:	4603      	mov	r3, r0
 8005370:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8005372:	68b8      	ldr	r0, [r7, #8]
 8005374:	2110      	movs	r1, #16
 8005376:	f002 fa3f 	bl	80077f8 <pbuf_add_header>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <ethernet_output+0x2e>
      goto pbuf_header_failed;
 8005380:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8005382:	23fe      	movs	r3, #254	; 0xfe
 8005384:	e019      	b.n	80053ba <ethernet_output+0x62>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	8afa      	ldrh	r2, [r7, #22]
 8005390:	81da      	strh	r2, [r3, #14]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	3302      	adds	r3, #2
 8005396:	4618      	mov	r0, r3
 8005398:	6839      	ldr	r1, [r7, #0]
 800539a:	2206      	movs	r2, #6
 800539c:	f7ff ff28 	bl	80051f0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	3308      	adds	r3, #8
 80053a4:	4618      	mov	r0, r3
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	2206      	movs	r2, #6
 80053aa:	f7ff ff21 	bl	80051f0 <memcpy>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	4798      	blx	r3
 80053b8:	4603      	mov	r3, r0
 80053ba:	b25b      	sxtb	r3, r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80053cc:	4915      	ldr	r1, [pc, #84]	; (8005424 <etharp_free_entry+0x60>)
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	4613      	mov	r3, r2
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	4413      	add	r3, r2
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	440b      	add	r3, r1
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d013      	beq.n	8005408 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80053e0:	4910      	ldr	r1, [pc, #64]	; (8005424 <etharp_free_entry+0x60>)
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	4613      	mov	r3, r2
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	4413      	add	r3, r2
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	440b      	add	r3, r1
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f002 fa91 	bl	8007918 <pbuf_free>
    arp_table[i].q = NULL;
 80053f6:	490b      	ldr	r1, [pc, #44]	; (8005424 <etharp_free_entry+0x60>)
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	4413      	add	r3, r2
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	440b      	add	r3, r1
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8005408:	4906      	ldr	r1, [pc, #24]	; (8005424 <etharp_free_entry+0x60>)
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4613      	mov	r3, r2
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	4413      	add	r3, r2
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	440b      	add	r3, r1
 8005416:	3310      	adds	r3, #16
 8005418:	2200      	movs	r2, #0
 800541a:	711a      	strb	r2, [r3, #4]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	1ffe89f4 	.word	0x1ffe89f4

08005428 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800542e:	2300      	movs	r3, #0
 8005430:	607b      	str	r3, [r7, #4]
 8005432:	e097      	b.n	8005564 <etharp_tmr+0x13c>
    u8_t state = arp_table[i].state;
 8005434:	494f      	ldr	r1, [pc, #316]	; (8005574 <etharp_tmr+0x14c>)
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	4613      	mov	r3, r2
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	4413      	add	r3, r2
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	440b      	add	r3, r1
 8005442:	3310      	adds	r3, #16
 8005444:	791b      	ldrb	r3, [r3, #4]
 8005446:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 8087 	beq.w	800555e <etharp_tmr+0x136>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8005450:	4948      	ldr	r1, [pc, #288]	; (8005574 <etharp_tmr+0x14c>)
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	4613      	mov	r3, r2
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	4413      	add	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	440b      	add	r3, r1
 800545e:	3310      	adds	r3, #16
 8005460:	885b      	ldrh	r3, [r3, #2]
 8005462:	3301      	adds	r3, #1
 8005464:	b298      	uxth	r0, r3
 8005466:	4943      	ldr	r1, [pc, #268]	; (8005574 <etharp_tmr+0x14c>)
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	4413      	add	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	440b      	add	r3, r1
 8005474:	3310      	adds	r3, #16
 8005476:	4602      	mov	r2, r0
 8005478:	805a      	strh	r2, [r3, #2]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800547a:	493e      	ldr	r1, [pc, #248]	; (8005574 <etharp_tmr+0x14c>)
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	4613      	mov	r3, r2
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	4413      	add	r3, r2
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	440b      	add	r3, r1
 8005488:	3310      	adds	r3, #16
 800548a:	885b      	ldrh	r3, [r3, #2]
 800548c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005490:	d215      	bcs.n	80054be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005492:	4938      	ldr	r1, [pc, #224]	; (8005574 <etharp_tmr+0x14c>)
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	4413      	add	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	440b      	add	r3, r1
 80054a0:	3310      	adds	r3, #16
 80054a2:	791b      	ldrb	r3, [r3, #4]
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d10e      	bne.n	80054c6 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80054a8:	4932      	ldr	r1, [pc, #200]	; (8005574 <etharp_tmr+0x14c>)
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	4413      	add	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	440b      	add	r3, r1
 80054b6:	3310      	adds	r3, #16
 80054b8:	885b      	ldrh	r3, [r3, #2]
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d903      	bls.n	80054c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff ff80 	bl	80053c4 <etharp_free_entry>
 80054c4:	e04b      	b.n	800555e <etharp_tmr+0x136>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80054c6:	492b      	ldr	r1, [pc, #172]	; (8005574 <etharp_tmr+0x14c>)
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	4413      	add	r3, r2
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	440b      	add	r3, r1
 80054d4:	3310      	adds	r3, #16
 80054d6:	791b      	ldrb	r3, [r3, #4]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d10a      	bne.n	80054f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80054dc:	4925      	ldr	r1, [pc, #148]	; (8005574 <etharp_tmr+0x14c>)
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4413      	add	r3, r2
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	440b      	add	r3, r1
 80054ea:	3310      	adds	r3, #16
 80054ec:	2204      	movs	r2, #4
 80054ee:	711a      	strb	r2, [r3, #4]
 80054f0:	e035      	b.n	800555e <etharp_tmr+0x136>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80054f2:	4920      	ldr	r1, [pc, #128]	; (8005574 <etharp_tmr+0x14c>)
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	4413      	add	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	440b      	add	r3, r1
 8005500:	3310      	adds	r3, #16
 8005502:	791b      	ldrb	r3, [r3, #4]
 8005504:	2b04      	cmp	r3, #4
 8005506:	d10a      	bne.n	800551e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8005508:	491a      	ldr	r1, [pc, #104]	; (8005574 <etharp_tmr+0x14c>)
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	4613      	mov	r3, r2
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	4413      	add	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	440b      	add	r3, r1
 8005516:	3310      	adds	r3, #16
 8005518:	2202      	movs	r2, #2
 800551a:	711a      	strb	r2, [r3, #4]
 800551c:	e01f      	b.n	800555e <etharp_tmr+0x136>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800551e:	4915      	ldr	r1, [pc, #84]	; (8005574 <etharp_tmr+0x14c>)
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	4413      	add	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	440b      	add	r3, r1
 800552c:	3310      	adds	r3, #16
 800552e:	791b      	ldrb	r3, [r3, #4]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d114      	bne.n	800555e <etharp_tmr+0x136>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8005534:	490f      	ldr	r1, [pc, #60]	; (8005574 <etharp_tmr+0x14c>)
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	4613      	mov	r3, r2
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	4413      	add	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	440b      	add	r3, r1
 8005542:	3308      	adds	r3, #8
 8005544:	6819      	ldr	r1, [r3, #0]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	4413      	add	r3, r2
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4a08      	ldr	r2, [pc, #32]	; (8005574 <etharp_tmr+0x14c>)
 8005552:	4413      	add	r3, r2
 8005554:	3304      	adds	r3, #4
 8005556:	4608      	mov	r0, r1
 8005558:	4619      	mov	r1, r3
 800555a:	f000 fd43 	bl	8005fe4 <etharp_request>
{
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3301      	adds	r3, #1
 8005562:	607b      	str	r3, [r7, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b09      	cmp	r3, #9
 8005568:	f77f af64 	ble.w	8005434 <etharp_tmr+0xc>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
      }
    }
  }
}
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	1ffe89f4 	.word	0x1ffe89f4

08005578 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08a      	sub	sp, #40	; 0x28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	460b      	mov	r3, r1
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005586:	230a      	movs	r3, #10
 8005588:	84fb      	strh	r3, [r7, #38]	; 0x26
 800558a:	230a      	movs	r3, #10
 800558c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800558e:	230a      	movs	r3, #10
 8005590:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8005596:	230a      	movs	r3, #10
 8005598:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800559a:	2300      	movs	r3, #0
 800559c:	83bb      	strh	r3, [r7, #28]
 800559e:	2300      	movs	r3, #0
 80055a0:	837b      	strh	r3, [r7, #26]
 80055a2:	2300      	movs	r3, #0
 80055a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80055a6:	2300      	movs	r3, #0
 80055a8:	843b      	strh	r3, [r7, #32]
 80055aa:	e09f      	b.n	80056ec <etharp_find_entry+0x174>
    u8_t state = arp_table[i].state;
 80055ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80055b0:	4980      	ldr	r1, [pc, #512]	; (80057b4 <etharp_find_entry+0x23c>)
 80055b2:	4613      	mov	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	4413      	add	r3, r2
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	440b      	add	r3, r1
 80055bc:	3310      	adds	r3, #16
 80055be:	791b      	ldrb	r3, [r3, #4]
 80055c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80055c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80055c6:	2b0a      	cmp	r3, #10
 80055c8:	d105      	bne.n	80055d6 <etharp_find_entry+0x5e>
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80055d0:	8c3b      	ldrh	r3, [r7, #32]
 80055d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80055d4:	e086      	b.n	80056e4 <etharp_find_entry+0x16c>
    } else if (state != ETHARP_STATE_EMPTY) {
 80055d6:	7dfb      	ldrb	r3, [r7, #23]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 8083 	beq.w	80056e4 <etharp_find_entry+0x16c>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01e      	beq.n	8005622 <etharp_find_entry+0xaa>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6819      	ldr	r1, [r3, #0]
 80055e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80055ec:	4871      	ldr	r0, [pc, #452]	; (80057b4 <etharp_find_entry+0x23c>)
 80055ee:	4613      	mov	r3, r2
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	4413      	add	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4403      	add	r3, r0
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4299      	cmp	r1, r3
 80055fc:	d111      	bne.n	8005622 <etharp_find_entry+0xaa>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00c      	beq.n	800561e <etharp_find_entry+0xa6>
 8005604:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005608:	496a      	ldr	r1, [pc, #424]	; (80057b4 <etharp_find_entry+0x23c>)
 800560a:	4613      	mov	r3, r2
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	4413      	add	r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	440b      	add	r3, r1
 8005614:	3308      	adds	r3, #8
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d101      	bne.n	8005622 <etharp_find_entry+0xaa>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800561e:	8c3b      	ldrh	r3, [r7, #32]
 8005620:	e0c3      	b.n	80057aa <etharp_find_entry+0x232>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8005622:	7dfb      	ldrb	r3, [r7, #23]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d140      	bne.n	80056aa <etharp_find_entry+0x132>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8005628:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800562c:	4961      	ldr	r1, [pc, #388]	; (80057b4 <etharp_find_entry+0x23c>)
 800562e:	4613      	mov	r3, r2
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	4413      	add	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	440b      	add	r3, r1
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d01a      	beq.n	8005674 <etharp_find_entry+0xfc>
          if (arp_table[i].ctime >= age_queue) {
 800563e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005642:	495c      	ldr	r1, [pc, #368]	; (80057b4 <etharp_find_entry+0x23c>)
 8005644:	4613      	mov	r3, r2
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	4413      	add	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	440b      	add	r3, r1
 800564e:	3310      	adds	r3, #16
 8005650:	885b      	ldrh	r3, [r3, #2]
 8005652:	8bba      	ldrh	r2, [r7, #28]
 8005654:	429a      	cmp	r2, r3
 8005656:	d845      	bhi.n	80056e4 <etharp_find_entry+0x16c>
            old_queue = i;
 8005658:	8c3b      	ldrh	r3, [r7, #32]
 800565a:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800565c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005660:	4954      	ldr	r1, [pc, #336]	; (80057b4 <etharp_find_entry+0x23c>)
 8005662:	4613      	mov	r3, r2
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4413      	add	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	440b      	add	r3, r1
 800566c:	3310      	adds	r3, #16
 800566e:	885b      	ldrh	r3, [r3, #2]
 8005670:	83bb      	strh	r3, [r7, #28]
 8005672:	e037      	b.n	80056e4 <etharp_find_entry+0x16c>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8005674:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005678:	494e      	ldr	r1, [pc, #312]	; (80057b4 <etharp_find_entry+0x23c>)
 800567a:	4613      	mov	r3, r2
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	4413      	add	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	440b      	add	r3, r1
 8005684:	3310      	adds	r3, #16
 8005686:	885b      	ldrh	r3, [r3, #2]
 8005688:	8b7a      	ldrh	r2, [r7, #26]
 800568a:	429a      	cmp	r2, r3
 800568c:	d82a      	bhi.n	80056e4 <etharp_find_entry+0x16c>
            old_pending = i;
 800568e:	8c3b      	ldrh	r3, [r7, #32]
 8005690:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8005692:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005696:	4947      	ldr	r1, [pc, #284]	; (80057b4 <etharp_find_entry+0x23c>)
 8005698:	4613      	mov	r3, r2
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	4413      	add	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	440b      	add	r3, r1
 80056a2:	3310      	adds	r3, #16
 80056a4:	885b      	ldrh	r3, [r3, #2]
 80056a6:	837b      	strh	r3, [r7, #26]
 80056a8:	e01c      	b.n	80056e4 <etharp_find_entry+0x16c>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d919      	bls.n	80056e4 <etharp_find_entry+0x16c>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80056b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80056b4:	493f      	ldr	r1, [pc, #252]	; (80057b4 <etharp_find_entry+0x23c>)
 80056b6:	4613      	mov	r3, r2
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4413      	add	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	440b      	add	r3, r1
 80056c0:	3310      	adds	r3, #16
 80056c2:	885b      	ldrh	r3, [r3, #2]
 80056c4:	8b3a      	ldrh	r2, [r7, #24]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d80c      	bhi.n	80056e4 <etharp_find_entry+0x16c>
            old_stable = i;
 80056ca:	8c3b      	ldrh	r3, [r7, #32]
 80056cc:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80056ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80056d2:	4938      	ldr	r1, [pc, #224]	; (80057b4 <etharp_find_entry+0x23c>)
 80056d4:	4613      	mov	r3, r2
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	4413      	add	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	440b      	add	r3, r1
 80056de:	3310      	adds	r3, #16
 80056e0:	885b      	ldrh	r3, [r3, #2]
 80056e2:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80056e4:	8c3b      	ldrh	r3, [r7, #32]
 80056e6:	3301      	adds	r3, #1
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	843b      	strh	r3, [r7, #32]
 80056ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80056f0:	2b09      	cmp	r3, #9
 80056f2:	f77f af5b 	ble.w	80055ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80056f6:	7afb      	ldrb	r3, [r7, #11]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d108      	bne.n	8005712 <etharp_find_entry+0x19a>
 8005700:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005704:	2b0a      	cmp	r3, #10
 8005706:	d107      	bne.n	8005718 <etharp_find_entry+0x1a0>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8005708:	7afb      	ldrb	r3, [r7, #11]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d102      	bne.n	8005718 <etharp_find_entry+0x1a0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8005712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005716:	e048      	b.n	80057aa <etharp_find_entry+0x232>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8005718:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800571c:	2b09      	cmp	r3, #9
 800571e:	dc02      	bgt.n	8005726 <etharp_find_entry+0x1ae>
    i = empty;
 8005720:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005722:	843b      	strh	r3, [r7, #32]
 8005724:	e01c      	b.n	8005760 <etharp_find_entry+0x1e8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8005726:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800572a:	2b09      	cmp	r3, #9
 800572c:	dc02      	bgt.n	8005734 <etharp_find_entry+0x1bc>
      /* recycle oldest stable*/
      i = old_stable;
 800572e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005730:	843b      	strh	r3, [r7, #32]
 8005732:	e010      	b.n	8005756 <etharp_find_entry+0x1de>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8005734:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005738:	2b09      	cmp	r3, #9
 800573a:	dc02      	bgt.n	8005742 <etharp_find_entry+0x1ca>
      /* recycle oldest pending */
      i = old_pending;
 800573c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800573e:	843b      	strh	r3, [r7, #32]
 8005740:	e009      	b.n	8005756 <etharp_find_entry+0x1de>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8005742:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005746:	2b09      	cmp	r3, #9
 8005748:	dc02      	bgt.n	8005750 <etharp_find_entry+0x1d8>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800574a:	8bfb      	ldrh	r3, [r7, #30]
 800574c:	843b      	strh	r3, [r7, #32]
 800574e:	e002      	b.n	8005756 <etharp_find_entry+0x1de>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8005750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005754:	e029      	b.n	80057aa <etharp_find_entry+0x232>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8005756:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff fe32 	bl	80053c4 <etharp_free_entry>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <etharp_find_entry+0x204>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8005766:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6819      	ldr	r1, [r3, #0]
 800576e:	4811      	ldr	r0, [pc, #68]	; (80057b4 <etharp_find_entry+0x23c>)
 8005770:	4613      	mov	r3, r2
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	4413      	add	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4403      	add	r3, r0
 800577a:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800577c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005780:	490c      	ldr	r1, [pc, #48]	; (80057b4 <etharp_find_entry+0x23c>)
 8005782:	4613      	mov	r3, r2
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	4413      	add	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	440b      	add	r3, r1
 800578c:	3310      	adds	r3, #16
 800578e:	2200      	movs	r2, #0
 8005790:	805a      	strh	r2, [r3, #2]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8005792:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005796:	4907      	ldr	r1, [pc, #28]	; (80057b4 <etharp_find_entry+0x23c>)
 8005798:	4613      	mov	r3, r2
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	4413      	add	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	440b      	add	r3, r1
 80057a2:	3308      	adds	r3, #8
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80057a8:	8c3b      	ldrh	r3, [r7, #32]
 80057aa:	b21b      	sxth	r3, r3
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3728      	adds	r7, #40	; 0x28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	1ffe89f4 	.word	0x1ffe89f4

080057b8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	70fb      	strb	r3, [r7, #3]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d012      	beq.n	80057f2 <etharp_update_arp_entry+0x3a>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00e      	beq.n	80057f2 <etharp_update_arp_entry+0x3a>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4618      	mov	r0, r3
 80057da:	68f9      	ldr	r1, [r7, #12]
 80057dc:	f000 ffca 	bl	8006774 <ip4_addr_isbroadcast_u32>
 80057e0:	4603      	mov	r3, r0
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d105      	bne.n	80057f2 <etharp_update_arp_entry+0x3a>
      ip4_addr_isbroadcast(ipaddr, netif) ||
      ip4_addr_ismulticast(ipaddr)) {
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80057ee:	2be0      	cmp	r3, #224	; 0xe0
 80057f0:	d101      	bne.n	80057f6 <etharp_update_arp_entry+0x3e>
      ip4_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80057f2:	23f0      	movs	r3, #240	; 0xf0
 80057f4:	e06c      	b.n	80058d0 <etharp_update_arp_entry+0x118>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	68b8      	ldr	r0, [r7, #8]
 80057fa:	4619      	mov	r1, r3
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	f7ff febb 	bl	8005578 <etharp_find_entry>
 8005802:	4603      	mov	r3, r0
 8005804:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8005806:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800580a:	2b00      	cmp	r3, #0
 800580c:	da02      	bge.n	8005814 <etharp_update_arp_entry+0x5c>
    return (err_t)i;
 800580e:	8afb      	ldrh	r3, [r7, #22]
 8005810:	b2db      	uxtb	r3, r3
 8005812:	e05d      	b.n	80058d0 <etharp_update_arp_entry+0x118>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8005814:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005818:	4930      	ldr	r1, [pc, #192]	; (80058dc <etharp_update_arp_entry+0x124>)
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	440b      	add	r3, r1
 8005824:	3310      	adds	r3, #16
 8005826:	2202      	movs	r2, #2
 8005828:	711a      	strb	r2, [r3, #4]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800582a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800582e:	492b      	ldr	r1, [pc, #172]	; (80058dc <etharp_update_arp_entry+0x124>)
 8005830:	4613      	mov	r3, r2
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	4413      	add	r3, r2
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	440b      	add	r3, r1
 800583a:	3308      	adds	r3, #8
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8005840:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005844:	4613      	mov	r3, r2
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4413      	add	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	3308      	adds	r3, #8
 800584e:	4a23      	ldr	r2, [pc, #140]	; (80058dc <etharp_update_arp_entry+0x124>)
 8005850:	4413      	add	r3, r2
 8005852:	3304      	adds	r3, #4
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6811      	ldr	r1, [r2, #0]
 8005858:	6019      	str	r1, [r3, #0]
 800585a:	8892      	ldrh	r2, [r2, #4]
 800585c:	809a      	strh	r2, [r3, #4]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800585e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005862:	491e      	ldr	r1, [pc, #120]	; (80058dc <etharp_update_arp_entry+0x124>)
 8005864:	4613      	mov	r3, r2
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	4413      	add	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	440b      	add	r3, r1
 800586e:	3310      	adds	r3, #16
 8005870:	2200      	movs	r2, #0
 8005872:	805a      	strh	r2, [r3, #2]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8005874:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005878:	4918      	ldr	r1, [pc, #96]	; (80058dc <etharp_update_arp_entry+0x124>)
 800587a:	4613      	mov	r3, r2
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	4413      	add	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	440b      	add	r3, r1
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d021      	beq.n	80058ce <etharp_update_arp_entry+0x116>
    struct pbuf *p = arp_table[i].q;
 800588a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800588e:	4913      	ldr	r1, [pc, #76]	; (80058dc <etharp_update_arp_entry+0x124>)
 8005890:	4613      	mov	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	4413      	add	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	440b      	add	r3, r1
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800589e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80058a2:	490e      	ldr	r1, [pc, #56]	; (80058dc <etharp_update_arp_entry+0x124>)
 80058a4:	4613      	mov	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	4413      	add	r3, r2
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	440b      	add	r3, r1
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80058b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	6939      	ldr	r1, [r7, #16]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f7ff fd48 	bl	8005358 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80058c8:	6938      	ldr	r0, [r7, #16]
 80058ca:	f002 f825 	bl	8007918 <pbuf_free>
  }
  return ERR_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	b25b      	sxtb	r3, r3
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	1ffe89f4 	.word	0x1ffe89f4

080058e0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	e01e      	b.n	800592c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80058ee:	4912      	ldr	r1, [pc, #72]	; (8005938 <etharp_cleanup_netif+0x58>)
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4613      	mov	r3, r2
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	4413      	add	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	440b      	add	r3, r1
 80058fc:	3310      	adds	r3, #16
 80058fe:	791b      	ldrb	r3, [r3, #4]
 8005900:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8005902:	7afb      	ldrb	r3, [r7, #11]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00e      	beq.n	8005926 <etharp_cleanup_netif+0x46>
 8005908:	490b      	ldr	r1, [pc, #44]	; (8005938 <etharp_cleanup_netif+0x58>)
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4613      	mov	r3, r2
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	4413      	add	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	440b      	add	r3, r1
 8005916:	3308      	adds	r3, #8
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	429a      	cmp	r2, r3
 800591e:	d102      	bne.n	8005926 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f7ff fd4f 	bl	80053c4 <etharp_free_entry>
void
etharp_cleanup_netif(struct netif *netif)
{
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3301      	adds	r3, #1
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b09      	cmp	r3, #9
 8005930:	dddd      	ble.n	80058ee <etharp_cleanup_netif+0xe>
    u8_t state = arp_table[i].state;
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
      etharp_free_entry(i);
    }
  }
}
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	1ffe89f4 	.word	0x1ffe89f4

0800593c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800593c:	b5b0      	push	{r4, r5, r7, lr}
 800593e:	b08a      	sub	sp, #40	; 0x28
 8005940:	af04      	add	r7, sp, #16
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d100      	bne.n	800594e <etharp_input+0x12>
 800594c:	e076      	b.n	8005a3c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29b      	uxth	r3, r3
 800595a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800595e:	d10c      	bne.n	800597a <etharp_input+0x3e>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	791b      	ldrb	r3, [r3, #4]
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);

  hdr = (struct etharp_hdr *)p->payload;

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8005964:	2b06      	cmp	r3, #6
 8005966:	d108      	bne.n	800597a <etharp_input+0x3e>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	795b      	ldrb	r3, [r3, #5]

  hdr = (struct etharp_hdr *)p->payload;

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800596c:	2b04      	cmp	r3, #4
 800596e:	d104      	bne.n	800597a <etharp_input+0x3e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	885b      	ldrh	r3, [r3, #2]
 8005974:	b29b      	uxth	r3, r3
  hdr = (struct etharp_hdr *)p->payload;

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETH_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005976:	2b08      	cmp	r3, #8
 8005978:	d003      	beq.n	8005982 <etharp_input+0x46>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f001 ffcc 	bl	8007918 <pbuf_free>
    return;
 8005980:	e05c      	b.n	8005a3c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	330e      	adds	r3, #14
 8005986:	f107 020c 	add.w	r2, r7, #12
 800598a:	4610      	mov	r0, r2
 800598c:	4619      	mov	r1, r3
 800598e:	2204      	movs	r2, #4
 8005990:	f7ff fc2e 	bl	80051f0 <memcpy>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	3318      	adds	r3, #24
 8005998:	f107 0208 	add.w	r2, r7, #8
 800599c:	4610      	mov	r0, r2
 800599e:	4619      	mov	r1, r3
 80059a0:	2204      	movs	r2, #4
 80059a2:	f7ff fc25 	bl	80051f0 <memcpy>

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	3304      	adds	r3, #4
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <etharp_input+0x7a>
    for_us = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	75fb      	strb	r3, [r7, #23]
 80059b4:	e009      	b.n	80059ca <etharp_input+0x8e>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	3304      	adds	r3, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	bf0c      	ite	eq
 80059c2:	2301      	moveq	r3, #1
 80059c4:	2300      	movne	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f103 0208 	add.w	r2, r3, #8
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <etharp_input+0x9e>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <etharp_input+0xa0>
 80059da:	2302      	movs	r3, #2
 80059dc:	f107 010c 	add.w	r1, r7, #12
 80059e0:	6838      	ldr	r0, [r7, #0]
 80059e2:	f7ff fee9 	bl	80057b8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	88db      	ldrh	r3, [r3, #6]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f0:	d003      	beq.n	80059fa <etharp_input+0xbe>
 80059f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f6:	d01d      	beq.n	8005a34 <etharp_input+0xf8>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80059f8:	e01d      	b.n	8005a36 <etharp_input+0xfa>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d018      	beq.n	8005a32 <etharp_input+0xf6>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f103 0508 	add.w	r5, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	f103 0426 	add.w	r4, r3, #38	; 0x26
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	1d1a      	adds	r2, r3, #4
                   &hdr->shwaddr, &sipaddr,
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	3308      	adds	r3, #8

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
        /* send ARP response */
        etharp_raw(netif,
 8005a1a:	9200      	str	r2, [sp, #0]
 8005a1c:	9301      	str	r3, [sp, #4]
 8005a1e:	f107 030c 	add.w	r3, r7, #12
 8005a22:	9302      	str	r3, [sp, #8]
 8005a24:	2302      	movs	r3, #2
 8005a26:	9303      	str	r3, [sp, #12]
 8005a28:	6838      	ldr	r0, [r7, #0]
 8005a2a:	462a      	mov	r2, r5
 8005a2c:	4623      	mov	r3, r4
 8005a2e:	f000 fa53 	bl	8005ed8 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8005a32:	e000      	b.n	8005a36 <etharp_input+0xfa>
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 8005a34:	bf00      	nop
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
  }
  /* free ARP packet */
  pbuf_free(p);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f001 ff6e 	bl	8007918 <pbuf_free>
}
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bdb0      	pop	{r4, r5, r7, pc}
 8005a42:	bf00      	nop

08005a44 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8005a44:	b5b0      	push	{r4, r5, r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8005a52:	79fa      	ldrb	r2, [r7, #7]
 8005a54:	493b      	ldr	r1, [pc, #236]	; (8005b44 <etharp_output_to_arp_index+0x100>)
 8005a56:	4613      	mov	r3, r2
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	440b      	add	r3, r1
 8005a60:	3310      	adds	r3, #16
 8005a62:	791b      	ldrb	r3, [r3, #4]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d153      	bne.n	8005b10 <etharp_output_to_arp_index+0xcc>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005a68:	79fa      	ldrb	r2, [r7, #7]
 8005a6a:	4936      	ldr	r1, [pc, #216]	; (8005b44 <etharp_output_to_arp_index+0x100>)
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	4413      	add	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	440b      	add	r3, r1
 8005a76:	3310      	adds	r3, #16
 8005a78:	885b      	ldrh	r3, [r3, #2]
 8005a7a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8005a7e:	d919      	bls.n	8005ab4 <etharp_output_to_arp_index+0x70>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8005a80:	79fa      	ldrb	r2, [r7, #7]
 8005a82:	4613      	mov	r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4413      	add	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	4a2e      	ldr	r2, [pc, #184]	; (8005b44 <etharp_output_to_arp_index+0x100>)
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3304      	adds	r3, #4
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	4619      	mov	r1, r3
 8005a94:	f000 faa6 	bl	8005fe4 <etharp_request>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d138      	bne.n	8005b10 <etharp_output_to_arp_index+0xcc>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005a9e:	79fa      	ldrb	r2, [r7, #7]
 8005aa0:	4928      	ldr	r1, [pc, #160]	; (8005b44 <etharp_output_to_arp_index+0x100>)
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	4413      	add	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	440b      	add	r3, r1
 8005aac:	3310      	adds	r3, #16
 8005aae:	2203      	movs	r2, #3
 8005ab0:	711a      	strb	r2, [r3, #4]
 8005ab2:	e02d      	b.n	8005b10 <etharp_output_to_arp_index+0xcc>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005ab4:	79fa      	ldrb	r2, [r7, #7]
 8005ab6:	4923      	ldr	r1, [pc, #140]	; (8005b44 <etharp_output_to_arp_index+0x100>)
 8005ab8:	4613      	mov	r3, r2
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	4413      	add	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	440b      	add	r3, r1
 8005ac2:	3310      	adds	r3, #16
 8005ac4:	885b      	ldrh	r3, [r3, #2]
 8005ac6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005aca:	d321      	bcc.n	8005b10 <etharp_output_to_arp_index+0xcc>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005acc:	79fa      	ldrb	r2, [r7, #7]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	4413      	add	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4a1b      	ldr	r2, [pc, #108]	; (8005b44 <etharp_output_to_arp_index+0x100>)
 8005ad8:	4413      	add	r3, r2
 8005ada:	1d19      	adds	r1, r3, #4
 8005adc:	79fa      	ldrb	r2, [r7, #7]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	4413      	add	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	4a16      	ldr	r2, [pc, #88]	; (8005b44 <etharp_output_to_arp_index+0x100>)
 8005aea:	4413      	add	r3, r2
 8005aec:	3304      	adds	r3, #4
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	461a      	mov	r2, r3
 8005af2:	f000 fa55 	bl	8005fa0 <etharp_request_dst>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d109      	bne.n	8005b10 <etharp_output_to_arp_index+0xcc>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005afc:	79fa      	ldrb	r2, [r7, #7]
 8005afe:	4911      	ldr	r1, [pc, #68]	; (8005b44 <etharp_output_to_arp_index+0x100>)
 8005b00:	4613      	mov	r3, r2
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	4413      	add	r3, r2
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	440b      	add	r3, r1
 8005b0a:	3310      	adds	r3, #16
 8005b0c:	2203      	movs	r2, #3
 8005b0e:	711a      	strb	r2, [r3, #4]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8005b16:	79fa      	ldrb	r2, [r7, #7]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	3308      	adds	r3, #8
 8005b22:	4a08      	ldr	r2, [pc, #32]	; (8005b44 <etharp_output_to_arp_index+0x100>)
 8005b24:	4413      	add	r3, r2
 8005b26:	1d1c      	adds	r4, r3, #4
 8005b28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	68b9      	ldr	r1, [r7, #8]
 8005b32:	462a      	mov	r2, r5
 8005b34:	4623      	mov	r3, r4
 8005b36:	f7ff fc0f 	bl	8005358 <ethernet_output>
 8005b3a:	4603      	mov	r3, r0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bdb0      	pop	{r4, r5, r7, pc}
 8005b44:	1ffe89f4 	.word	0x1ffe89f4

08005b48 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08a      	sub	sp, #40	; 0x28
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	61bb      	str	r3, [r7, #24]

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	f000 fe08 	bl	8006774 <ip4_addr_isbroadcast_u32>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <etharp_output+0x28>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8005b6a:	4b60      	ldr	r3, [pc, #384]	; (8005cec <etharp_output+0x1a4>)
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	e0ac      	b.n	8005cca <etharp_output+0x182>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b78:	2be0      	cmp	r3, #224	; 0xe0
 8005b7a:	d118      	bne.n	8005bae <etharp_output+0x66>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8005b80:	2300      	movs	r3, #0
 8005b82:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8005b84:	235e      	movs	r3, #94	; 0x5e
 8005b86:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	3302      	adds	r3, #2
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3303      	adds	r3, #3
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8005ba6:	f107 0310 	add.w	r3, r7, #16
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	e08d      	b.n	8005cca <etharp_output+0x182>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	405a      	eors	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d011      	beq.n	8005bea <etharp_output+0xa2>
        !ip4_addr_islinklocal(ipaddr)) {
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005bcc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00a      	beq.n	8005bea <etharp_output+0xa2>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <etharp_output+0x9e>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	330c      	adds	r3, #12
 8005be2:	61bb      	str	r3, [r7, #24]
 8005be4:	e001      	b.n	8005bea <etharp_output+0xa2>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8005be6:	23fc      	movs	r3, #252	; 0xfc
 8005be8:	e07b      	b.n	8005ce2 <etharp_output+0x19a>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005bea:	4b41      	ldr	r3, [pc, #260]	; (8005cf0 <etharp_output+0x1a8>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4a40      	ldr	r2, [pc, #256]	; (8005cf4 <etharp_output+0x1ac>)
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	440b      	add	r3, r1
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	4413      	add	r3, r2
 8005bfc:	3310      	adds	r3, #16
 8005bfe:	791b      	ldrb	r3, [r3, #4]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d924      	bls.n	8005c4e <etharp_output+0x106>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8005c04:	4b3a      	ldr	r3, [pc, #232]	; (8005cf0 <etharp_output+0x1a8>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4a3a      	ldr	r2, [pc, #232]	; (8005cf4 <etharp_output+0x1ac>)
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	440b      	add	r3, r1
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4413      	add	r3, r2
 8005c16:	3308      	adds	r3, #8
 8005c18:	681a      	ldr	r2, [r3, #0]
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d116      	bne.n	8005c4e <etharp_output+0x106>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4b32      	ldr	r3, [pc, #200]	; (8005cf0 <etharp_output+0x1a8>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	4932      	ldr	r1, [pc, #200]	; (8005cf4 <etharp_output+0x1ac>)
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	4403      	add	r3, r0
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	440b      	add	r3, r1
 8005c36:	685b      	ldr	r3, [r3, #4]
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d108      	bne.n	8005c4e <etharp_output+0x106>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8005c3c:	4b2c      	ldr	r3, [pc, #176]	; (8005cf0 <etharp_output+0x1a8>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	461a      	mov	r2, r3
 8005c46:	f7ff fefd 	bl	8005a44 <etharp_output_to_arp_index>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	e049      	b.n	8005ce2 <etharp_output+0x19a>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8005c4e:	2300      	movs	r3, #0
 8005c50:	75fb      	strb	r3, [r7, #23]
 8005c52:	e030      	b.n	8005cb6 <etharp_output+0x16e>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005c54:	7dfa      	ldrb	r2, [r7, #23]
 8005c56:	4927      	ldr	r1, [pc, #156]	; (8005cf4 <etharp_output+0x1ac>)
 8005c58:	4613      	mov	r3, r2
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	4413      	add	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	440b      	add	r3, r1
 8005c62:	3310      	adds	r3, #16
 8005c64:	791b      	ldrb	r3, [r3, #4]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d922      	bls.n	8005cb0 <etharp_output+0x168>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8005c6a:	7dfa      	ldrb	r2, [r7, #23]
 8005c6c:	4921      	ldr	r1, [pc, #132]	; (8005cf4 <etharp_output+0x1ac>)
 8005c6e:	4613      	mov	r3, r2
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	4413      	add	r3, r2
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	440b      	add	r3, r1
 8005c78:	3308      	adds	r3, #8
 8005c7a:	681a      	ldr	r2, [r3, #0]
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d116      	bne.n	8005cb0 <etharp_output+0x168>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	6819      	ldr	r1, [r3, #0]
 8005c86:	7dfa      	ldrb	r2, [r7, #23]
 8005c88:	481a      	ldr	r0, [pc, #104]	; (8005cf4 <etharp_output+0x1ac>)
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	4413      	add	r3, r2
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	4403      	add	r3, r0
 8005c94:	685b      	ldr	r3, [r3, #4]
    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8005c96:	4299      	cmp	r1, r3
 8005c98:	d10a      	bne.n	8005cb0 <etharp_output+0x168>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8005c9a:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <etharp_output+0x1a8>)
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f7ff fecc 	bl	8005a44 <etharp_output_to_arp_index>
 8005cac:	4603      	mov	r3, r0
 8005cae:	e018      	b.n	8005ce2 <etharp_output+0x19a>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
 8005cb6:	7dfb      	ldrb	r3, [r7, #23]
 8005cb8:	2b09      	cmp	r3, #9
 8005cba:	d9cb      	bls.n	8005c54 <etharp_output+0x10c>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	69b9      	ldr	r1, [r7, #24]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	f000 f819 	bl	8005cf8 <etharp_query>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	e00b      	b.n	8005ce2 <etharp_output+0x19a>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8005cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	68b9      	ldr	r1, [r7, #8]
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	f7ff fb3c 	bl	8005358 <ethernet_output>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	b25b      	sxtb	r3, r3
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3720      	adds	r7, #32
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	080115b0 	.word	0x080115b0
 8005cf0:	1ffe8ae4 	.word	0x1ffe8ae4
 8005cf4:	1ffe89f4 	.word	0x1ffe89f4

08005cf8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8005cf8:	b590      	push	{r4, r7, lr}
 8005cfa:	b08d      	sub	sp, #52	; 0x34
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3326      	adds	r3, #38	; 0x26
 8005d08:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8005d0a:	23ff      	movs	r3, #255	; 0xff
 8005d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	68f9      	ldr	r1, [r7, #12]
 8005d1c:	f000 fd2a 	bl	8006774 <ip4_addr_isbroadcast_u32>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10c      	bne.n	8005d40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  int is_new_entry = 0;
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005d2e:	2be0      	cmp	r3, #224	; 0xe0
 8005d30:	d006      	beq.n	8005d40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <etharp_query+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8005d40:	23f0      	movs	r3, #240	; 0xf0
 8005d42:	e0c0      	b.n	8005ec6 <etharp_query+0x1ce>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8005d44:	68b8      	ldr	r0, [r7, #8]
 8005d46:	2101      	movs	r1, #1
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f7ff fc15 	bl	8005578 <etharp_find_entry>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8005d52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	da02      	bge.n	8005d60 <etharp_query+0x68>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8005d5a:	8a7b      	ldrh	r3, [r7, #18]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	e0b2      	b.n	8005ec6 <etharp_query+0x1ce>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
  i = (netif_addr_idx_t)i_err;
 8005d60:	8a7b      	ldrh	r3, [r7, #18]
 8005d62:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8005d64:	7c7a      	ldrb	r2, [r7, #17]
 8005d66:	495a      	ldr	r1, [pc, #360]	; (8005ed0 <etharp_query+0x1d8>)
 8005d68:	4613      	mov	r3, r2
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	4413      	add	r3, r2
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	440b      	add	r3, r1
 8005d72:	3310      	adds	r3, #16
 8005d74:	791b      	ldrb	r3, [r3, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d115      	bne.n	8005da6 <etharp_query+0xae>
    is_new_entry = 1;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8005d7e:	7c7a      	ldrb	r2, [r7, #17]
 8005d80:	4953      	ldr	r1, [pc, #332]	; (8005ed0 <etharp_query+0x1d8>)
 8005d82:	4613      	mov	r3, r2
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	4413      	add	r3, r2
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	440b      	add	r3, r1
 8005d8c:	3310      	adds	r3, #16
 8005d8e:	2201      	movs	r2, #1
 8005d90:	711a      	strb	r2, [r3, #4]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8005d92:	7c7a      	ldrb	r2, [r7, #17]
 8005d94:	494e      	ldr	r1, [pc, #312]	; (8005ed0 <etharp_query+0x1d8>)
 8005d96:	4613      	mov	r3, r2
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	4413      	add	r3, r2
 8005d9c:	00db      	lsls	r3, r3, #3
 8005d9e:	440b      	add	r3, r1
 8005da0:	3308      	adds	r3, #8
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d102      	bne.n	8005db2 <etharp_query+0xba>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10c      	bne.n	8005dcc <etharp_query+0xd4>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	f000 f915 	bl	8005fe4 <etharp_request>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d102      	bne.n	8005dcc <etharp_query+0xd4>
      return result;
 8005dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dca:	e07c      	b.n	8005ec6 <etharp_query+0x1ce>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8005dcc:	7c7a      	ldrb	r2, [r7, #17]
 8005dce:	4940      	ldr	r1, [pc, #256]	; (8005ed0 <etharp_query+0x1d8>)
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	4413      	add	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	440b      	add	r3, r1
 8005dda:	3310      	adds	r3, #16
 8005ddc:	791b      	ldrb	r3, [r3, #4]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d918      	bls.n	8005e14 <etharp_query+0x11c>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8005de2:	4a3c      	ldr	r2, [pc, #240]	; (8005ed4 <etharp_query+0x1dc>)
 8005de4:	7c7b      	ldrb	r3, [r7, #17]
 8005de6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8005de8:	7c7a      	ldrb	r2, [r7, #17]
 8005dea:	4613      	mov	r3, r2
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	4413      	add	r3, r2
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	3308      	adds	r3, #8
 8005df4:	4a36      	ldr	r2, [pc, #216]	; (8005ed0 <etharp_query+0x1d8>)
 8005df6:	4413      	add	r3, r2
 8005df8:	1d1c      	adds	r4, r3, #4
 8005dfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4623      	mov	r3, r4
 8005e08:	f7ff faa6 	bl	8005358 <ethernet_output>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e12:	e056      	b.n	8005ec2 <etharp_query+0x1ca>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8005e14:	7c7a      	ldrb	r2, [r7, #17]
 8005e16:	492e      	ldr	r1, [pc, #184]	; (8005ed0 <etharp_query+0x1d8>)
 8005e18:	4613      	mov	r3, r2
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	4413      	add	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	440b      	add	r3, r1
 8005e22:	3310      	adds	r3, #16
 8005e24:	791b      	ldrb	r3, [r3, #4]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d14b      	bne.n	8005ec2 <etharp_query+0x1ca>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	61fb      	str	r3, [r7, #28]
    while (p) {
 8005e32:	e00b      	b.n	8005e4c <etharp_query+0x154>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if (PBUF_NEEDS_COPY(p)) {
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	7b1b      	ldrb	r3, [r3, #12]
 8005e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <etharp_query+0x14e>
        copy_needed = 1;
 8005e40:	2301      	movs	r3, #1
 8005e42:	61bb      	str	r3, [r7, #24]
        break;
 8005e44:	e005      	b.n	8005e52 <etharp_query+0x15a>
      }
      p = p->next;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	61fb      	str	r3, [r7, #28]
    struct pbuf *p;
    int copy_needed = 0;
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
    while (p) {
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f0      	bne.n	8005e34 <etharp_query+0x13c>
        copy_needed = 1;
        break;
      }
      p = p->next;
    }
    if (copy_needed) {
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <etharp_query+0x170>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8005e58:	2010      	movs	r0, #16
 8005e5a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	f001 fef0 	bl	8007c44 <pbuf_clone>
 8005e64:	61f8      	str	r0, [r7, #28]
 8005e66:	e004      	b.n	8005e72 <etharp_query+0x17a>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8005e6c:	69f8      	ldr	r0, [r7, #28]
 8005e6e:	f001 fdb1 	bl	80079d4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d021      	beq.n	8005ebc <etharp_query+0x1c4>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8005e78:	7c7a      	ldrb	r2, [r7, #17]
 8005e7a:	4915      	ldr	r1, [pc, #84]	; (8005ed0 <etharp_query+0x1d8>)
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	4413      	add	r3, r2
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	440b      	add	r3, r1
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <etharp_query+0x1aa>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8005e8c:	7c7a      	ldrb	r2, [r7, #17]
 8005e8e:	4910      	ldr	r1, [pc, #64]	; (8005ed0 <etharp_query+0x1d8>)
 8005e90:	4613      	mov	r3, r2
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	4413      	add	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	440b      	add	r3, r1
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 fd3b 	bl	8007918 <pbuf_free>
      }
      arp_table[i].q = p;
 8005ea2:	7c7a      	ldrb	r2, [r7, #17]
 8005ea4:	490a      	ldr	r1, [pc, #40]	; (8005ed0 <etharp_query+0x1d8>)
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	4413      	add	r3, r2
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	440b      	add	r3, r1
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005eba:	e002      	b.n	8005ec2 <etharp_query+0x1ca>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8005ebc:	23ff      	movs	r3, #255	; 0xff
 8005ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8005ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ec6:	b25b      	sxtb	r3, r3
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	372c      	adds	r7, #44	; 0x2c
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd90      	pop	{r4, r7, pc}
 8005ed0:	1ffe89f4 	.word	0x1ffe89f4
 8005ed4:	1ffe8ae4 	.word	0x1ffe8ae4

08005ed8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08a      	sub	sp, #40	; 0x28
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8005eea:	2010      	movs	r0, #16
 8005eec:	211c      	movs	r1, #28
 8005eee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005ef2:	f001 faf5 	bl	80074e0 <pbuf_alloc>
 8005ef6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <etharp_raw+0x2a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8005efe:	23ff      	movs	r3, #255	; 0xff
 8005f00:	e049      	b.n	8005f96 <etharp_raw+0xbe>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8005f08:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fc74 	bl	80067f8 <lwip_htons>
 8005f10:	4603      	mov	r3, r0
 8005f12:	461a      	mov	r2, r3
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	6839      	ldr	r1, [r7, #0]
 8005f20:	2206      	movs	r2, #6
 8005f22:	f7ff f965 	bl	80051f0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	3312      	adds	r3, #18
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f2e:	2206      	movs	r2, #6
 8005f30:	f7ff f95e 	bl	80051f0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	330e      	adds	r3, #14
 8005f38:	4618      	mov	r0, r3
 8005f3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	f7ff f957 	bl	80051f0 <memcpy>
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	3318      	adds	r3, #24
 8005f46:	4618      	mov	r0, r3
 8005f48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f4a:	2204      	movs	r2, #4
 8005f4c:	f7ff f950 	bl	80051f0 <memcpy>

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2200      	movs	r2, #0
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f042 0201 	orr.w	r2, r2, #1
 8005f5c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f042 0208 	orr.w	r2, r2, #8
 8005f66:	709a      	strb	r2, [r3, #2]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2206      	movs	r2, #6
 8005f70:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2204      	movs	r2, #4
 8005f76:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005f78:	f640 0306 	movw	r3, #2054	; 0x806
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	69b9      	ldr	r1, [r7, #24]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f7ff f9e7 	bl	8005358 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8005f8a:	69b8      	ldr	r0, [r7, #24]
 8005f8c:	f001 fcc4 	bl	8007918 <pbuf_free>
  p = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8005f94:	7ffb      	ldrb	r3, [r7, #31]
 8005f96:	b25b      	sxtb	r3, r3
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3720      	adds	r7, #32
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8005fa0:	b590      	push	{r4, r7, lr}
 8005fa2:	b089      	sub	sp, #36	; 0x24
 8005fa4:	af04      	add	r7, sp, #16
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f103 0226 	add.w	r2, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f103 0426 	add.w	r4, r3, #38	; 0x26
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3304      	adds	r3, #4
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <etharp_request_dst+0x40>)
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	9302      	str	r3, [sp, #8]
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	9303      	str	r3, [sp, #12]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	4611      	mov	r1, r2
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	4623      	mov	r3, r4
 8005fd2:	f7ff ff81 	bl	8005ed8 <etharp_raw>
 8005fd6:	4603      	mov	r3, r0
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
                    ipaddr, ARP_REQUEST);
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd90      	pop	{r4, r7, pc}
 8005fe0:	080115b8 	.word	0x080115b8

08005fe4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	4a04      	ldr	r2, [pc, #16]	; (8006004 <etharp_request+0x20>)
 8005ff4:	f7ff ffd4 	bl	8005fa0 <etharp_request_dst>
 8005ff8:	4603      	mov	r3, r0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	080115b0 	.word	0x080115b0

08006008 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	; 0x38
 800600c:	af04      	add	r7, sp, #16
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8006012:	4b6d      	ldr	r3, [pc, #436]	; (80061c8 <icmp_input+0x1c0>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	b2db      	uxtb	r3, r3
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	b2db      	uxtb	r3, r3
 8006026:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8006028:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800602a:	2b13      	cmp	r3, #19
 800602c:	d800      	bhi.n	8006030 <icmp_input+0x28>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
 800602e:	e0bf      	b.n	80061b0 <icmp_input+0x1a8>
  }
  if (p->len < sizeof(u16_t) * 2) {
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	895b      	ldrh	r3, [r3, #10]
 8006034:	2b03      	cmp	r3, #3
 8006036:	d800      	bhi.n	800603a <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
 8006038:	e0ba      	b.n	80061b0 <icmp_input+0x1a8>
  }

  type = *((u8_t *)p->payload);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8006044:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 80ac 	beq.w	80061a6 <icmp_input+0x19e>
 800604e:	2b08      	cmp	r3, #8
 8006050:	d000      	beq.n	8006054 <icmp_input+0x4c>
 8006052:	e0a9      	b.n	80061a8 <icmp_input+0x1a0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8006054:	4b5d      	ldr	r3, [pc, #372]	; (80061cc <icmp_input+0x1c4>)
 8006056:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006058:	4b5b      	ldr	r3, [pc, #364]	; (80061c8 <icmp_input+0x1c0>)
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006060:	2be0      	cmp	r3, #224	; 0xe0
 8006062:	d100      	bne.n	8006066 <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
 8006064:	e0a8      	b.n	80061b8 <icmp_input+0x1b0>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8006066:	4b58      	ldr	r3, [pc, #352]	; (80061c8 <icmp_input+0x1c0>)
 8006068:	695a      	ldr	r2, [r3, #20]
 800606a:	4b57      	ldr	r3, [pc, #348]	; (80061c8 <icmp_input+0x1c0>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4610      	mov	r0, r2
 8006070:	4619      	mov	r1, r3
 8006072:	f000 fb7f 	bl	8006774 <ip4_addr_isbroadcast_u32>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d000      	beq.n	800607e <icmp_input+0x76>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
 800607c:	e09c      	b.n	80061b8 <icmp_input+0x1b0>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	891b      	ldrh	r3, [r3, #8]
 8006082:	2b07      	cmp	r3, #7
 8006084:	d800      	bhi.n	8006088 <icmp_input+0x80>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
 8006086:	e093      	b.n	80061b0 <icmp_input+0x1a8>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8006088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800608a:	3310      	adds	r3, #16
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4619      	mov	r1, r3
 8006090:	f001 fbb2 	bl	80077f8 <pbuf_add_header>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d046      	beq.n	8006128 <icmp_input+0x120>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	891a      	ldrh	r2, [r3, #8]
 800609e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060a0:	4413      	add	r3, r2
 80060a2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	891b      	ldrh	r3, [r3, #8]
 80060a8:	8b7a      	ldrh	r2, [r7, #26]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d200      	bcs.n	80060b0 <icmp_input+0xa8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
 80060ae:	e083      	b.n	80061b8 <icmp_input+0x1b0>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80060b0:	8b7b      	ldrh	r3, [r7, #26]
 80060b2:	2010      	movs	r0, #16
 80060b4:	4619      	mov	r1, r3
 80060b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80060ba:	f001 fa11 	bl	80074e0 <pbuf_alloc>
 80060be:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d100      	bne.n	80060c8 <icmp_input+0xc0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
 80060c6:	e077      	b.n	80061b8 <icmp_input+0x1b0>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	895b      	ldrh	r3, [r3, #10]
 80060cc:	461a      	mov	r2, r3
 80060ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060d0:	3308      	adds	r3, #8
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d203      	bcs.n	80060de <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80060d6:	6978      	ldr	r0, [r7, #20]
 80060d8:	f001 fc1e 	bl	8007918 <pbuf_free>
          goto icmperr;
 80060dc:	e06c      	b.n	80061b8 <icmp_input+0x1b0>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060e4:	4610      	mov	r0, r2
 80060e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060e8:	461a      	mov	r2, r3
 80060ea:	f7ff f881 	bl	80051f0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80060ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060f0:	6978      	ldr	r0, [r7, #20]
 80060f2:	4619      	mov	r1, r3
 80060f4:	f001 fb90 	bl	8007818 <pbuf_remove_header>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <icmp_input+0xfe>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
          pbuf_free(r);
 80060fe:	6978      	ldr	r0, [r7, #20]
 8006100:	f001 fc0a 	bl	8007918 <pbuf_free>
          goto icmperr;
 8006104:	e058      	b.n	80061b8 <icmp_input+0x1b0>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8006106:	6978      	ldr	r0, [r7, #20]
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	f001 fcb3 	bl	8007a74 <pbuf_copy>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <icmp_input+0x114>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8006114:	6978      	ldr	r0, [r7, #20]
 8006116:	f001 fbff 	bl	8007918 <pbuf_free>
          goto icmperr;
 800611a:	e04d      	b.n	80061b8 <icmp_input+0x1b0>
        }
        /* free the original p */
        pbuf_free(p);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 fbfb 	bl	8007918 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	607b      	str	r3, [r7, #4]
 8006126:	e009      	b.n	800613c <icmp_input+0x134>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8006128:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800612a:	3310      	adds	r3, #16
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	4619      	mov	r1, r3
 8006130:	f001 fb72 	bl	8007818 <pbuf_remove_header>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d000      	beq.n	800613c <icmp_input+0x134>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
          goto icmperr;
 800613a:	e03d      	b.n	80061b8 <icmp_input+0x1b0>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8006142:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	4619      	mov	r1, r3
 8006148:	f001 fb56 	bl	80077f8 <pbuf_add_header>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d128      	bne.n	80061a4 <icmp_input+0x19c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8006160:	4b19      	ldr	r3, [pc, #100]	; (80061c8 <icmp_input+0x1c0>)
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2200      	movs	r2, #0
 8006172:	709a      	strb	r2, [r3, #2]
 8006174:	2200      	movs	r2, #0
 8006176:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	22ff      	movs	r2, #255	; 0xff
 800617c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	729a      	strb	r2, [r3, #10]
 8006184:	2200      	movs	r2, #0
 8006186:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8006188:	2300      	movs	r3, #0
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	2301      	movs	r3, #1
 800618e:	9301      	str	r3, [sp, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	9302      	str	r3, [sp, #8]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	69f9      	ldr	r1, [r7, #28]
 8006198:	2200      	movs	r2, #0
 800619a:	23ff      	movs	r3, #255	; 0xff
 800619c:	f000 fa42 	bl	8006624 <ip4_output_if>
 80061a0:	4603      	mov	r3, r0
 80061a2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80061a4:	e000      	b.n	80061a8 <icmp_input+0x1a0>
  switch (type) {
    case ICMP_ER:
      /* This is OK, echo reply might have been parsed by a raw PCB
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
 80061a6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 fbb5 	bl	8007918 <pbuf_free>
  return;
 80061ae:	e007      	b.n	80061c0 <icmp_input+0x1b8>
lenerr:
  pbuf_free(p);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 fbb1 	bl	8007918 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80061b6:	e003      	b.n	80061c0 <icmp_input+0x1b8>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 fbad 	bl	8007918 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80061be:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80061c0:	3728      	adds	r7, #40	; 0x28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	1ffe9100 	.word	0x1ffe9100
 80061cc:	1ffe9114 	.word	0x1ffe9114

080061d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	2103      	movs	r1, #3
 80061e2:	461a      	mov	r2, r3
 80061e4:	f000 f804 	bl	80061f0 <icmp_send_response>
}
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop

080061f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08c      	sub	sp, #48	; 0x30
 80061f4:	af04      	add	r7, sp, #16
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	70fb      	strb	r3, [r7, #3]
 80061fc:	4613      	mov	r3, r2
 80061fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8006200:	2024      	movs	r0, #36	; 0x24
 8006202:	2124      	movs	r1, #36	; 0x24
 8006204:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006208:	f001 f96a 	bl	80074e0 <pbuf_alloc>
 800620c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d041      	beq.n	8006298 <icmp_send_response+0xa8>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	78fa      	ldrb	r2, [r7, #3]
 8006224:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	78ba      	ldrb	r2, [r7, #2]
 800622a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2200      	movs	r2, #0
 8006230:	711a      	strb	r2, [r3, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2200      	movs	r2, #0
 800623a:	719a      	strb	r2, [r3, #6]
 800623c:	2200      	movs	r2, #0
 800623e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f103 0208 	add.w	r2, r3, #8
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4610      	mov	r0, r2
 800624e:	4619      	mov	r1, r3
 8006250:	221c      	movs	r2, #28
 8006252:	f7fe ffcd 	bl	80051f0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800625c:	f107 030c 	add.w	r3, r7, #12
 8006260:	4618      	mov	r0, r3
 8006262:	f000 f81d 	bl	80062a0 <ip4_route>
 8006266:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d011      	beq.n	8006292 <icmp_send_response+0xa2>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2200      	movs	r2, #0
 8006272:	709a      	strb	r2, [r3, #2]
 8006274:	2200      	movs	r2, #0
 8006276:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006278:	f107 020c 	add.w	r2, r7, #12
 800627c:	2300      	movs	r3, #0
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	2301      	movs	r3, #1
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	9302      	str	r3, [sp, #8]
 8006288:	69f8      	ldr	r0, [r7, #28]
 800628a:	2100      	movs	r1, #0
 800628c:	23ff      	movs	r3, #255	; 0xff
 800628e:	f000 f9c9 	bl	8006624 <ip4_output_if>
  }
  pbuf_free(q);
 8006292:	69f8      	ldr	r0, [r7, #28]
 8006294:	f001 fb40 	bl	8007918 <pbuf_free>
}
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop

080062a0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80062a8:	4b31      	ldr	r3, [pc, #196]	; (8006370 <ip4_route+0xd0>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	e033      	b.n	8006318 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d029      	beq.n	8006312 <ip4_route+0x72>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d022      	beq.n	8006312 <ip4_route+0x72>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3304      	adds	r3, #4
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d01d      	beq.n	8006312 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3304      	adds	r3, #4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	405a      	eors	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3308      	adds	r3, #8
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	e038      	b.n	8006364 <ip4_route+0xc4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d108      	bne.n	8006312 <ip4_route+0x72>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	330c      	adds	r3, #12
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d101      	bne.n	8006312 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	e028      	b.n	8006364 <ip4_route+0xc4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1c8      	bne.n	80062b0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800631e:	4b15      	ldr	r3, [pc, #84]	; (8006374 <ip4_route+0xd4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d01a      	beq.n	800635c <ip4_route+0xbc>
 8006326:	4b13      	ldr	r3, [pc, #76]	; (8006374 <ip4_route+0xd4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d012      	beq.n	800635c <ip4_route+0xbc>
 8006336:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <ip4_route+0xd4>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8006346:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <ip4_route+0xd4>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3304      	adds	r3, #4
 800634c:	681b      	ldr	r3, [r3, #0]
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800634e:	2b00      	cmp	r3, #0
 8006350:	d004      	beq.n	800635c <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b7f      	cmp	r3, #127	; 0x7f
 800635a:	d101      	bne.n	8006360 <ip4_route+0xc0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800635c:	2300      	movs	r3, #0
 800635e:	e001      	b.n	8006364 <ip4_route+0xc4>
  }

  return netif_default;
 8006360:	4b04      	ldr	r3, [pc, #16]	; (8006374 <ip4_route+0xd4>)
 8006362:	681b      	ldr	r3, [r3, #0]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	1ffeff48 	.word	0x1ffeff48
 8006374:	1ffeff4c 	.word	0x1ffeff4c

08006378 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d016      	beq.n	80063bc <ip4_input_accept+0x44>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3304      	adds	r3, #4
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d011      	beq.n	80063bc <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006398:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <ip4_input_accept+0x50>)
 800639a:	695a      	ldr	r2, [r3, #20]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3304      	adds	r3, #4
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d008      	beq.n	80063b8 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80063a6:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <ip4_input_accept+0x50>)
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	4618      	mov	r0, r3
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	f000 f9e1 	bl	8006774 <ip4_addr_isbroadcast_u32>
 80063b2:	4603      	mov	r3, r0
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e000      	b.n	80063be <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	1ffe9100 	.word	0x1ffe9100

080063cc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	091b      	lsrs	r3, r3, #4
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d004      	beq.n	80063f2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 fa95 	bl	8007918 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	e10f      	b.n	8006612 <ip4_input+0x246>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	885b      	ldrh	r3, [r3, #2]
 8006406:	b29b      	uxth	r3, r3
 8006408:	4618      	mov	r0, r3
 800640a:	f000 f9f5 	bl	80067f8 <lwip_htons>
 800640e:	4603      	mov	r3, r0
 8006410:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	891b      	ldrh	r3, [r3, #8]
 8006416:	89ba      	ldrh	r2, [r7, #12]
 8006418:	429a      	cmp	r2, r3
 800641a:	d204      	bcs.n	8006426 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800641c:	89bb      	ldrh	r3, [r7, #12]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	4619      	mov	r1, r3
 8006422:	f001 f933 	bl	800768c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	895b      	ldrh	r3, [r3, #10]
 800642a:	89fa      	ldrh	r2, [r7, #14]
 800642c:	429a      	cmp	r2, r3
 800642e:	d807      	bhi.n	8006440 <ip4_input+0x74>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	891b      	ldrh	r3, [r3, #8]
 8006434:	89ba      	ldrh	r2, [r7, #12]
 8006436:	429a      	cmp	r2, r3
 8006438:	d802      	bhi.n	8006440 <ip4_input+0x74>
 800643a:	89fb      	ldrh	r3, [r7, #14]
 800643c:	2b13      	cmp	r3, #19
 800643e:	d804      	bhi.n	800644a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 fa69 	bl	8007918 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	e0e3      	b.n	8006612 <ip4_input+0x246>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	4a73      	ldr	r2, [pc, #460]	; (800661c <ip4_input+0x250>)
 8006450:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	4a71      	ldr	r2, [pc, #452]	; (800661c <ip4_input+0x250>)
 8006458:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800645a:	4b70      	ldr	r3, [pc, #448]	; (800661c <ip4_input+0x250>)
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006462:	2be0      	cmp	r3, #224	; 0xe0
 8006464:	d111      	bne.n	800648a <ip4_input+0xbe>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <ip4_input+0xb8>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	3304      	adds	r3, #4
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <ip4_input+0xb8>
      netif = inp;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	e028      	b.n	80064d6 <ip4_input+0x10a>
    } else {
      netif = NULL;
 8006484:	2300      	movs	r3, #0
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	e025      	b.n	80064d6 <ip4_input+0x10a>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800648a:	6838      	ldr	r0, [r7, #0]
 800648c:	f7ff ff74 	bl	8006378 <ip4_input_accept>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <ip4_input+0xd0>
      netif = inp;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	e01c      	b.n	80064d6 <ip4_input+0x10a>
    } else {
      netif = NULL;
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80064a0:	4b5e      	ldr	r3, [pc, #376]	; (800661c <ip4_input+0x250>)
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b7f      	cmp	r3, #127	; 0x7f
 80064a8:	d015      	beq.n	80064d6 <ip4_input+0x10a>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80064aa:	4b5d      	ldr	r3, [pc, #372]	; (8006620 <ip4_input+0x254>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	e00e      	b.n	80064d0 <ip4_input+0x104>
          if (netif == inp) {
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d100      	bne.n	80064bc <ip4_input+0xf0>
            /* we checked that before already */
            continue;
 80064ba:	e006      	b.n	80064ca <ip4_input+0xfe>
          }
          if (ip4_input_accept(netif)) {
 80064bc:	6978      	ldr	r0, [r7, #20]
 80064be:	f7ff ff5b 	bl	8006378 <ip4_input_accept>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d000      	beq.n	80064ca <ip4_input+0xfe>
            break;
 80064c8:	e005      	b.n	80064d6 <ip4_input+0x10a>
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1ed      	bne.n	80064b2 <ip4_input+0xe6>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80064d6:	4b51      	ldr	r3, [pc, #324]	; (800661c <ip4_input+0x250>)
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	4618      	mov	r0, r3
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	f000 f949 	bl	8006774 <ip4_addr_isbroadcast_u32>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d105      	bne.n	80064f4 <ip4_input+0x128>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80064e8:	4b4c      	ldr	r3, [pc, #304]	; (800661c <ip4_input+0x250>)
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80064f0:	2be0      	cmp	r3, #224	; 0xe0
 80064f2:	d104      	bne.n	80064fe <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f001 fa0f 	bl	8007918 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	e089      	b.n	8006612 <ip4_input+0x246>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d104      	bne.n	800650e <ip4_input+0x142>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 fa07 	bl	8007918 <pbuf_free>
    return ERR_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	e081      	b.n	8006612 <ip4_input+0x246>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	88db      	ldrh	r3, [r3, #6]
 8006512:	b29b      	uxth	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800651a:	4013      	ands	r3, r2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d004      	beq.n	800652a <ip4_input+0x15e>
    if (p == NULL) {
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
    pbuf_free(p);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f001 f9f9 	bl	8007918 <pbuf_free>
                lwip_ntohs(IPH_OFFSET(iphdr))));
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	e073      	b.n	8006612 <ip4_input+0x246>

#if LWIP_IGMP
  /* there is an extra "router alert" option in IGMP messages which we allow for but do not police */
  if ((iphdr_hlen > IP_HLEN) &&  (IPH_PROTO(iphdr) != IP_PROTO_IGMP)) {
#else
  if (iphdr_hlen > IP_HLEN) {
 800652a:	89fb      	ldrh	r3, [r7, #14]
 800652c:	2b14      	cmp	r3, #20
 800652e:	d904      	bls.n	800653a <ip4_input+0x16e>
#endif /* LWIP_IGMP */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));
    pbuf_free(p);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 f9f1 	bl	8007918 <pbuf_free>
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	e06b      	b.n	8006612 <ip4_input+0x246>
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800653a:	4a38      	ldr	r2, [pc, #224]	; (800661c <ip4_input+0x250>)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8006540:	4a36      	ldr	r2, [pc, #216]	; (800661c <ip4_input+0x250>)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8006546:	4a35      	ldr	r2, [pc, #212]	; (800661c <ip4_input+0x250>)
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	f003 030f 	and.w	r3, r3, #15
 8006554:	b2db      	uxtb	r3, r3
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	b2db      	uxtb	r3, r3
 800655a:	b29a      	uxth	r2, r3
 800655c:	4b2f      	ldr	r3, [pc, #188]	; (800661c <ip4_input+0x250>)
 800655e:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	f001 fbca 	bl	8007cfc <raw_input>
 8006568:	4603      	mov	r3, r0
 800656a:	72fb      	strb	r3, [r7, #11]
  if (raw_status != RAW_INPUT_EATEN)
 800656c:	7afb      	ldrb	r3, [r7, #11]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d03c      	beq.n	80065ec <ip4_input+0x220>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8006572:	89fb      	ldrh	r3, [r7, #14]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4619      	mov	r1, r3
 8006578:	f001 f94e 	bl	8007818 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	7a5b      	ldrb	r3, [r3, #9]
 8006580:	2b06      	cmp	r3, #6
 8006582:	d009      	beq.n	8006598 <ip4_input+0x1cc>
 8006584:	2b11      	cmp	r3, #17
 8006586:	d002      	beq.n	800658e <ip4_input+0x1c2>
 8006588:	2b01      	cmp	r3, #1
 800658a:	d00a      	beq.n	80065a2 <ip4_input+0x1d6>
 800658c:	e00e      	b.n	80065ac <ip4_input+0x1e0>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	f006 f89b 	bl	800c6cc <udp_input>
        break;
 8006596:	e029      	b.n	80065ec <ip4_input+0x220>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	f002 fdc8 	bl	8009130 <tcp_input>
        break;
 80065a0:	e024      	b.n	80065ec <ip4_input+0x220>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	f7ff fd2f 	bl	8006008 <icmp_input>
        break;
 80065aa:	e01f      	b.n	80065ec <ip4_input+0x220>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 80065ac:	7afb      	ldrb	r3, [r7, #11]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d018      	beq.n	80065e4 <ip4_input+0x218>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80065b2:	4b1a      	ldr	r3, [pc, #104]	; (800661c <ip4_input+0x250>)
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	4618      	mov	r0, r3
 80065b8:	6979      	ldr	r1, [r7, #20]
 80065ba:	f000 f8db 	bl	8006774 <ip4_addr_isbroadcast_u32>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10f      	bne.n	80065e4 <ip4_input+0x218>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80065c4:	4b15      	ldr	r3, [pc, #84]	; (800661c <ip4_input+0x250>)
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80065cc:	2be0      	cmp	r3, #224	; 0xe0
 80065ce:	d009      	beq.n	80065e4 <ip4_input+0x218>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80065d0:	89fb      	ldrh	r3, [r7, #14]
 80065d2:	b21b      	sxth	r3, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4619      	mov	r1, r3
 80065d8:	f001 f98c 	bl	80078f4 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	2102      	movs	r1, #2
 80065e0:	f7ff fdf6 	bl	80061d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 f997 	bl	8007918 <pbuf_free>
        break;
 80065ea:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80065ec:	4b0b      	ldr	r3, [pc, #44]	; (800661c <ip4_input+0x250>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80065f2:	4b0a      	ldr	r3, [pc, #40]	; (800661c <ip4_input+0x250>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80065f8:	4b08      	ldr	r3, [pc, #32]	; (800661c <ip4_input+0x250>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80065fe:	4b07      	ldr	r3, [pc, #28]	; (800661c <ip4_input+0x250>)
 8006600:	2200      	movs	r2, #0
 8006602:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8006604:	4b05      	ldr	r3, [pc, #20]	; (800661c <ip4_input+0x250>)
 8006606:	2200      	movs	r2, #0
 8006608:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800660a:	4b04      	ldr	r3, [pc, #16]	; (800661c <ip4_input+0x250>)
 800660c:	2200      	movs	r2, #0
 800660e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	b25b      	sxtb	r3, r3
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	1ffe9100 	.word	0x1ffe9100
 8006620:	1ffeff48 	.word	0x1ffeff48

08006624 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8006624:	b590      	push	{r4, r7, lr}
 8006626:	b08b      	sub	sp, #44	; 0x2c
 8006628:	af04      	add	r7, sp, #16
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d009      	beq.n	8006650 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <ip4_output_if+0x26>
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	3304      	adds	r3, #4
 800664e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8006650:	78fc      	ldrb	r4, [r7, #3]
 8006652:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800665c:	9301      	str	r3, [sp, #4]
 800665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006660:	9302      	str	r3, [sp, #8]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	6979      	ldr	r1, [r7, #20]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	4623      	mov	r3, r4
 800666a:	f000 f805 	bl	8006678 <ip4_output_if_src>
 800666e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8006670:	4618      	mov	r0, r3
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	bd90      	pop	{r4, r7, pc}

08006678 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	70fb      	strb	r3, [r7, #3]
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d054      	beq.n	8006736 <ip4_output_if_src+0xbe>
    u16_t ip_hlen = IP_HLEN;
 800668c:	2314      	movs	r3, #20
 800668e:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	2114      	movs	r1, #20
 8006694:	f001 f8b0 	bl	80077f8 <pbuf_add_header>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <ip4_output_if_src+0x2a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800669e:	23fe      	movs	r3, #254	; 0xfe
 80066a0:	e05f      	b.n	8006762 <ip4_output_if_src+0xea>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	78fa      	ldrb	r2, [r7, #3]
 80066ac:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80066b4:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80066be:	8bfb      	ldrh	r3, [r7, #30]
 80066c0:	089b      	lsrs	r3, r3, #2
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80066d6:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	891b      	ldrh	r3, [r3, #8]
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 f88b 	bl	80067f8 <lwip_htons>
 80066e2:	4603      	mov	r3, r0
 80066e4:	461a      	mov	r2, r3
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	2200      	movs	r2, #0
 80066ee:	719a      	strb	r2, [r3, #6]
 80066f0:	2200      	movs	r2, #0
 80066f2:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80066f4:	4b1d      	ldr	r3, [pc, #116]	; (800676c <ip4_output_if_src+0xf4>)
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 f87d 	bl	80067f8 <lwip_htons>
 80066fe:	4603      	mov	r3, r0
 8006700:	461a      	mov	r2, r3
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8006706:	4b19      	ldr	r3, [pc, #100]	; (800676c <ip4_output_if_src+0xf4>)
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	3301      	adds	r3, #1
 800670c:	b29a      	uxth	r2, r3
 800670e:	4b17      	ldr	r3, [pc, #92]	; (800676c <ip4_output_if_src+0xf4>)
 8006710:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d104      	bne.n	8006722 <ip4_output_if_src+0xaa>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8006718:	4b15      	ldr	r3, [pc, #84]	; (8006770 <ip4_output_if_src+0xf8>)
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	60da      	str	r2, [r3, #12]
 8006720:	e003      	b.n	800672a <ip4_output_if_src+0xb2>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	2200      	movs	r2, #0
 800672e:	729a      	strb	r2, [r3, #10]
 8006730:	2200      	movs	r2, #0
 8006732:	72da      	strb	r2, [r3, #11]
 8006734:	e00e      	b.n	8006754 <ip4_output_if_src+0xdc>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	895b      	ldrh	r3, [r3, #10]
 800673a:	2b13      	cmp	r3, #19
 800673c:	d801      	bhi.n	8006742 <ip4_output_if_src+0xca>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800673e:	23fe      	movs	r3, #254	; 0xfe
 8006740:	e00f      	b.n	8006762 <ip4_output_if_src+0xea>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800674e:	f107 0314 	add.w	r3, r7, #20
 8006752:	607b      	str	r3, [r7, #4]
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	4798      	blx	r3
 8006760:	4603      	mov	r3, r0
 8006762:	b25b      	sxtb	r3, r3
}
 8006764:	4618      	mov	r0, r3
 8006766:	3720      	adds	r7, #32
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	1ffe8ae6 	.word	0x1ffe8ae6
 8006770:	080115c0 	.word	0x080115c0

08006774 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006788:	d002      	beq.n	8006790 <ip4_addr_isbroadcast_u32+0x1c>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8006790:	2301      	movs	r3, #1
 8006792:	e02a      	b.n	80067ea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	e021      	b.n	80067ea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	3304      	adds	r3, #4
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d101      	bne.n	80067b6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e019      	b.n	80067ea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	3304      	adds	r3, #4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	405a      	eors	r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	3308      	adds	r3, #8
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4013      	ands	r3, r2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10d      	bne.n	80067e8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	3308      	adds	r3, #8
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	43da      	mvns	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	3308      	adds	r3, #8
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	43db      	mvns	r3, r3
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d101      	bne.n	80067e8 <ip4_addr_isbroadcast_u32+0x74>
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e000      	b.n	80067ea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80067e8:	2300      	movs	r3, #0
  }
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop

080067f8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006802:	88fb      	ldrh	r3, [r7, #6]
 8006804:	021b      	lsls	r3, r3, #8
 8006806:	b29a      	uxth	r2, r3
 8006808:	88fb      	ldrh	r3, [r7, #6]
 800680a:	0a1b      	lsrs	r3, r3, #8
 800680c:	b29b      	uxth	r3, r3
 800680e:	b29b      	uxth	r3, r3
 8006810:	4313      	orrs	r3, r2
 8006812:	b29b      	uxth	r3, r3
 8006814:	b29b      	uxth	r3, r3
}
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop

08006824 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	061a      	lsls	r2, r3, #24
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	431a      	orrs	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006840:	0a1b      	lsrs	r3, r3, #8
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	0e1b      	lsrs	r3, r3, #24
 8006848:	4313      	orrs	r3, r2
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop

08006858 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006862:	f000 f895 	bl	8006990 <mem_init>
  memp_init();
 8006866:	f000 fae1 	bl	8006e2c <memp_init>
  pbuf_init();
  netif_init();
 800686a:	f000 fb5d 	bl	8006f28 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800686e:	f005 fe95 	bl	800c59c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006872:	f001 fae1 	bl	8007e38 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006876:	f005 fe1f 	bl	800c4b8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	4603      	mov	r3, r0
 8006888:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800688a:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <ptr_to_mem+0x20>)
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	88fb      	ldrh	r3, [r7, #6]
 8006890:	4413      	add	r3, r2
}
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	1ffe8ae8 	.word	0x1ffe8ae8

080068a4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a05      	ldr	r2, [pc, #20]	; (80068c4 <mem_to_ptr+0x20>)
 80068b0:	6812      	ldr	r2, [r2, #0]
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	b29b      	uxth	r3, r3
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	1ffe8ae8 	.word	0x1ffe8ae8

080068c8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80068c8:	b590      	push	{r4, r7, lr}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = ptr_to_mem(mem->next);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff ffd3 	bl	8006880 <ptr_to_mem>
 80068da:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d024      	beq.n	800692e <plug_holes+0x66>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	791b      	ldrb	r3, [r3, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d120      	bne.n	800692e <plug_holes+0x66>
 80068ec:	4b26      	ldr	r3, [pc, #152]	; (8006988 <plug_holes+0xc0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d01b      	beq.n	800692e <plug_holes+0x66>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80068f6:	4b25      	ldr	r3, [pc, #148]	; (800698c <plug_holes+0xc4>)
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d102      	bne.n	8006906 <plug_holes+0x3e>
      lfree = mem;
 8006900:	4a22      	ldr	r2, [pc, #136]	; (800698c <plug_holes+0xc4>)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	881a      	ldrh	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006916:	d00a      	beq.n	800692e <plug_holes+0x66>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff ffaf 	bl	8006880 <ptr_to_mem>
 8006922:	4604      	mov	r4, r0
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff ffbd 	bl	80068a4 <mem_to_ptr>
 800692a:	4603      	mov	r3, r0
 800692c:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	885b      	ldrh	r3, [r3, #2]
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff ffa4 	bl	8006880 <ptr_to_mem>
 8006938:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	429a      	cmp	r2, r3
 8006940:	d01f      	beq.n	8006982 <plug_holes+0xba>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	791b      	ldrb	r3, [r3, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d11b      	bne.n	8006982 <plug_holes+0xba>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800694a:	4b10      	ldr	r3, [pc, #64]	; (800698c <plug_holes+0xc4>)
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	429a      	cmp	r2, r3
 8006952:	d102      	bne.n	800695a <plug_holes+0x92>
      lfree = pmem;
 8006954:	4a0d      	ldr	r2, [pc, #52]	; (800698c <plug_holes+0xc4>)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	881a      	ldrh	r2, [r3, #0]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800696a:	d00a      	beq.n	8006982 <plug_holes+0xba>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff ff85 	bl	8006880 <ptr_to_mem>
 8006976:	4604      	mov	r4, r0
 8006978:	68b8      	ldr	r0, [r7, #8]
 800697a:	f7ff ff93 	bl	80068a4 <mem_to_ptr>
 800697e:	4603      	mov	r3, r0
 8006980:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	bd90      	pop	{r4, r7, pc}
 8006988:	1ffe8aec 	.word	0x1ffe8aec
 800698c:	1ffe8af0 	.word	0x1ffe8af0

08006990 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006996:	4b18      	ldr	r3, [pc, #96]	; (80069f8 <mem_init+0x68>)
 8006998:	3303      	adds	r3, #3
 800699a:	f023 0303 	bic.w	r3, r3, #3
 800699e:	461a      	mov	r2, r3
 80069a0:	4b16      	ldr	r3, [pc, #88]	; (80069fc <mem_init+0x6c>)
 80069a2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80069a4:	4b15      	ldr	r3, [pc, #84]	; (80069fc <mem_init+0x6c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80069b0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80069be:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80069c2:	f7ff ff5d 	bl	8006880 <ptr_to_mem>
 80069c6:	4602      	mov	r2, r0
 80069c8:	4b0d      	ldr	r3, [pc, #52]	; (8006a00 <mem_init+0x70>)
 80069ca:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80069cc:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <mem_init+0x70>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2201      	movs	r2, #1
 80069d2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80069d4:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <mem_init+0x70>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80069dc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80069de:	4b08      	ldr	r3, [pc, #32]	; (8006a00 <mem_init+0x70>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80069e6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80069e8:	4b04      	ldr	r3, [pc, #16]	; (80069fc <mem_init+0x6c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a05      	ldr	r2, [pc, #20]	; (8006a04 <mem_init+0x74>)
 80069ee:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	1ffe9118 	.word	0x1ffe9118
 80069fc:	1ffe8ae8 	.word	0x1ffe8ae8
 8006a00:	1ffe8aec 	.word	0x1ffe8aec
 8006a04:	1ffe8af0 	.word	0x1ffe8af0

08006a08 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff ff47 	bl	80068a4 <mem_to_ptr>
 8006a16:	4603      	mov	r3, r0
 8006a18:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7ff ff2e 	bl	8006880 <ptr_to_mem>
 8006a24:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	885b      	ldrh	r3, [r3, #2]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff ff28 	bl	8006880 <ptr_to_mem>
 8006a30:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a3a:	d818      	bhi.n	8006a6e <mem_link_valid+0x66>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	885b      	ldrh	r3, [r3, #2]
 8006a40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a44:	d813      	bhi.n	8006a6e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	885b      	ldrh	r3, [r3, #2]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006a4a:	8afa      	ldrh	r2, [r7, #22]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d004      	beq.n	8006a5a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	8afa      	ldrh	r2, [r7, #22]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d109      	bne.n	8006a6e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006a5a:	4b08      	ldr	r3, [pc, #32]	; (8006a7c <mem_link_valid+0x74>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d006      	beq.n	8006a72 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	885b      	ldrh	r3, [r3, #2]
 8006a68:	8afa      	ldrh	r2, [r7, #22]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d001      	beq.n	8006a72 <mem_link_valid+0x6a>
    return 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e000      	b.n	8006a74 <mem_link_valid+0x6c>
  }
  return 1;
 8006a72:	2301      	movs	r3, #1
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	1ffe8aec 	.word	0x1ffe8aec

08006a80 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d100      	bne.n	8006a90 <mem_free+0x10>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
 8006a8e:	e02f      	b.n	8006af0 <mem_free+0x70>
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d000      	beq.n	8006a9c <mem_free+0x1c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006a9a:	e029      	b.n	8006af0 <mem_free+0x70>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3b08      	subs	r3, #8
 8006aa0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006aa2:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <mem_free+0x78>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d306      	bcc.n	8006aba <mem_free+0x3a>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f103 020c 	add.w	r2, r3, #12
 8006ab2:	4b12      	ldr	r3, [pc, #72]	; (8006afc <mem_free+0x7c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d900      	bls.n	8006abc <mem_free+0x3c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006aba:	e019      	b.n	8006af0 <mem_free+0x70>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	791b      	ldrb	r3, [r3, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d100      	bne.n	8006ac6 <mem_free+0x46>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006ac4:	e014      	b.n	8006af0 <mem_free+0x70>
  }

  if (!mem_link_valid(mem)) {
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f7ff ff9e 	bl	8006a08 <mem_link_valid>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d100      	bne.n	8006ad4 <mem_free+0x54>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006ad2:	e00d      	b.n	8006af0 <mem_free+0x70>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006ada:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <mem_free+0x80>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d202      	bcs.n	8006aea <mem_free+0x6a>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006ae4:	4a06      	ldr	r2, [pc, #24]	; (8006b00 <mem_free+0x80>)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f7ff feec 	bl	80068c8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	1ffe8ae8 	.word	0x1ffe8ae8
 8006afc:	1ffe8aec 	.word	0x1ffe8aec
 8006b00:	1ffe8af0 	.word	0x1ffe8af0

08006b04 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006b10:	887b      	ldrh	r3, [r7, #2]
 8006b12:	3303      	adds	r3, #3
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006b1c:	8bfb      	ldrh	r3, [r7, #30]
 8006b1e:	2b0b      	cmp	r3, #11
 8006b20:	d801      	bhi.n	8006b26 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006b22:	230c      	movs	r3, #12
 8006b24:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006b26:	8bfb      	ldrh	r3, [r7, #30]
 8006b28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006b2c:	d803      	bhi.n	8006b36 <mem_trim+0x32>
 8006b2e:	8bfa      	ldrh	r2, [r7, #30]
 8006b30:	887b      	ldrh	r3, [r7, #2]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d201      	bcs.n	8006b3a <mem_trim+0x36>
    return NULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	e099      	b.n	8006c6e <mem_trim+0x16a>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006b3a:	4b4f      	ldr	r3, [pc, #316]	; (8006c78 <mem_trim+0x174>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d304      	bcc.n	8006b4e <mem_trim+0x4a>
 8006b44:	4b4d      	ldr	r3, [pc, #308]	; (8006c7c <mem_trim+0x178>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d301      	bcc.n	8006b52 <mem_trim+0x4e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	e08d      	b.n	8006c6e <mem_trim+0x16a>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3b08      	subs	r3, #8
 8006b56:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006b58:	69b8      	ldr	r0, [r7, #24]
 8006b5a:	f7ff fea3 	bl	80068a4 <mem_to_ptr>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	881a      	ldrh	r2, [r3, #0]
 8006b66:	8afb      	ldrh	r3, [r7, #22]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	3b08      	subs	r3, #8
 8006b6e:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 8006b70:	8bfa      	ldrh	r2, [r7, #30]
 8006b72:	8abb      	ldrh	r3, [r7, #20]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d901      	bls.n	8006b7c <mem_trim+0x78>
    /* not supported */
    return NULL;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	e078      	b.n	8006c6e <mem_trim+0x16a>
  }
  if (newsize == size) {
 8006b7c:	8bfa      	ldrh	r2, [r7, #30]
 8006b7e:	8abb      	ldrh	r3, [r7, #20]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d101      	bne.n	8006b88 <mem_trim+0x84>
    /* No change in size, simply return */
    return rmem;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	e072      	b.n	8006c6e <mem_trim+0x16a>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff fe77 	bl	8006880 <ptr_to_mem>
 8006b92:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	791b      	ldrb	r3, [r3, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d134      	bne.n	8006c06 <mem_trim+0x102>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
    /* remember the old next pointer */
    next = mem2->next;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006ba2:	8afa      	ldrh	r2, [r7, #22]
 8006ba4:	8bfb      	ldrh	r3, [r7, #30]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3308      	adds	r3, #8
 8006bac:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 8006bae:	4b34      	ldr	r3, [pc, #208]	; (8006c80 <mem_trim+0x17c>)
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d106      	bne.n	8006bc6 <mem_trim+0xc2>
      lfree = ptr_to_mem(ptr2);
 8006bb8:	89bb      	ldrh	r3, [r7, #12]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff fe60 	bl	8006880 <ptr_to_mem>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	4b2f      	ldr	r3, [pc, #188]	; (8006c80 <mem_trim+0x17c>)
 8006bc4:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006bc6:	89bb      	ldrh	r3, [r7, #12]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fe59 	bl	8006880 <ptr_to_mem>
 8006bce:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	89fa      	ldrh	r2, [r7, #14]
 8006bda:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	8afa      	ldrh	r2, [r7, #22]
 8006be0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	89ba      	ldrh	r2, [r7, #12]
 8006be6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006bf0:	d008      	beq.n	8006c04 <mem_trim+0x100>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff fe42 	bl	8006880 <ptr_to_mem>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	89bb      	ldrh	r3, [r7, #12]
 8006c00:	8053      	strh	r3, [r2, #2]
 8006c02:	e033      	b.n	8006c6c <mem_trim+0x168>
 8006c04:	e032      	b.n	8006c6c <mem_trim+0x168>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006c06:	8bfb      	ldrh	r3, [r7, #30]
 8006c08:	f103 0214 	add.w	r2, r3, #20
 8006c0c:	8abb      	ldrh	r3, [r7, #20]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d82c      	bhi.n	8006c6c <mem_trim+0x168>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006c12:	8afa      	ldrh	r2, [r7, #22]
 8006c14:	8bfb      	ldrh	r3, [r7, #30]
 8006c16:	4413      	add	r3, r2
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
    mem2 = ptr_to_mem(ptr2);
 8006c1e:	89bb      	ldrh	r3, [r7, #12]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff fe2d 	bl	8006880 <ptr_to_mem>
 8006c26:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006c28:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <mem_trim+0x17c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d202      	bcs.n	8006c38 <mem_trim+0x134>
      lfree = mem2;
 8006c32:	4a13      	ldr	r2, [pc, #76]	; (8006c80 <mem_trim+0x17c>)
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	881a      	ldrh	r2, [r3, #0]
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	8afa      	ldrh	r2, [r7, #22]
 8006c4a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	89ba      	ldrh	r2, [r7, #12]
 8006c50:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006c5a:	d007      	beq.n	8006c6c <mem_trim+0x168>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff fe0d 	bl	8006880 <ptr_to_mem>
 8006c66:	4602      	mov	r2, r0
 8006c68:	89bb      	ldrh	r3, [r7, #12]
 8006c6a:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006c6c:	687b      	ldr	r3, [r7, #4]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3720      	adds	r7, #32
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	1ffe8ae8 	.word	0x1ffe8ae8
 8006c7c:	1ffe8aec 	.word	0x1ffe8aec
 8006c80:	1ffe8af0 	.word	0x1ffe8af0

08006c84 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006c8e:	88fb      	ldrh	r3, [r7, #6]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <mem_malloc+0x14>
    return NULL;
 8006c94:	2300      	movs	r3, #0
 8006c96:	e092      	b.n	8006dbe <mem_malloc+0x13a>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006c98:	88fb      	ldrh	r3, [r7, #6]
 8006c9a:	3303      	adds	r3, #3
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	f023 0303 	bic.w	r3, r3, #3
 8006ca2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006ca4:	8bbb      	ldrh	r3, [r7, #28]
 8006ca6:	2b0b      	cmp	r3, #11
 8006ca8:	d801      	bhi.n	8006cae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006caa:	230c      	movs	r3, #12
 8006cac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006cae:	8bbb      	ldrh	r3, [r7, #28]
 8006cb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006cb4:	d803      	bhi.n	8006cbe <mem_malloc+0x3a>
 8006cb6:	8bba      	ldrh	r2, [r7, #28]
 8006cb8:	88fb      	ldrh	r3, [r7, #6]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d201      	bcs.n	8006cc2 <mem_malloc+0x3e>
    return NULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e07d      	b.n	8006dbe <mem_malloc+0x13a>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006cc2:	4b41      	ldr	r3, [pc, #260]	; (8006dc8 <mem_malloc+0x144>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff fdec 	bl	80068a4 <mem_to_ptr>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	83fb      	strh	r3, [r7, #30]
 8006cd0:	e06e      	b.n	8006db0 <mem_malloc+0x12c>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006cd2:	8bfb      	ldrh	r3, [r7, #30]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7ff fdd3 	bl	8006880 <ptr_to_mem>
 8006cda:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	791b      	ldrb	r3, [r3, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d15e      	bne.n	8006da2 <mem_malloc+0x11e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	8bfb      	ldrh	r3, [r7, #30]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	f1a3 0208 	sub.w	r2, r3, #8
 8006cf2:	8bbb      	ldrh	r3, [r7, #28]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d354      	bcc.n	8006da2 <mem_malloc+0x11e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	8bfb      	ldrh	r3, [r7, #30]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	f1a3 0208 	sub.w	r2, r3, #8
 8006d06:	8bbb      	ldrh	r3, [r7, #28]
 8006d08:	3314      	adds	r3, #20
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d328      	bcc.n	8006d60 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006d0e:	8bfa      	ldrh	r2, [r7, #30]
 8006d10:	8bbb      	ldrh	r3, [r7, #28]
 8006d12:	4413      	add	r3, r2
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	3308      	adds	r3, #8
 8006d18:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006d1a:	8a7b      	ldrh	r3, [r7, #18]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff fdaf 	bl	8006880 <ptr_to_mem>
 8006d22:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	881a      	ldrh	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8bfa      	ldrh	r2, [r7, #30]
 8006d36:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	8a7a      	ldrh	r2, [r7, #18]
 8006d3c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2201      	movs	r2, #1
 8006d42:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006d4c:	d00b      	beq.n	8006d66 <mem_malloc+0xe2>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fd94 	bl	8006880 <ptr_to_mem>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	8a7b      	ldrh	r3, [r7, #18]
 8006d5c:	8053      	strh	r3, [r2, #2]
 8006d5e:	e002      	b.n	8006d66 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	2201      	movs	r2, #1
 8006d64:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006d66:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <mem_malloc+0x144>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d115      	bne.n	8006d9c <mem_malloc+0x118>
          struct mem *cur = lfree;
 8006d70:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <mem_malloc+0x144>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006d76:	e005      	b.n	8006d84 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff fd7f 	bl	8006880 <ptr_to_mem>
 8006d82:	61b8      	str	r0, [r7, #24]
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	791b      	ldrb	r3, [r3, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d004      	beq.n	8006d96 <mem_malloc+0x112>
 8006d8c:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <mem_malloc+0x148>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d1f0      	bne.n	8006d78 <mem_malloc+0xf4>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 8006d96:	4a0c      	ldr	r2, [pc, #48]	; (8006dc8 <mem_malloc+0x144>)
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	6013      	str	r3, [r2, #0]

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	3308      	adds	r3, #8
 8006da0:	e00d      	b.n	8006dbe <mem_malloc+0x13a>

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ptr_to_mem(ptr)->next) {
 8006da2:	8bfb      	ldrh	r3, [r7, #30]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff fd6b 	bl	8006880 <ptr_to_mem>
 8006daa:	4603      	mov	r3, r0
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	83fb      	strh	r3, [r7, #30]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006db0:	8bfa      	ldrh	r2, [r7, #30]
 8006db2:	8bbb      	ldrh	r3, [r7, #28]
 8006db4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d38a      	bcc.n	8006cd2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	1ffe8af0 	.word	0x1ffe8af0
 8006dcc:	1ffe8aec 	.word	0x1ffe8aec

08006dd0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	3303      	adds	r3, #3
 8006de6:	f023 0303 	bic.w	r3, r3, #3
 8006dea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006dec:	2300      	movs	r3, #0
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	e011      	b.n	8006e16 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3301      	adds	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	885b      	ldrh	r3, [r3, #2]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	dce7      	bgt.n	8006df2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006e32:	2300      	movs	r3, #0
 8006e34:	80fb      	strh	r3, [r7, #6]
 8006e36:	e009      	b.n	8006e4c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	4a07      	ldr	r2, [pc, #28]	; (8006e58 <memp_init+0x2c>)
 8006e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff ffc5 	bl	8006dd0 <memp_init_pool>
memp_init(void)
{
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006e46:	88fb      	ldrh	r3, [r7, #6]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	80fb      	strh	r3, [r7, #6]
 8006e4c:	88fb      	ldrh	r3, [r7, #6]
 8006e4e:	2b07      	cmp	r3, #7
 8006e50:	d9f2      	bls.n	8006e38 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	08011624 	.word	0x08011624

08006e5c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d006      	beq.n	8006e80 <do_memp_malloc_pool+0x24>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	6812      	ldr	r2, [r2, #0]
 8006e7a:	601a      	str	r2, [r3, #0]
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	e000      	b.n	8006e82 <do_memp_malloc_pool+0x26>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop

08006e90 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	2b07      	cmp	r3, #7
 8006e9e:	d901      	bls.n	8006ea4 <memp_malloc+0x14>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	e008      	b.n	8006eb6 <memp_malloc+0x26>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	4a06      	ldr	r2, [pc, #24]	; (8006ec0 <memp_malloc+0x30>)
 8006ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff ffd5 	bl	8006e5c <do_memp_malloc_pool>
 8006eb2:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	08011624 	.word	0x08011624

08006ec4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop

08006ef0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	6039      	str	r1, [r7, #0]
 8006efa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	2b07      	cmp	r3, #7
 8006f00:	d900      	bls.n	8006f04 <memp_free+0x14>
 8006f02:	e00b      	b.n	8006f1c <memp_free+0x2c>

  if (mem == NULL) {
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d100      	bne.n	8006f0c <memp_free+0x1c>
    return;
 8006f0a:	e007      	b.n	8006f1c <memp_free+0x2c>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	4a05      	ldr	r2, [pc, #20]	; (8006f24 <memp_free+0x34>)
 8006f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f14:	4618      	mov	r0, r3
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	f7ff ffd4 	bl	8006ec4 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	08011624 	.word	0x08011624

08006f28 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <netif_add+0x18>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e086      	b.n	800705a <netif_add+0x126>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <netif_add+0x22>
 8006f52:	2300      	movs	r3, #0
 8006f54:	e081      	b.n	800705a <netif_add+0x126>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <netif_add+0x2c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006f5c:	4b41      	ldr	r3, [pc, #260]	; (8007064 <netif_add+0x130>)
 8006f5e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <netif_add+0x36>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006f66:	4b3f      	ldr	r3, [pc, #252]	; (8007064 <netif_add+0x130>)
 8006f68:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <netif_add+0x40>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006f70:	4b3c      	ldr	r3, [pc, #240]	; (8007064 <netif_add+0x130>)
 8006f72:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	4a37      	ldr	r2, [pc, #220]	; (8007068 <netif_add+0x134>)
 8006f8a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a3a      	ldr	r2, [r7, #32]
 8006fa4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006fa6:	4b31      	ldr	r3, [pc, #196]	; (800706c <netif_add+0x138>)
 8006fa8:	781a      	ldrb	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fb4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	f000 f8dd 	bl	800717c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	4798      	blx	r3
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <netif_add+0x9e>
    return NULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	e043      	b.n	800705a <netif_add+0x126>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fd8:	2bff      	cmp	r3, #255	; 0xff
 8006fda:	d103      	bne.n	8006fe4 <netif_add+0xb0>
        netif->num = 0;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006fe8:	4b21      	ldr	r3, [pc, #132]	; (8007070 <netif_add+0x13c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	e016      	b.n	800701e <netif_add+0xea>
        LWIP_ASSERT("netif already added", netif2 != netif);
        num_netifs++;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
        if (netif2->num == netif->num) {
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007002:	429a      	cmp	r2, r3
 8007004:	d108      	bne.n	8007018 <netif_add+0xe4>
          netif->num++;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800700c:	3301      	adds	r3, #1
 800700e:	b2da      	uxtb	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007016:	e005      	b.n	8007024 <netif_add+0xf0>
    do {
      if (netif->num == 255) {
        netif->num = 0;
      }
      num_netifs = 0;
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e5      	bne.n	8006ff0 <netif_add+0xbc>
        if (netif2->num == netif->num) {
          netif->num++;
          break;
        }
      }
    } while (netif2 != NULL);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1d3      	bne.n	8006fd2 <netif_add+0x9e>
  }
  if (netif->num == 254) {
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007030:	2bfe      	cmp	r3, #254	; 0xfe
 8007032:	d103      	bne.n	800703c <netif_add+0x108>
    netif_num = 0;
 8007034:	4b0d      	ldr	r3, [pc, #52]	; (800706c <netif_add+0x138>)
 8007036:	2200      	movs	r2, #0
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	e006      	b.n	800704a <netif_add+0x116>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007042:	3301      	adds	r3, #1
 8007044:	b2da      	uxtb	r2, r3
 8007046:	4b09      	ldr	r3, [pc, #36]	; (800706c <netif_add+0x138>)
 8007048:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800704a:	4b09      	ldr	r3, [pc, #36]	; (8007070 <netif_add+0x13c>)
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007052:	4a07      	ldr	r2, [pc, #28]	; (8007070 <netif_add+0x13c>)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007058:	68fb      	ldr	r3, [r7, #12]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	080115c0 	.word	0x080115c0
 8007068:	080073cd 	.word	0x080073cd
 800706c:	1ffe8b14 	.word	0x1ffe8b14
 8007070:	1ffeff48 	.word	0x1ffeff48

08007074 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	f002 f805 	bl	8009090 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	f005 fdc7 	bl	800cc1c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	f000 fea3 	bl	8007ddc <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
}
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
  LWIP_ASSERT("invalid pointer", old_addr != NULL);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3304      	adds	r3, #4
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d01c      	beq.n	80070f0 <netif_do_set_ipaddr+0x54>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3304      	adds	r3, #4
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80070c6:	f107 0314 	add.w	r3, r7, #20
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4619      	mov	r1, r3
 80070ce:	f7ff ffd1 	bl	8007074 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <netif_do_set_ipaddr+0x42>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	e000      	b.n	80070e0 <netif_do_set_ipaddr+0x44>
 80070de:	2300      	movs	r3, #0
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	2101      	movs	r1, #1
 80070e8:	f000 f8be 	bl	8007268 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80070ec:	2301      	movs	r3, #1
 80070ee:	e000      	b.n	80070f2 <netif_do_set_ipaddr+0x56>
  }
  return 0; /* address unchanged */
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop

080070fc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3308      	adds	r3, #8
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d00a      	beq.n	800712c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <netif_do_set_netmask+0x26>
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	e000      	b.n	8007124 <netif_do_set_netmask+0x28>
 8007122:	2300      	movs	r3, #0
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007128:	2301      	movs	r3, #1
 800712a:	e000      	b.n	800712e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop

0800713c <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	330c      	adds	r3, #12
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d00a      	beq.n	800716c <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <netif_do_set_gw+0x26>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	e000      	b.n	8007164 <netif_do_set_gw+0x28>
 8007162:	2300      	movs	r3, #0
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007168:	2301      	movs	r3, #1
 800716a:	e000      	b.n	800716e <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop

0800717c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800718a:	2300      	movs	r3, #0
 800718c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800718e:	2300      	movs	r3, #0
 8007190:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007198:	4b1b      	ldr	r3, [pc, #108]	; (8007208 <netif_set_addr+0x8c>)
 800719a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80071a2:	4b19      	ldr	r3, [pc, #100]	; (8007208 <netif_set_addr+0x8c>)
 80071a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d101      	bne.n	80071b0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80071ac:	4b16      	ldr	r3, [pc, #88]	; (8007208 <netif_set_addr+0x8c>)
 80071ae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <netif_set_addr+0x42>
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <netif_set_addr+0x46>
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <netif_set_addr+0x48>
 80071c2:	2300      	movs	r3, #0
 80071c4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d006      	beq.n	80071da <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80071cc:	f107 0310 	add.w	r3, r7, #16
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	68b9      	ldr	r1, [r7, #8]
 80071d4:	461a      	mov	r2, r3
 80071d6:	f7ff ff61 	bl	800709c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	69fa      	ldr	r2, [r7, #28]
 80071e0:	f7ff ff8c 	bl	80070fc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	f7ff ffa7 	bl	800713c <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d106      	bne.n	8007202 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80071f4:	f107 0310 	add.w	r3, r7, #16
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	68b9      	ldr	r1, [r7, #8]
 80071fc:	461a      	mov	r2, r3
 80071fe:	f7ff ff4d 	bl	800709c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007202:	3720      	adds	r7, #32
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	080115c0 	.word	0x080115c0

0800720c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007214:	4a03      	ldr	r2, [pc, #12]	; (8007224 <netif_set_default+0x18>)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	1ffeff4c 	.word	0x1ffeff4c

08007228 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d100      	bne.n	8007238 <netif_set_up+0x10>
 8007236:	e013      	b.n	8007260 <netif_set_up+0x38>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10c      	bne.n	8007260 <netif_set_up+0x38>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800724c:	f043 0301 	orr.w	r3, r3, #1
 8007250:	b2da      	uxtb	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	2103      	movs	r1, #3
 800725c:	f000 f804 	bl	8007268 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop

08007268 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	d006      	beq.n	8007290 <netif_issue_reports+0x28>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007288:	f003 0301 	and.w	r3, r3, #1
netif_issue_reports(struct netif *netif, u8_t report_type)
{
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800728c:	2b00      	cmp	r3, #0
 800728e:	d100      	bne.n	8007292 <netif_issue_reports+0x2a>
      !(netif->flags & NETIF_FLAG_UP)) {
    return;
 8007290:	e016      	b.n	80072c0 <netif_issue_reports+0x58>
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b00      	cmp	r3, #0
 800729a:	d011      	beq.n	80072c0 <netif_issue_reports+0x58>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3304      	adds	r3, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
      !(netif->flags & NETIF_FLAG_UP)) {
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00c      	beq.n	80072c0 <netif_issue_reports+0x58>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072ac:	f003 0308 	and.w	r3, r3, #8
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d005      	beq.n	80072c0 <netif_issue_reports+0x58>
      etharp_gratuitous(netif);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3304      	adds	r3, #4
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	4619      	mov	r1, r3
 80072bc:	f7fe fe92 	bl	8005fe4 <etharp_request>
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop

080072c8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d100      	bne.n	80072d8 <netif_set_down+0x10>
 80072d6:	e019      	b.n	800730c <netif_set_down+0x44>

  if (netif->flags & NETIF_FLAG_UP) {
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d012      	beq.n	800730c <netif_set_down+0x44>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <netif_set_down+0x44>
      etharp_cleanup_netif(netif);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7fe faea 	bl	80058e0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop

08007314 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d100      	bne.n	8007324 <netif_set_link_up+0x10>
 8007322:	e01b      	b.n	800735c <netif_set_link_up+0x48>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	2b00      	cmp	r3, #0
 8007330:	d114      	bne.n	800735c <netif_set_link_up+0x48>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007338:	f043 0304 	orr.w	r3, r3, #4
 800733c:	b2da      	uxtb	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	2103      	movs	r1, #3
 8007348:	f7ff ff8e 	bl	8007268 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <netif_set_link_up+0x48>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop

08007364 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d100      	bne.n	8007374 <netif_set_link_down+0x10>
 8007372:	e017      	b.n	80073a4 <netif_set_link_down+0x40>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b00      	cmp	r3, #0
 8007380:	d010      	beq.n	80073a4 <netif_set_link_down+0x40>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007388:	f023 0304 	bic.w	r3, r3, #4
 800738c:	b2da      	uxtb	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <netif_set_link_down+0x40>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop

080073ac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	61da      	str	r2, [r3, #28]
  }
}
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80073d8:	23f4      	movs	r3, #244	; 0xf4
 80073da:	b25b      	sxtb	r3, r3
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4603      	mov	r3, r0
 80073f0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80073f2:	79fb      	ldrb	r3, [r7, #7]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d013      	beq.n	8007420 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80073f8:	4b0d      	ldr	r3, [pc, #52]	; (8007430 <netif_get_by_index+0x48>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	e00c      	b.n	800741a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007406:	3301      	adds	r3, #1
 8007408:	b2db      	uxtb	r3, r3
 800740a:	79fa      	ldrb	r2, [r7, #7]
 800740c:	429a      	cmp	r2, r3
 800740e:	d101      	bne.n	8007414 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	e006      	b.n	8007422 <netif_get_by_index+0x3a>
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
    NETIF_FOREACH(netif) {
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1ef      	bne.n	8007400 <netif_get_by_index+0x18>
        return netif; /* found! */
      }
    }
  }

  return NULL;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	1ffeff48 	.word	0x1ffeff48

08007434 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800743a:	4b0c      	ldr	r3, [pc, #48]	; (800746c <pbuf_free_ooseq+0x38>)
 800743c:	2200      	movs	r2, #0
 800743e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007440:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <pbuf_free_ooseq+0x3c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	607b      	str	r3, [r7, #4]
 8007446:	e00a      	b.n	800745e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 fe59 	bl	8009108 <tcp_free_ooseq>
      return;
 8007456:	e005      	b.n	8007464 <pbuf_free_ooseq+0x30>
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	607b      	str	r3, [r7, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1f1      	bne.n	8007448 <pbuf_free_ooseq+0x14>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
      return;
    }
  }
}
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	1ffeff50 	.word	0x1ffeff50
 8007470:	1ffeff58 	.word	0x1ffeff58

08007474 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007474:	b480      	push	{r7}
 8007476:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007478:	4b03      	ldr	r3, [pc, #12]	; (8007488 <pbuf_pool_is_empty+0x14>)
 800747a:	2201      	movs	r2, #1
 800747c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	1ffeff50 	.word	0x1ffeff50

0800748c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	4611      	mov	r1, r2
 8007498:	461a      	mov	r2, r3
 800749a:	460b      	mov	r3, r1
 800749c:	80fb      	strh	r3, [r7, #6]
 800749e:	4613      	mov	r3, r2
 80074a0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	88fa      	ldrh	r2, [r7, #6]
 80074b2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	88ba      	ldrh	r2, [r7, #4]
 80074b8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80074ba:	8b3b      	ldrh	r3, [r7, #24]
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	7f3a      	ldrb	r2, [r7, #28]
 80074c6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2201      	movs	r2, #1
 80074cc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	73da      	strb	r2, [r3, #15]
}
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop

080074e0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80074e0:	b590      	push	{r4, r7, lr}
 80074e2:	b08d      	sub	sp, #52	; 0x34
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	4603      	mov	r3, r0
 80074e8:	71fb      	strb	r3, [r7, #7]
 80074ea:	460b      	mov	r3, r1
 80074ec:	80bb      	strh	r3, [r7, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80074f2:	79fb      	ldrb	r3, [r7, #7]
 80074f4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80074f6:	887b      	ldrh	r3, [r7, #2]
 80074f8:	2b41      	cmp	r3, #65	; 0x41
 80074fa:	d00b      	beq.n	8007514 <pbuf_alloc+0x34>
 80074fc:	2b41      	cmp	r3, #65	; 0x41
 80074fe:	dc02      	bgt.n	8007506 <pbuf_alloc+0x26>
 8007500:	2b01      	cmp	r3, #1
 8007502:	d007      	beq.n	8007514 <pbuf_alloc+0x34>
 8007504:	e099      	b.n	800763a <pbuf_alloc+0x15a>
 8007506:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800750a:	d00c      	beq.n	8007526 <pbuf_alloc+0x46>
 800750c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007510:	d055      	beq.n	80075be <pbuf_alloc+0xde>
 8007512:	e092      	b.n	800763a <pbuf_alloc+0x15a>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007514:	88ba      	ldrh	r2, [r7, #4]
 8007516:	887b      	ldrh	r3, [r7, #2]
 8007518:	2000      	movs	r0, #0
 800751a:	4611      	mov	r1, r2
 800751c:	461a      	mov	r2, r3
 800751e:	f000 f893 	bl	8007648 <pbuf_alloc_reference>
 8007522:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8007524:	e08b      	b.n	800763e <pbuf_alloc+0x15e>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800752a:	2300      	movs	r3, #0
 800752c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800752e:	88bb      	ldrh	r3, [r7, #4]
 8007530:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007532:	2007      	movs	r0, #7
 8007534:	f7ff fcac 	bl	8006e90 <memp_malloc>
 8007538:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d109      	bne.n	8007554 <pbuf_alloc+0x74>
          PBUF_POOL_IS_EMPTY();
 8007540:	f7ff ff98 	bl	8007474 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <pbuf_alloc+0x70>
            pbuf_free(p);
 800754a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800754c:	f000 f9e4 	bl	8007918 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007550:	2300      	movs	r3, #0
 8007552:	e075      	b.n	8007640 <pbuf_alloc+0x160>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007554:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007556:	3303      	adds	r3, #3
 8007558:	b29b      	uxth	r3, r3
 800755a:	f023 0303 	bic.w	r3, r3, #3
 800755e:	b29b      	uxth	r3, r3
 8007560:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 8007564:	b29a      	uxth	r2, r3
 8007566:	8b7b      	ldrh	r3, [r7, #26]
 8007568:	4293      	cmp	r3, r2
 800756a:	bf28      	it	cs
 800756c:	4613      	movcs	r3, r2
 800756e:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007572:	3310      	adds	r3, #16
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4413      	add	r3, r2
 8007578:	3303      	adds	r3, #3
 800757a:	f023 0303 	bic.w	r3, r3, #3
 800757e:	4619      	mov	r1, r3
 8007580:	8b7a      	ldrh	r2, [r7, #26]
 8007582:	8a7c      	ldrh	r4, [r7, #18]
 8007584:	887b      	ldrh	r3, [r7, #2]
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	2300      	movs	r3, #0
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	6978      	ldr	r0, [r7, #20]
 800758e:	4623      	mov	r3, r4
 8007590:	f7ff ff7c 	bl	800748c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	2b00      	cmp	r3, #0
 8007598:	d102      	bne.n	80075a0 <pbuf_alloc+0xc0>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
 800759e:	e002      	b.n	80075a6 <pbuf_alloc+0xc6>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80075aa:	8b7a      	ldrh	r2, [r7, #26]
 80075ac:	8a7b      	ldrh	r3, [r7, #18]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80075b6:	8b7b      	ldrh	r3, [r7, #26]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1ba      	bne.n	8007532 <pbuf_alloc+0x52>
      break;
 80075bc:	e03f      	b.n	800763e <pbuf_alloc+0x15e>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80075be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075c0:	3303      	adds	r3, #3
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	f023 0303 	bic.w	r3, r3, #3
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	88bb      	ldrh	r3, [r7, #4]
 80075cc:	3303      	adds	r3, #3
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f023 0303 	bic.w	r3, r3, #3
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	4413      	add	r3, r2
 80075d8:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80075da:	8a3b      	ldrh	r3, [r7, #16]
 80075dc:	3310      	adds	r3, #16
 80075de:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80075e0:	8a3a      	ldrh	r2, [r7, #16]
 80075e2:	88bb      	ldrh	r3, [r7, #4]
 80075e4:	3303      	adds	r3, #3
 80075e6:	f023 0303 	bic.w	r3, r3, #3
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d306      	bcc.n	80075fc <pbuf_alloc+0x11c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80075ee:	89fa      	ldrh	r2, [r7, #14]
 80075f0:	88bb      	ldrh	r3, [r7, #4]
 80075f2:	3303      	adds	r3, #3
 80075f4:	f023 0303 	bic.w	r3, r3, #3
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d201      	bcs.n	8007600 <pbuf_alloc+0x120>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	e01f      	b.n	8007640 <pbuf_alloc+0x160>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007600:	89fb      	ldrh	r3, [r7, #14]
 8007602:	4618      	mov	r0, r3
 8007604:	f7ff fb3e 	bl	8006c84 <mem_malloc>
 8007608:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <pbuf_alloc+0x134>
        return NULL;
 8007610:	2300      	movs	r3, #0
 8007612:	e015      	b.n	8007640 <pbuf_alloc+0x160>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007614:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007616:	3310      	adds	r3, #16
 8007618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800761a:	4413      	add	r3, r2
 800761c:	3303      	adds	r3, #3
 800761e:	f023 0303 	bic.w	r3, r3, #3
 8007622:	4619      	mov	r1, r3
 8007624:	88ba      	ldrh	r2, [r7, #4]
 8007626:	88bc      	ldrh	r4, [r7, #4]
 8007628:	887b      	ldrh	r3, [r7, #2]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007632:	4623      	mov	r3, r4
 8007634:	f7ff ff2a 	bl	800748c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007638:	e001      	b.n	800763e <pbuf_alloc+0x15e>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
      return NULL;
 800763a:	2300      	movs	r3, #0
 800763c:	e000      	b.n	8007640 <pbuf_alloc+0x160>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007640:	4618      	mov	r0, r3
 8007642:	372c      	adds	r7, #44	; 0x2c
 8007644:	46bd      	mov	sp, r7
 8007646:	bd90      	pop	{r4, r7, pc}

08007648 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007648:	b590      	push	{r4, r7, lr}
 800764a:	b087      	sub	sp, #28
 800764c:	af02      	add	r7, sp, #8
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	807b      	strh	r3, [r7, #2]
 8007654:	4613      	mov	r3, r2
 8007656:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007658:	2006      	movs	r0, #6
 800765a:	f7ff fc19 	bl	8006e90 <memp_malloc>
 800765e:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <pbuf_alloc_reference+0x22>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007666:	2300      	movs	r3, #0
 8007668:	e00b      	b.n	8007682 <pbuf_alloc_reference+0x3a>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800766a:	887a      	ldrh	r2, [r7, #2]
 800766c:	887c      	ldrh	r4, [r7, #2]
 800766e:	883b      	ldrh	r3, [r7, #0]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	2300      	movs	r3, #0
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	6879      	ldr	r1, [r7, #4]
 800767a:	4623      	mov	r3, r4
 800767c:	f7ff ff06 	bl	800748c <pbuf_init_alloced_pbuf>
  return p;
 8007680:	68fb      	ldr	r3, [r7, #12]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	bd90      	pop	{r4, r7, pc}
 800768a:	bf00      	nop

0800768c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	807b      	strh	r3, [r7, #2]
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	891b      	ldrh	r3, [r3, #8]
 800769c:	887a      	ldrh	r2, [r7, #2]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d300      	bcc.n	80076a4 <pbuf_realloc+0x18>
    /* enlarging not yet supported */
    return;
 80076a2:	e049      	b.n	8007738 <pbuf_realloc+0xac>
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	891a      	ldrh	r2, [r3, #8]
 80076a8:	887b      	ldrh	r3, [r7, #2]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80076ae:	887b      	ldrh	r3, [r7, #2]
 80076b0:	817b      	strh	r3, [r7, #10]
  q = p;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80076b6:	e00e      	b.n	80076d6 <pbuf_realloc+0x4a>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	895b      	ldrh	r3, [r3, #10]
 80076bc:	897a      	ldrh	r2, [r7, #10]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	891a      	ldrh	r2, [r3, #8]
 80076c6:	893b      	ldrh	r3, [r7, #8]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	895b      	ldrh	r3, [r3, #10]
 80076da:	897a      	ldrh	r2, [r7, #10]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d8eb      	bhi.n	80076b8 <pbuf_realloc+0x2c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	7b1b      	ldrb	r3, [r3, #12]
 80076e4:	f003 030f 	and.w	r3, r3, #15
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d112      	bne.n	8007712 <pbuf_realloc+0x86>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	895b      	ldrh	r3, [r3, #10]
 80076f0:	897a      	ldrh	r2, [r7, #10]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d00d      	beq.n	8007712 <pbuf_realloc+0x86>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	461a      	mov	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	b29a      	uxth	r2, r3
 8007702:	897b      	ldrh	r3, [r7, #10]
 8007704:	4413      	add	r3, r2
 8007706:	b29b      	uxth	r3, r3
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	4619      	mov	r1, r3
 800770c:	f7ff f9fa 	bl	8006b04 <mem_trim>
 8007710:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	897a      	ldrh	r2, [r7, #10]
 8007716:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	895a      	ldrh	r2, [r3, #10]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d004      	beq.n	8007732 <pbuf_realloc+0xa6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4618      	mov	r0, r3
 800772e:	f000 f8f3 	bl	8007918 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]

}
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop

08007740 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	4613      	mov	r3, r2
 800774c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <pbuf_add_header_impl+0x1c>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800775a:	d301      	bcc.n	8007760 <pbuf_add_header_impl+0x20>
    return 1;
 800775c:	2301      	movs	r3, #1
 800775e:	e044      	b.n	80077ea <pbuf_add_header_impl+0xaa>
  }
  if (header_size_increment == 0) {
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <pbuf_add_header_impl+0x2a>
    return 0;
 8007766:	2300      	movs	r3, #0
 8007768:	e03f      	b.n	80077ea <pbuf_add_header_impl+0xaa>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	891a      	ldrh	r2, [r3, #8]
 8007772:	8a7b      	ldrh	r3, [r7, #18]
 8007774:	4413      	add	r3, r2
 8007776:	b29b      	uxth	r3, r3
 8007778:	8a7a      	ldrh	r2, [r7, #18]
 800777a:	429a      	cmp	r2, r3
 800777c:	d901      	bls.n	8007782 <pbuf_add_header_impl+0x42>
    return 1;
 800777e:	2301      	movs	r3, #1
 8007780:	e033      	b.n	80077ea <pbuf_add_header_impl+0xaa>
  }

  type_internal = p->type_internal;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	7b1b      	ldrb	r3, [r3, #12]
 8007786:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007788:	8a3b      	ldrh	r3, [r7, #16]
 800778a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00d      	beq.n	80077ae <pbuf_add_header_impl+0x6e>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	425b      	negs	r3, r3
 800779a:	4413      	add	r3, r2
 800779c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f103 0210 	add.w	r2, r3, #16
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d90d      	bls.n	80077c6 <pbuf_add_header_impl+0x86>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e01d      	b.n	80077ea <pbuf_add_header_impl+0xaa>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d006      	beq.n	80077c2 <pbuf_add_header_impl+0x82>
      payload = (u8_t *)p->payload - header_size_increment;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	425b      	negs	r3, r3
 80077bc:	4413      	add	r3, r2
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	e001      	b.n	80077c6 <pbuf_add_header_impl+0x86>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e011      	b.n	80077ea <pbuf_add_header_impl+0xaa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	895a      	ldrh	r2, [r3, #10]
 80077d0:	8a7b      	ldrh	r3, [r7, #18]
 80077d2:	4413      	add	r3, r2
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	891a      	ldrh	r2, [r3, #8]
 80077de:	8a7b      	ldrh	r3, [r7, #18]
 80077e0:	4413      	add	r3, r2
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	811a      	strh	r2, [r3, #8]


  return 0;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop

080077f8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	2200      	movs	r2, #0
 8007808:	f7ff ff9a 	bl	8007740 <pbuf_add_header_impl>
 800780c:	4603      	mov	r3, r0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop

08007818 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <pbuf_remove_header+0x18>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800782e:	d301      	bcc.n	8007834 <pbuf_remove_header+0x1c>
    return 1;
 8007830:	2301      	movs	r3, #1
 8007832:	e025      	b.n	8007880 <pbuf_remove_header+0x68>
  }
  if (header_size_decrement == 0) {
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <pbuf_remove_header+0x26>
    return 0;
 800783a:	2300      	movs	r3, #0
 800783c:	e020      	b.n	8007880 <pbuf_remove_header+0x68>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	895b      	ldrh	r3, [r3, #10]
 8007846:	89fa      	ldrh	r2, [r7, #14]
 8007848:	429a      	cmp	r2, r3
 800784a:	d901      	bls.n	8007850 <pbuf_remove_header+0x38>
 800784c:	2301      	movs	r3, #1
 800784e:	e017      	b.n	8007880 <pbuf_remove_header+0x68>

  /* remember current payload pointer */
  payload = p->payload;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	441a      	add	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	895a      	ldrh	r2, [r3, #10]
 8007866:	89fb      	ldrh	r3, [r7, #14]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	b29a      	uxth	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	891a      	ldrh	r2, [r3, #8]
 8007874:	89fb      	ldrh	r3, [r7, #14]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	b29a      	uxth	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	807b      	strh	r3, [r7, #2]
 8007898:	4613      	mov	r3, r2
 800789a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800789c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	da08      	bge.n	80078b6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80078a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078a8:	425b      	negs	r3, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	4619      	mov	r1, r3
 80078ae:	f7ff ffb3 	bl	8007818 <pbuf_remove_header>
 80078b2:	4603      	mov	r3, r0
 80078b4:	e008      	b.n	80078c8 <pbuf_header_impl+0x3c>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80078b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80078ba:	787b      	ldrb	r3, [r7, #1]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	4611      	mov	r1, r2
 80078c0:	461a      	mov	r2, r3
 80078c2:	f7ff ff3d 	bl	8007740 <pbuf_add_header_impl>
 80078c6:	4603      	mov	r3, r0
  }
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 0);
 80078dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	4619      	mov	r1, r3
 80078e4:	2200      	movs	r2, #0
 80078e6:	f7ff ffd1 	bl	800788c <pbuf_header_impl>
 80078ea:	4603      	mov	r3, r0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007900:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	4619      	mov	r1, r3
 8007908:	2201      	movs	r2, #1
 800790a:	f7ff ffbf 	bl	800788c <pbuf_header_impl>
 800790e:	4603      	mov	r3, r0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007926:	2300      	movs	r3, #0
 8007928:	e038      	b.n	800799c <pbuf_free+0x84>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800792e:	e031      	b.n	8007994 <pbuf_free+0x7c>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	7b9b      	ldrb	r3, [r3, #14]
 8007934:	3b01      	subs	r3, #1
 8007936:	b2da      	uxtb	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	739a      	strb	r2, [r3, #14]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	7b9b      	ldrb	r3, [r3, #14]
 8007940:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007942:	7dbb      	ldrb	r3, [r7, #22]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d123      	bne.n	8007990 <pbuf_free+0x78>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7b1b      	ldrb	r3, [r3, #12]
 8007952:	f003 030f 	and.w	r3, r3, #15
 8007956:	73fb      	strb	r3, [r7, #15]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d104      	bne.n	8007968 <pbuf_free+0x50>
          memp_free(MEMP_PBUF_POOL, p);
 800795e:	2007      	movs	r0, #7
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	f7ff fac5 	bl	8006ef0 <memp_free>
 8007966:	e00d      	b.n	8007984 <pbuf_free+0x6c>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007968:	7bfb      	ldrb	r3, [r7, #15]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d104      	bne.n	8007978 <pbuf_free+0x60>
          memp_free(MEMP_PBUF, p);
 800796e:	2006      	movs	r0, #6
 8007970:	6879      	ldr	r1, [r7, #4]
 8007972:	f7ff fabd 	bl	8006ef0 <memp_free>
 8007976:	e005      	b.n	8007984 <pbuf_free+0x6c>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <pbuf_free+0x6c>
          mem_free(p);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff f87e 	bl	8006a80 <mem_free>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	3301      	adds	r3, #1
 8007988:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	607b      	str	r3, [r7, #4]
 800798e:	e001      	b.n	8007994 <pbuf_free+0x7c>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007990:	2300      	movs	r3, #0
 8007992:	607b      	str	r3, [r7, #4]
  PERF_START;

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1ca      	bne.n	8007930 <pbuf_free+0x18>
      p = NULL;
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800799a:	7dfb      	ldrb	r3, [r7, #23]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80079b0:	e005      	b.n	80079be <pbuf_clen+0x1a>
    ++len;
 80079b2:	89fb      	ldrh	r3, [r7, #14]
 80079b4:	3301      	adds	r3, #1
 80079b6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	607b      	str	r3, [r7, #4]
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1f6      	bne.n	80079b2 <pbuf_clen+0xe>
    ++len;
    p = p->next;
  }
  return len;
 80079c4:	89fb      	ldrh	r3, [r7, #14]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop

080079d4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d005      	beq.n	80079ee <pbuf_ref+0x1a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	7b9b      	ldrb	r3, [r3, #14]
 80079e6:	3301      	adds	r3, #1
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
  }
}
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <pbuf_cat+0x16>
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d100      	bne.n	8007a10 <pbuf_cat+0x18>
 8007a0e:	e01c      	b.n	8007a4a <pbuf_cat+0x52>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	e00a      	b.n	8007a2c <pbuf_cat+0x34>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	891a      	ldrh	r2, [r3, #8]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	891b      	ldrh	r3, [r3, #8]
 8007a1e:	4413      	add	r3, r2
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	811a      	strh	r2, [r3, #8]

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1f0      	bne.n	8007a16 <pbuf_cat+0x1e>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	891a      	ldrh	r2, [r3, #8]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	891b      	ldrh	r3, [r3, #8]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	f7ff ffc9 	bl	80079f8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007a66:	6838      	ldr	r0, [r7, #0]
 8007a68:	f7ff ffb4 	bl	80079d4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop

08007a74 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	617b      	str	r3, [r7, #20]
 8007a82:	2300      	movs	r3, #0
 8007a84:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <pbuf_copy+0x2a>
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d005      	beq.n	8007a9e <pbuf_copy+0x2a>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	891a      	ldrh	r2, [r3, #8]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	891b      	ldrh	r3, [r3, #8]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d201      	bcs.n	8007aa2 <pbuf_copy+0x2e>
 8007a9e:	23f0      	movs	r3, #240	; 0xf0
 8007aa0:	e06d      	b.n	8007b7e <pbuf_copy+0x10a>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	895b      	ldrh	r3, [r3, #10]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	1ad2      	subs	r2, r2, r3
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	895b      	ldrh	r3, [r3, #10]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	1acb      	subs	r3, r1, r3
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d306      	bcc.n	8007ac8 <pbuf_copy+0x54>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	895b      	ldrh	r3, [r3, #10]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	60fb      	str	r3, [r7, #12]
 8007ac6:	e005      	b.n	8007ad4 <pbuf_copy+0x60>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	895b      	ldrh	r3, [r3, #10]
 8007acc:	461a      	mov	r2, r3
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	18d1      	adds	r1, r2, r3
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	f7fd fb81 	bl	80051f0 <memcpy>
    offset_to += len;
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4413      	add	r3, r2
 8007af4:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4413      	add	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	895b      	ldrh	r3, [r3, #10]
 8007b02:	461a      	mov	r2, r3
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d804      	bhi.n	8007b14 <pbuf_copy+0xa0>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	895b      	ldrh	r3, [r3, #10]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d10c      	bne.n	8007b3a <pbuf_copy+0xc6>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d104      	bne.n	8007b3a <pbuf_copy+0xc6>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <pbuf_copy+0xc6>
 8007b36:	23f0      	movs	r3, #240	; 0xf0
 8007b38:	e021      	b.n	8007b7e <pbuf_copy+0x10a>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00b      	beq.n	8007b58 <pbuf_copy+0xe4>
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	895a      	ldrh	r2, [r3, #10]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	891b      	ldrh	r3, [r3, #8]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d105      	bne.n	8007b58 <pbuf_copy+0xe4>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <pbuf_copy+0xe4>
 8007b54:	23fa      	movs	r3, #250	; 0xfa
 8007b56:	e012      	b.n	8007b7e <pbuf_copy+0x10a>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00b      	beq.n	8007b76 <pbuf_copy+0x102>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	895a      	ldrh	r2, [r3, #10]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	891b      	ldrh	r3, [r3, #8]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d105      	bne.n	8007b76 <pbuf_copy+0x102>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <pbuf_copy+0x102>
 8007b72:	23fa      	movs	r3, #250	; 0xfa
 8007b74:	e003      	b.n	8007b7e <pbuf_copy+0x10a>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d192      	bne.n	8007aa2 <pbuf_copy+0x2e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	b25b      	sxtb	r3, r3
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b088      	sub	sp, #32
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	4611      	mov	r1, r2
 8007b94:	461a      	mov	r2, r3
 8007b96:	460b      	mov	r3, r1
 8007b98:	80fb      	strh	r3, [r7, #6]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <pbuf_copy_partial+0x28>
 8007bac:	2300      	movs	r3, #0
 8007bae:	e045      	b.n	8007c3c <pbuf_copy_partial+0xb4>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <pbuf_copy_partial+0x32>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	e040      	b.n	8007c3c <pbuf_copy_partial+0xb4>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	61fb      	str	r3, [r7, #28]
 8007bbe:	e036      	b.n	8007c2e <pbuf_copy_partial+0xa6>
    if ((offset != 0) && (offset >= p->len)) {
 8007bc0:	88bb      	ldrh	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <pbuf_copy_partial+0x54>
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	895b      	ldrh	r3, [r3, #10]
 8007bca:	88ba      	ldrh	r2, [r7, #4]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d305      	bcc.n	8007bdc <pbuf_copy_partial+0x54>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	895b      	ldrh	r3, [r3, #10]
 8007bd4:	88ba      	ldrh	r2, [r7, #4]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	80bb      	strh	r3, [r7, #4]
 8007bda:	e025      	b.n	8007c28 <pbuf_copy_partial+0xa0>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	895a      	ldrh	r2, [r3, #10]
 8007be0:	88bb      	ldrh	r3, [r7, #4]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007be6:	8b3a      	ldrh	r2, [r7, #24]
 8007be8:	88fb      	ldrh	r3, [r7, #6]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d901      	bls.n	8007bf2 <pbuf_copy_partial+0x6a>
        buf_copy_len = len;
 8007bee:	88fb      	ldrh	r3, [r7, #6]
 8007bf0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007bf2:	8b7b      	ldrh	r3, [r7, #26]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	18d1      	adds	r1, r2, r3
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	88bb      	ldrh	r3, [r7, #4]
 8007bfe:	441a      	add	r2, r3
 8007c00:	8b3b      	ldrh	r3, [r7, #24]
 8007c02:	4608      	mov	r0, r1
 8007c04:	4611      	mov	r1, r2
 8007c06:	461a      	mov	r2, r3
 8007c08:	f7fd faf2 	bl	80051f0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007c0c:	8afa      	ldrh	r2, [r7, #22]
 8007c0e:	8b3b      	ldrh	r3, [r7, #24]
 8007c10:	4413      	add	r3, r2
 8007c12:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007c14:	8b7a      	ldrh	r2, [r7, #26]
 8007c16:	8b3b      	ldrh	r3, [r7, #24]
 8007c18:	4413      	add	r3, r2
 8007c1a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007c1c:	88fa      	ldrh	r2, [r7, #6]
 8007c1e:	8b3b      	ldrh	r3, [r7, #24]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	80bb      	strh	r3, [r7, #4]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	61fb      	str	r3, [r7, #28]
 8007c2e:	88fb      	ldrh	r3, [r7, #6]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <pbuf_copy_partial+0xb2>
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1c2      	bne.n	8007bc0 <pbuf_copy_partial+0x38>
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
 8007c3a:	8afb      	ldrh	r3, [r7, #22]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3720      	adds	r7, #32
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	603a      	str	r2, [r7, #0]
 8007c4e:	71fb      	strb	r3, [r7, #7]
 8007c50:	460b      	mov	r3, r1
 8007c52:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	891a      	ldrh	r2, [r3, #8]
 8007c58:	79f9      	ldrb	r1, [r7, #7]
 8007c5a:	88bb      	ldrh	r3, [r7, #4]
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	4611      	mov	r1, r2
 8007c60:	461a      	mov	r2, r3
 8007c62:	f7ff fc3d 	bl	80074e0 <pbuf_alloc>
 8007c66:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d101      	bne.n	8007c72 <pbuf_clone+0x2e>
    return NULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	e006      	b.n	8007c80 <pbuf_clone+0x3c>
  }
  err = pbuf_copy(q, p);
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	f7ff fefd 	bl	8007a74 <pbuf_copy>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  return q;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <raw_input_local_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	7a1b      	ldrb	r3, [r3, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00b      	beq.n	8007cb4 <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	7a1a      	ldrb	r2, [r3, #8]
 8007ca0:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <raw_input_local_match+0x70>)
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ca8:	3301      	adds	r3, #1
 8007caa:	b2db      	uxtb	r3, r3
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d001      	beq.n	8007cb4 <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
    return 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e01b      	b.n	8007cec <raw_input_local_match+0x64>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8007cb4:	78fb      	ldrb	r3, [r7, #3]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d008      	beq.n	8007ccc <raw_input_local_match+0x44>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <raw_input_local_match+0x40>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d110      	bne.n	8007cea <raw_input_local_match+0x62>
          return 1;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e00f      	b.n	8007cec <raw_input_local_match+0x64>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <raw_input_local_match+0x5e>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d005      	beq.n	8007ce6 <raw_input_local_match+0x5e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	4b06      	ldr	r3, [pc, #24]	; (8007cf8 <raw_input_local_match+0x70>)
 8007ce0:	695b      	ldr	r3, [r3, #20]
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d101      	bne.n	8007cea <raw_input_local_match+0x62>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
        return 1;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e000      	b.n	8007cec <raw_input_local_match+0x64>
      }
  }

  return 0;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	1ffe9100 	.word	0x1ffe9100

08007cfc <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8007cfc:	b590      	push	{r4, r7, lr}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
 8007d06:	2300      	movs	r3, #0
 8007d08:	73fb      	strb	r3, [r7, #15]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8007d0a:	4b31      	ldr	r3, [pc, #196]	; (8007dd0 <raw_input+0xd4>)
 8007d0c:	695a      	ldr	r2, [r3, #20]
 8007d0e:	4b30      	ldr	r3, [pc, #192]	; (8007dd0 <raw_input+0xd4>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4610      	mov	r0, r2
 8007d14:	4619      	mov	r1, r3
 8007d16:	f7fe fd2d 	bl	8006774 <ip4_addr_isbroadcast_u32>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73bb      	strb	r3, [r7, #14]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	7a5b      	ldrb	r3, [r3, #9]
 8007d24:	81bb      	strh	r3, [r7, #12]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 8007d26:	2300      	movs	r3, #0
 8007d28:	613b      	str	r3, [r7, #16]
  pcb = raw_pcbs;
 8007d2a:	4b2a      	ldr	r3, [pc, #168]	; (8007dd4 <raw_input+0xd8>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	617b      	str	r3, [r7, #20]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 8007d30:	e045      	b.n	8007dbe <raw_input+0xc2>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	7c1b      	ldrb	r3, [r3, #16]
 8007d36:	461a      	mov	r2, r3
 8007d38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d139      	bne.n	8007db4 <raw_input+0xb8>
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	6978      	ldr	r0, [r7, #20]
 8007d44:	4619      	mov	r1, r3
 8007d46:	f7ff ff9f 	bl	8007c88 <raw_input_local_match>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d031      	beq.n	8007db4 <raw_input+0xb8>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	7c5b      	ldrb	r3, [r3, #17]
 8007d54:	f003 0301 	and.w	r3, r3, #1
  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	4b1b      	ldr	r3, [pc, #108]	; (8007dd0 <raw_input+0xd4>)
 8007d62:	691b      	ldr	r3, [r3, #16]
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d125      	bne.n	8007db4 <raw_input+0xb8>
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d021      	beq.n	8007db4 <raw_input+0xb8>
        u8_t eaten;
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
 8007d70:	2302      	movs	r3, #2
 8007d72:	73fb      	strb	r3, [r7, #15]
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	695c      	ldr	r4, [r3, #20]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	6979      	ldr	r1, [r7, #20]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	4b15      	ldr	r3, [pc, #84]	; (8007dd8 <raw_input+0xdc>)
 8007d84:	47a0      	blx	r4
 8007d86:	4603      	mov	r3, r0
 8007d88:	72fb      	strb	r3, [r7, #11]
        if (eaten != 0) {
 8007d8a:	7afb      	ldrb	r3, [r7, #11]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d011      	beq.n	8007db4 <raw_input+0xb8>
          /* receive function ate the packet */
          p = NULL;
 8007d90:	2300      	movs	r3, #0
 8007d92:	607b      	str	r3, [r7, #4]
          if (prev != NULL) {
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <raw_input+0xb4>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
            prev->next = pcb->next;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 8007da2:	4b0c      	ldr	r3, [pc, #48]	; (8007dd4 <raw_input+0xd8>)
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 8007daa:	4a0a      	ldr	r2, [pc, #40]	; (8007dd4 <raw_input+0xd8>)
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	6013      	str	r3, [r2, #0]
          }
          return RAW_INPUT_EATEN;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e008      	b.n	8007dc6 <raw_input+0xca>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	613b      	str	r3, [r7, #16]
    pcb = pcb->next;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	617b      	str	r3, [r7, #20]

  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1b6      	bne.n	8007d32 <raw_input+0x36>
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
  }
  return ret;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd90      	pop	{r4, r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	1ffe9100 	.word	0x1ffe9100
 8007dd4:	1ffe8b18 	.word	0x1ffe8b18
 8007dd8:	1ffe9110 	.word	0x1ffe9110

08007ddc <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d01e      	beq.n	8007e2a <raw_netif_ip_addr_changed+0x4e>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01a      	beq.n	8007e2a <raw_netif_ip_addr_changed+0x4e>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d017      	beq.n	8007e2a <raw_netif_ip_addr_changed+0x4e>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d013      	beq.n	8007e2a <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8007e02:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <raw_netif_ip_addr_changed+0x58>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	e00c      	b.n	8007e24 <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d103      	bne.n	8007e1e <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	601a      	str	r2, [r3, #0]
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1ef      	bne.n	8007e0a <raw_netif_ip_addr_changed+0x2e>
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
      }
    }
  }
}
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	1ffe8b18 	.word	0x1ffe8b18

08007e38 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007e3c:	f007 fa5e 	bl	800f2fc <rand>
 8007e40:	4603      	mov	r3, r0
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	4b01      	ldr	r3, [pc, #4]	; (8007e58 <tcp_init+0x20>)
 8007e52:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	1ffe8904 	.word	0x1ffe8904

08007e5c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007e64:	2002      	movs	r0, #2
 8007e66:	6879      	ldr	r1, [r7, #4]
 8007e68:	f7ff f842 	bl	8006ef0 <memp_free>
}
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop

08007e74 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007e7c:	2003      	movs	r0, #3
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	f7ff f836 	bl	8006ef0 <memp_free>
}
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop

08007e8c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007e90:	f000 fd70 	bl	8008974 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007e94:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <tcp_tmr+0x28>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <tcp_tmr+0x28>)
 8007e9e:	701a      	strb	r2, [r3, #0]
 8007ea0:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <tcp_tmr+0x28>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007eac:	f000 faba 	bl	8008424 <tcp_slowtmr>
  }
}
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	1ffe8b1c 	.word	0x1ffe8b1c

08007eb8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	60fb      	str	r3, [r7, #12]
 8007ec6:	e00a      	b.n	8007ede <tcp_remove_listener+0x26>
    if (pcb->listener == lpcb) {
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d102      	bne.n	8007ed8 <tcp_remove_listener+0x20>
      pcb->listener = NULL;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	67da      	str	r2, [r3, #124]	; 0x7c
{
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1f1      	bne.n	8007ec8 <tcp_remove_listener+0x10>
    if (pcb->listener == lpcb) {
      pcb->listener = NULL;
    }
  }
}
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop

08007ef0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007ef8:	2301      	movs	r3, #1
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	e00b      	b.n	8007f16 <tcp_listen_closed+0x26>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007efe:	4a09      	ldr	r2, [pc, #36]	; (8007f24 <tcp_listen_closed+0x34>)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	f7ff ffd4 	bl	8007eb8 <tcp_remove_listener>
{
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3301      	adds	r3, #1
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d9f0      	bls.n	8007efe <tcp_listen_closed+0xe>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	0801165c 	.word	0x0801165c

08007f28 <tcp_backlog_accepted>:
 *
 * @param pcb the connection pcb which is now fully accepted (or closed/aborted)
 */
void
tcp_backlog_accepted(struct tcp_pcb *pcb)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb->flags & TF_BACKLOGPEND) != 0) {
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	8b5b      	ldrh	r3, [r3, #26]
 8007f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d010      	beq.n	8007f5e <tcp_backlog_accepted+0x36>
    if (pcb->listener != NULL) {
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00c      	beq.n	8007f5e <tcp_backlog_accepted+0x36>
      LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
      pcb->listener->accepts_pending--;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f48:	7f5a      	ldrb	r2, [r3, #29]
 8007f4a:	3a01      	subs	r2, #1
 8007f4c:	b2d2      	uxtb	r2, r2
 8007f4e:	775a      	strb	r2, [r3, #29]
      tcp_clear_flags(pcb, TF_BACKLOGPEND);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	8b5b      	ldrh	r3, [r3, #26]
 8007f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f6a:	b089      	sub	sp, #36	; 0x24
 8007f6c:	af04      	add	r7, sp, #16
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d059      	beq.n	800802e <tcp_close_shutdown+0xc6>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	7d1b      	ldrb	r3, [r3, #20]
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d003      	beq.n	8007f8a <tcp_close_shutdown+0x22>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	7d1b      	ldrb	r3, [r3, #20]
 8007f86:	2b07      	cmp	r3, #7
 8007f88:	d151      	bne.n	800802e <tcp_close_shutdown+0xc6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d104      	bne.n	8007f9c <tcp_close_shutdown+0x34>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007f9a:	d048      	beq.n	800802e <tcp_close_shutdown+0xc6>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8007fa4:	687c      	ldr	r4, [r7, #4]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	1d19      	adds	r1, r3, #4
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	8ada      	ldrh	r2, [r3, #22]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	8b1b      	ldrh	r3, [r3, #24]
 8007fb2:	9100      	str	r1, [sp, #0]
 8007fb4:	9201      	str	r2, [sp, #4]
 8007fb6:	9302      	str	r3, [sp, #8]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	4631      	mov	r1, r6
 8007fbc:	462a      	mov	r2, r5
 8007fbe:	4623      	mov	r3, r4
 8007fc0:	f004 f860 	bl	800c084 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 ff6d 	bl	8008ea4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007fca:	4b42      	ldr	r3, [pc, #264]	; (80080d4 <tcp_close_shutdown+0x16c>)
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d105      	bne.n	8007fe0 <tcp_close_shutdown+0x78>
 8007fd4:	4b3f      	ldr	r3, [pc, #252]	; (80080d4 <tcp_close_shutdown+0x16c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	4a3e      	ldr	r2, [pc, #248]	; (80080d4 <tcp_close_shutdown+0x16c>)
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	e013      	b.n	8008008 <tcp_close_shutdown+0xa0>
 8007fe0:	4b3c      	ldr	r3, [pc, #240]	; (80080d4 <tcp_close_shutdown+0x16c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	60fb      	str	r3, [r7, #12]
 8007fe6:	e00c      	b.n	8008002 <tcp_close_shutdown+0x9a>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d104      	bne.n	8007ffc <tcp_close_shutdown+0x94>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	60da      	str	r2, [r3, #12]
 8007ffa:	e005      	b.n	8008008 <tcp_close_shutdown+0xa0>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1ef      	bne.n	8007fe8 <tcp_close_shutdown+0x80>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	60da      	str	r2, [r3, #12]
 800800e:	4b32      	ldr	r3, [pc, #200]	; (80080d8 <tcp_close_shutdown+0x170>)
 8008010:	2201      	movs	r2, #1
 8008012:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008014:	4b31      	ldr	r3, [pc, #196]	; (80080dc <tcp_close_shutdown+0x174>)
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	429a      	cmp	r2, r3
 800801c:	d102      	bne.n	8008024 <tcp_close_shutdown+0xbc>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800801e:	f003 f93f 	bl	800b2a0 <tcp_trigger_input_pcb_close>
 8008022:	e002      	b.n	800802a <tcp_close_shutdown+0xc2>
      } else {
        tcp_free(pcb);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7ff ff19 	bl	8007e5c <tcp_free>
      }
      return ERR_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	e04d      	b.n	80080ca <tcp_close_shutdown+0x162>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	7d1b      	ldrb	r3, [r3, #20]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d02d      	beq.n	8008092 <tcp_close_shutdown+0x12a>
 8008036:	2b02      	cmp	r3, #2
 8008038:	d036      	beq.n	80080a8 <tcp_close_shutdown+0x140>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d13f      	bne.n	80080be <tcp_close_shutdown+0x156>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	8adb      	ldrh	r3, [r3, #22]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d021      	beq.n	800808a <tcp_close_shutdown+0x122>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008046:	4b26      	ldr	r3, [pc, #152]	; (80080e0 <tcp_close_shutdown+0x178>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	d105      	bne.n	800805c <tcp_close_shutdown+0xf4>
 8008050:	4b23      	ldr	r3, [pc, #140]	; (80080e0 <tcp_close_shutdown+0x178>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	4a22      	ldr	r2, [pc, #136]	; (80080e0 <tcp_close_shutdown+0x178>)
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	e013      	b.n	8008084 <tcp_close_shutdown+0x11c>
 800805c:	4b20      	ldr	r3, [pc, #128]	; (80080e0 <tcp_close_shutdown+0x178>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	60bb      	str	r3, [r7, #8]
 8008062:	e00c      	b.n	800807e <tcp_close_shutdown+0x116>
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	429a      	cmp	r2, r3
 800806c:	d104      	bne.n	8008078 <tcp_close_shutdown+0x110>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	60da      	str	r2, [r3, #12]
 8008076:	e005      	b.n	8008084 <tcp_close_shutdown+0x11c>
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	60bb      	str	r3, [r7, #8]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1ef      	bne.n	8008064 <tcp_close_shutdown+0xfc>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7ff fee6 	bl	8007e5c <tcp_free>
      break;
 8008090:	e01a      	b.n	80080c8 <tcp_close_shutdown+0x160>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7ff ff2c 	bl	8007ef0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008098:	4812      	ldr	r0, [pc, #72]	; (80080e4 <tcp_close_shutdown+0x17c>)
 800809a:	6879      	ldr	r1, [r7, #4]
 800809c:	f000 ff48 	bl	8008f30 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff fee7 	bl	8007e74 <tcp_free_listen>
      break;
 80080a6:	e00f      	b.n	80080c8 <tcp_close_shutdown+0x160>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80080a8:	480a      	ldr	r0, [pc, #40]	; (80080d4 <tcp_close_shutdown+0x16c>)
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	f000 ff40 	bl	8008f30 <tcp_pcb_remove>
 80080b0:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <tcp_close_shutdown+0x170>)
 80080b2:	2201      	movs	r2, #1
 80080b4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7ff fed0 	bl	8007e5c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80080bc:	e004      	b.n	80080c8 <tcp_close_shutdown+0x160>
    default:
      return tcp_close_shutdown_fin(pcb);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f812 	bl	80080e8 <tcp_close_shutdown_fin>
 80080c4:	4603      	mov	r3, r0
 80080c6:	e000      	b.n	80080ca <tcp_close_shutdown+0x162>
  }
  return ERR_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	b25b      	sxtb	r3, r3
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d4:	1ffeff58 	.word	0x1ffeff58
 80080d8:	1ffeff54 	.word	0x1ffeff54
 80080dc:	1ffeff6c 	.word	0x1ffeff6c
 80080e0:	1ffeff64 	.word	0x1ffeff64
 80080e4:	1ffeff60 	.word	0x1ffeff60

080080e8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);

  switch (pcb->state) {
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	7d1b      	ldrb	r3, [r3, #20]
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	d014      	beq.n	8008122 <tcp_close_shutdown_fin+0x3a>
 80080f8:	2b07      	cmp	r3, #7
 80080fa:	d020      	beq.n	800813e <tcp_close_shutdown_fin+0x56>
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d12c      	bne.n	800815a <tcp_close_shutdown_fin+0x72>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f003 fa77 	bl	800b5f4 <tcp_send_fin>
 8008106:	4603      	mov	r3, r0
 8008108:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800810a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d106      	bne.n	8008120 <tcp_close_shutdown_fin+0x38>
        tcp_backlog_accepted(pcb);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff ff08 	bl	8007f28 <tcp_backlog_accepted>
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2205      	movs	r2, #5
 800811c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800811e:	e01e      	b.n	800815e <tcp_close_shutdown_fin+0x76>
 8008120:	e01d      	b.n	800815e <tcp_close_shutdown_fin+0x76>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f003 fa66 	bl	800b5f4 <tcp_send_fin>
 8008128:	4603      	mov	r3, r0
 800812a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800812c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d103      	bne.n	800813c <tcp_close_shutdown_fin+0x54>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2205      	movs	r2, #5
 8008138:	751a      	strb	r2, [r3, #20]
      }
      break;
 800813a:	e010      	b.n	800815e <tcp_close_shutdown_fin+0x76>
 800813c:	e00f      	b.n	800815e <tcp_close_shutdown_fin+0x76>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f003 fa58 	bl	800b5f4 <tcp_send_fin>
 8008144:	4603      	mov	r3, r0
 8008146:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d103      	bne.n	8008158 <tcp_close_shutdown_fin+0x70>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2209      	movs	r2, #9
 8008154:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008156:	e002      	b.n	800815e <tcp_close_shutdown_fin+0x76>
 8008158:	e001      	b.n	800815e <tcp_close_shutdown_fin+0x76>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	e016      	b.n	800818c <tcp_close_shutdown_fin+0xa4>
  }

  if (err == ERR_OK) {
 800815e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d103      	bne.n	800816e <tcp_close_shutdown_fin+0x86>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f003 fb14 	bl	800b794 <tcp_output>
 800816c:	e00d      	b.n	800818a <tcp_close_shutdown_fin+0xa2>
  } else if (err == ERR_MEM) {
 800816e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008176:	d108      	bne.n	800818a <tcp_close_shutdown_fin+0xa2>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	8b5b      	ldrh	r3, [r3, #26]
 800817c:	f043 0308 	orr.w	r3, r3, #8
 8008180:	b29a      	uxth	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	e000      	b.n	800818c <tcp_close_shutdown_fin+0xa4>
  }
  return err;
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	b25b      	sxtb	r3, r3
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop

08008198 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <tcp_close+0x12>
 80081a6:	23f0      	movs	r3, #240	; 0xf0
 80081a8:	e00f      	b.n	80081ca <tcp_close+0x32>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	7d1b      	ldrb	r3, [r3, #20]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d006      	beq.n	80081c0 <tcp_close+0x28>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	8b5b      	ldrh	r3, [r3, #26]
 80081b6:	f043 0310 	orr.w	r3, r3, #16
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	2101      	movs	r1, #1
 80081c4:	f7ff fed0 	bl	8007f68 <tcp_close_shutdown>
 80081c8:	4603      	mov	r3, r0
 80081ca:	b25b      	sxtb	r3, r3
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80081d4:	b590      	push	{r4, r7, lr}
 80081d6:	b08f      	sub	sp, #60	; 0x3c
 80081d8:	af04      	add	r7, sp, #16
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d100      	bne.n	80081e6 <tcp_abandon+0x12>
 80081e4:	e091      	b.n	800830a <tcp_abandon+0x136>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	7d1b      	ldrb	r3, [r3, #20]
 80081ea:	2b0a      	cmp	r3, #10
 80081ec:	d107      	bne.n	80081fe <tcp_abandon+0x2a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80081ee:	4848      	ldr	r0, [pc, #288]	; (8008310 <tcp_abandon+0x13c>)
 80081f0:	6879      	ldr	r1, [r7, #4]
 80081f2:	f000 fe9d 	bl	8008f30 <tcp_pcb_remove>
    tcp_free(pcb);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7ff fe30 	bl	8007e5c <tcp_free>
 80081fc:	e085      	b.n	800830a <tcp_abandon+0x136>
  } else {
    int send_rst = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008202:	2300      	movs	r3, #0
 8008204:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008218:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	7d1b      	ldrb	r3, [r3, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d126      	bne.n	8008276 <tcp_abandon+0xa2>
      if (pcb->local_port != 0) {
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	8adb      	ldrh	r3, [r3, #22]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d02e      	beq.n	800828e <tcp_abandon+0xba>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008230:	4b38      	ldr	r3, [pc, #224]	; (8008314 <tcp_abandon+0x140>)
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	429a      	cmp	r2, r3
 8008238:	d105      	bne.n	8008246 <tcp_abandon+0x72>
 800823a:	4b36      	ldr	r3, [pc, #216]	; (8008314 <tcp_abandon+0x140>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	4a34      	ldr	r2, [pc, #208]	; (8008314 <tcp_abandon+0x140>)
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	e013      	b.n	800826e <tcp_abandon+0x9a>
 8008246:	4b33      	ldr	r3, [pc, #204]	; (8008314 <tcp_abandon+0x140>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	61fb      	str	r3, [r7, #28]
 800824c:	e00c      	b.n	8008268 <tcp_abandon+0x94>
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	68da      	ldr	r2, [r3, #12]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	429a      	cmp	r2, r3
 8008256:	d104      	bne.n	8008262 <tcp_abandon+0x8e>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68da      	ldr	r2, [r3, #12]
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	60da      	str	r2, [r3, #12]
 8008260:	e005      	b.n	800826e <tcp_abandon+0x9a>
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	61fb      	str	r3, [r7, #28]
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1ef      	bne.n	800824e <tcp_abandon+0x7a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	60da      	str	r2, [r3, #12]
 8008274:	e00b      	b.n	800828e <tcp_abandon+0xba>
      }
    } else {
      send_rst = reset;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	8adb      	ldrh	r3, [r3, #22]
 800827e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008280:	4825      	ldr	r0, [pc, #148]	; (8008318 <tcp_abandon+0x144>)
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	f000 fe54 	bl	8008f30 <tcp_pcb_remove>
 8008288:	4b24      	ldr	r3, [pc, #144]	; (800831c <tcp_abandon+0x148>)
 800828a:	2201      	movs	r2, #1
 800828c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008292:	2b00      	cmp	r3, #0
 8008294:	d004      	beq.n	80082a0 <tcp_abandon+0xcc>
      tcp_segs_free(pcb->unacked);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fc3a 	bl	8008b14 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d004      	beq.n	80082b2 <tcp_abandon+0xde>
      tcp_segs_free(pcb->unsent);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 fc31 	bl	8008b14 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d004      	beq.n	80082c4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->ooseq);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fc28 	bl	8008b14 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff fe2f 	bl	8007f28 <tcp_backlog_accepted>
    if (send_rst) {
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00e      	beq.n	80082ee <tcp_abandon+0x11a>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80082d0:	687c      	ldr	r4, [r7, #4]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	1d1a      	adds	r2, r3, #4
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	8b1b      	ldrh	r3, [r3, #24]
 80082da:	9200      	str	r2, [sp, #0]
 80082dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80082de:	9201      	str	r2, [sp, #4]
 80082e0:	9302      	str	r3, [sp, #8]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	69b9      	ldr	r1, [r7, #24]
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	4623      	mov	r3, r4
 80082ea:	f003 fecb 	bl	800c084 <tcp_rst>
    }
    last_state = pcb->state;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	7d1b      	ldrb	r3, [r3, #20]
 80082f2:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff fdb1 	bl	8007e5c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d004      	beq.n	800830a <tcp_abandon+0x136>
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f06f 010c 	mvn.w	r1, #12
 8008308:	4798      	blx	r3
  }
}
 800830a:	372c      	adds	r7, #44	; 0x2c
 800830c:	46bd      	mov	sp, r7
 800830e:	bd90      	pop	{r4, r7, pc}
 8008310:	1ffeff68 	.word	0x1ffeff68
 8008314:	1ffeff64 	.word	0x1ffeff64
 8008318:	1ffeff58 	.word	0x1ffeff58
 800831c:	1ffeff54 	.word	0x1ffeff54

08008320 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	2101      	movs	r1, #1
 800832c:	f7ff ff52 	bl	80081d4 <tcp_abandon>
}
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop

08008338 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008348:	4413      	add	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008354:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008358:	d802      	bhi.n	8008360 <tcp_update_rcv_ann_wnd+0x28>
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800835e:	e001      	b.n	8008364 <tcp_update_rcv_ann_wnd+0x2c>
 8008360:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008364:	4413      	add	r3, r2
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	db08      	blt.n	8008380 <tcp_update_rcv_ann_wnd+0x48>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	e015      	b.n	80083ac <tcp_update_rcv_ann_wnd+0x74>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	dd03      	ble.n	8008396 <tcp_update_rcv_ann_wnd+0x5e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008394:	e009      	b.n	80083aa <tcp_update_rcv_ann_wnd+0x72>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80083aa:	2300      	movs	r3, #0
  }
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d100      	bne.n	80083cc <tcp_recved+0x14>
 80083ca:	e027      	b.n	800841c <tcp_recved+0x64>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80083d0:	887b      	ldrh	r3, [r7, #2]
 80083d2:	4413      	add	r3, r2
 80083d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80083d6:	89fb      	ldrh	r3, [r7, #14]
 80083d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80083dc:	d804      	bhi.n	80083e8 <tcp_recved+0x30>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e2:	89fa      	ldrh	r2, [r7, #14]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d204      	bcs.n	80083f2 <tcp_recved+0x3a>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80083ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80083f0:	e002      	b.n	80083f8 <tcp_recved+0x40>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	89fa      	ldrh	r2, [r7, #14]
 80083f6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff ff9d 	bl	8008338 <tcp_update_rcv_ann_wnd>
 80083fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008406:	d309      	bcc.n	800841c <tcp_recved+0x64>
    tcp_ack_now(pcb);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	8b5b      	ldrh	r3, [r3, #26]
 800840c:	f043 0302 	orr.w	r3, r3, #2
 8008410:	b29a      	uxth	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f003 f9bc 	bl	800b794 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop

08008424 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008426:	b091      	sub	sp, #68	; 0x44
 8008428:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008430:	4b78      	ldr	r3, [pc, #480]	; (8008614 <tcp_slowtmr+0x1f0>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3301      	adds	r3, #1
 8008436:	4a77      	ldr	r2, [pc, #476]	; (8008614 <tcp_slowtmr+0x1f0>)
 8008438:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800843a:	4b77      	ldr	r3, [pc, #476]	; (8008618 <tcp_slowtmr+0x1f4>)
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	3301      	adds	r3, #1
 8008440:	b2da      	uxtb	r2, r3
 8008442:	4b75      	ldr	r3, [pc, #468]	; (8008618 <tcp_slowtmr+0x1f4>)
 8008444:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008446:	2300      	movs	r3, #0
 8008448:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800844a:	4b74      	ldr	r3, [pc, #464]	; (800861c <tcp_slowtmr+0x1f8>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008450:	e242      	b.n	80088d8 <tcp_slowtmr+0x4b4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
 8008452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008454:	7f9a      	ldrb	r2, [r3, #30]
 8008456:	4b70      	ldr	r3, [pc, #448]	; (8008618 <tcp_slowtmr+0x1f4>)
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	429a      	cmp	r2, r3
 800845c:	d105      	bne.n	800846a <tcp_slowtmr+0x46>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008460:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008468:	e236      	b.n	80088d8 <tcp_slowtmr+0x4b4>
    }
    pcb->last_timer = tcp_timer_ctr;
 800846a:	4b6b      	ldr	r3, [pc, #428]	; (8008618 <tcp_slowtmr+0x1f4>)
 800846c:	781a      	ldrb	r2, [r3, #0]
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800847e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008480:	7d1b      	ldrb	r3, [r3, #20]
 8008482:	2b02      	cmp	r3, #2
 8008484:	d10a      	bne.n	800849c <tcp_slowtmr+0x78>
 8008486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008488:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800848c:	2b05      	cmp	r3, #5
 800848e:	d905      	bls.n	800849c <tcp_slowtmr+0x78>
      ++pcb_remove;
 8008490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008494:	3301      	adds	r3, #1
 8008496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800849a:	e0f9      	b.n	8008690 <tcp_slowtmr+0x26c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084a2:	2b0b      	cmp	r3, #11
 80084a4:	d905      	bls.n	80084b2 <tcp_slowtmr+0x8e>
      ++pcb_remove;
 80084a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084aa:	3301      	adds	r3, #1
 80084ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084b0:	e0ee      	b.n	8008690 <tcp_slowtmr+0x26c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80084b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d05d      	beq.n	8008578 <tcp_slowtmr+0x154>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80084bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084be:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80084c2:	2b0b      	cmp	r3, #11
 80084c4:	d905      	bls.n	80084d2 <tcp_slowtmr+0xae>
          ++pcb_remove; /* max probes reached */
 80084c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084ca:	3301      	adds	r3, #1
 80084cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084d0:	e0de      	b.n	8008690 <tcp_slowtmr+0x26c>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80084d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80084d8:	3b01      	subs	r3, #1
 80084da:	4a51      	ldr	r2, [pc, #324]	; (8008620 <tcp_slowtmr+0x1fc>)
 80084dc:	5cd3      	ldrb	r3, [r2, r3]
 80084de:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 80084e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80084e6:	7ffa      	ldrb	r2, [r7, #31]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d907      	bls.n	80084fc <tcp_slowtmr+0xd8>
            pcb->persist_cnt++;
 80084ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80084f2:	3301      	adds	r3, #1
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80084fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fe:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008502:	7ffa      	ldrb	r2, [r7, #31]
 8008504:	429a      	cmp	r2, r3
 8008506:	d836      	bhi.n	8008576 <tcp_slowtmr+0x152>
            int next_slot = 1; /* increment timer to next slot */
 8008508:	2301      	movs	r3, #1
 800850a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008512:	2b00      	cmp	r3, #0
 8008514:	d108      	bne.n	8008528 <tcp_slowtmr+0x104>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008516:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008518:	f003 fe6c 	bl	800c1f4 <tcp_zero_window_probe>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d014      	beq.n	800854c <tcp_slowtmr+0x128>
                next_slot = 0; /* try probe again with current slot */
 8008522:	2300      	movs	r3, #0
 8008524:	623b      	str	r3, [r7, #32]
 8008526:	e011      	b.n	800854c <tcp_slowtmr+0x128>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800852e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008530:	4619      	mov	r1, r3
 8008532:	f002 ff59 	bl	800b3e8 <tcp_split_unsent_seg>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d107      	bne.n	800854c <tcp_slowtmr+0x128>
                if (tcp_output(pcb) == ERR_OK) {
 800853c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800853e:	f003 f929 	bl	800b794 <tcp_output>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <tcp_slowtmr+0x128>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d011      	beq.n	8008576 <tcp_slowtmr+0x152>
              pcb->persist_cnt = 0;
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008560:	2b06      	cmp	r3, #6
 8008562:	d808      	bhi.n	8008576 <tcp_slowtmr+0x152>
                pcb->persist_backoff++;
 8008564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008566:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800856a:	3301      	adds	r3, #1
 800856c:	b2da      	uxtb	r2, r3
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008574:	e08c      	b.n	8008690 <tcp_slowtmr+0x26c>
 8008576:	e08b      	b.n	8008690 <tcp_slowtmr+0x26c>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800857c:	b21b      	sxth	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	db0e      	blt.n	80085a0 <tcp_slowtmr+0x17c>
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008586:	b21b      	sxth	r3, r3
 8008588:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800858c:	4293      	cmp	r3, r2
 800858e:	d007      	beq.n	80085a0 <tcp_slowtmr+0x17c>
          ++pcb->rtime;
 8008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008592:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008594:	b29b      	uxth	r3, r3
 8008596:	3301      	adds	r3, #1
 8008598:	b29b      	uxth	r3, r3
 800859a:	b29a      	uxth	r2, r3
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80085a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80085a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80085aa:	b212      	sxth	r2, r2
 80085ac:	b21b      	sxth	r3, r3
 80085ae:	429a      	cmp	r2, r3
 80085b0:	db6e      	blt.n	8008690 <tcp_slowtmr+0x26c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80085b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085b4:	f003 fb54 	bl	800bc60 <tcp_rexmit_rto_prepare>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d007      	beq.n	80085ce <tcp_slowtmr+0x1aa>
 80085be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d164      	bne.n	8008690 <tcp_slowtmr+0x26c>
 80085c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d060      	beq.n	8008690 <tcp_slowtmr+0x26c>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80085ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d0:	7d1b      	ldrb	r3, [r3, #20]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d02d      	beq.n	8008632 <tcp_slowtmr+0x20e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085dc:	2b0c      	cmp	r3, #12
 80085de:	bf28      	it	cs
 80085e0:	230c      	movcs	r3, #12
 80085e2:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80085e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80085e8:	b21b      	sxth	r3, r3
 80085ea:	10db      	asrs	r3, r3, #3
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	b21a      	sxth	r2, r3
 80085f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085f4:	b21b      	sxth	r3, r3
 80085f6:	4413      	add	r3, r2
 80085f8:	7fba      	ldrb	r2, [r7, #30]
 80085fa:	490a      	ldr	r1, [pc, #40]	; (8008624 <tcp_slowtmr+0x200>)
 80085fc:	5c8a      	ldrb	r2, [r1, r2]
 80085fe:	4093      	lsls	r3, r2
 8008600:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008608:	4293      	cmp	r3, r2
 800860a:	dc0d      	bgt.n	8008628 <tcp_slowtmr+0x204>
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	b29a      	uxth	r2, r3
 8008610:	e00c      	b.n	800862c <tcp_slowtmr+0x208>
 8008612:	bf00      	nop
 8008614:	1ffeff5c 	.word	0x1ffeff5c
 8008618:	1ffe8b1d 	.word	0x1ffe8b1d
 800861c:	1ffeff58 	.word	0x1ffeff58
 8008620:	08011654 	.word	0x08011654
 8008624:	08011644 	.word	0x08011644
 8008628:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800862c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008634:	2200      	movs	r2, #0
 8008636:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800863e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008640:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008644:	4293      	cmp	r3, r2
 8008646:	bf28      	it	cs
 8008648:	4613      	movcs	r3, r2
 800864a:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 800864c:	8afb      	ldrh	r3, [r7, #22]
 800864e:	085b      	lsrs	r3, r3, #1
 8008650:	b29a      	uxth	r2, r3
 8008652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008654:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800865e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008660:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	b29b      	uxth	r3, r3
 8008666:	429a      	cmp	r2, r3
 8008668:	d206      	bcs.n	8008678 <tcp_slowtmr+0x254>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800866a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	b29a      	uxth	r2, r3
 8008672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008674:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800867c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008684:	2200      	movs	r2, #0
 8008686:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800868a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800868c:	f003 fb46 	bl	800bd1c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008692:	7d1b      	ldrb	r3, [r3, #20]
 8008694:	2b06      	cmp	r3, #6
 8008696:	d111      	bne.n	80086bc <tcp_slowtmr+0x298>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869a:	8b5b      	ldrh	r3, [r3, #26]
 800869c:	f003 0310 	and.w	r3, r3, #16
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00b      	beq.n	80086bc <tcp_slowtmr+0x298>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80086a4:	4ba0      	ldr	r3, [pc, #640]	; (8008928 <tcp_slowtmr+0x504>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086aa:	6a1b      	ldr	r3, [r3, #32]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	2b28      	cmp	r3, #40	; 0x28
 80086b0:	d904      	bls.n	80086bc <tcp_slowtmr+0x298>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80086b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086b6:	3301      	adds	r3, #1
 80086b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086be:	7a5b      	ldrb	r3, [r3, #9]
 80086c0:	f003 0308 	and.w	r3, r3, #8
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d04c      	beq.n	8008762 <tcp_slowtmr+0x33e>
        ((pcb->state == ESTABLISHED) ||
 80086c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ca:	7d1b      	ldrb	r3, [r3, #20]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	d003      	beq.n	80086d8 <tcp_slowtmr+0x2b4>
        ((pcb->state == ESTABLISHED) ||
         (pcb->state == CLOSE_WAIT))) {
 80086d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d2:	7d1b      	ldrb	r3, [r3, #20]
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
        ((pcb->state == ESTABLISHED) ||
 80086d4:	2b07      	cmp	r3, #7
 80086d6:	d144      	bne.n	8008762 <tcp_slowtmr+0x33e>
         (pcb->state == CLOSE_WAIT))) {
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80086d8:	4b93      	ldr	r3, [pc, #588]	; (8008928 <tcp_slowtmr+0x504>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086de:	6a1b      	ldr	r3, [r3, #32]
 80086e0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80086e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086e8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80086ec:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80086f0:	498e      	ldr	r1, [pc, #568]	; (800892c <tcp_slowtmr+0x508>)
 80086f2:	fba1 1303 	umull	r1, r3, r1, r3
 80086f6:	095b      	lsrs	r3, r3, #5

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
        ((pcb->state == ESTABLISHED) ||
         (pcb->state == CLOSE_WAIT))) {
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d90a      	bls.n	8008712 <tcp_slowtmr+0x2ee>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80086fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008700:	3301      	adds	r3, #1
 8008702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008706:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800870a:	3301      	adds	r3, #1
 800870c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008710:	e027      	b.n	8008762 <tcp_slowtmr+0x33e>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008712:	4b85      	ldr	r3, [pc, #532]	; (8008928 <tcp_slowtmr+0x504>)
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008724:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008728:	4618      	mov	r0, r3
 800872a:	4b81      	ldr	r3, [pc, #516]	; (8008930 <tcp_slowtmr+0x50c>)
 800872c:	fb03 f300 	mul.w	r3, r3, r0
 8008730:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008732:	497e      	ldr	r1, [pc, #504]	; (800892c <tcp_slowtmr+0x508>)
 8008734:	fba1 1303 	umull	r1, r3, r1, r3
 8008738:	095b      	lsrs	r3, r3, #5
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
        ++pcb_reset;
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800873a:	429a      	cmp	r2, r3
 800873c:	d911      	bls.n	8008762 <tcp_slowtmr+0x33e>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
                 / TCP_SLOW_INTERVAL) {
        err = tcp_keepalive(pcb);
 800873e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008740:	f003 fd28 	bl	800c194 <tcp_keepalive>
 8008744:	4603      	mov	r3, r0
 8008746:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800874a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800874e:	2b00      	cmp	r3, #0
 8008750:	d107      	bne.n	8008762 <tcp_slowtmr+0x33e>
          pcb->keep_cnt_sent++;
 8008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008754:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008758:	3301      	adds	r3, #1
 800875a:	b2da      	uxtb	r2, r3
 800875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008766:	2b00      	cmp	r3, #0
 8008768:	d011      	beq.n	800878e <tcp_slowtmr+0x36a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800876a:	4b6f      	ldr	r3, [pc, #444]	; (8008928 <tcp_slowtmr+0x504>)
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	1ad1      	subs	r1, r2, r3
 8008774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008776:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800877a:	b21a      	sxth	r2, r3
 800877c:	4613      	mov	r3, r2
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	4413      	add	r3, r2
 8008782:	005b      	lsls	r3, r3, #1

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008784:	4299      	cmp	r1, r3
 8008786:	d302      	bcc.n	800878e <tcp_slowtmr+0x36a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800878a:	f000 fcbd 	bl	8009108 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800878e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008790:	7d1b      	ldrb	r3, [r3, #20]
 8008792:	2b03      	cmp	r3, #3
 8008794:	d10b      	bne.n	80087ae <tcp_slowtmr+0x38a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008796:	4b64      	ldr	r3, [pc, #400]	; (8008928 <tcp_slowtmr+0x504>)
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b28      	cmp	r3, #40	; 0x28
 80087a2:	d904      	bls.n	80087ae <tcp_slowtmr+0x38a>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80087a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087a8:	3301      	adds	r3, #1
 80087aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	7d1b      	ldrb	r3, [r3, #20]
 80087b2:	2b09      	cmp	r3, #9
 80087b4:	d10b      	bne.n	80087ce <tcp_slowtmr+0x3aa>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80087b6:	4b5c      	ldr	r3, [pc, #368]	; (8008928 <tcp_slowtmr+0x504>)
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	2bf0      	cmp	r3, #240	; 0xf0
 80087c2:	d904      	bls.n	80087ce <tcp_slowtmr+0x3aa>
        ++pcb_remove;
 80087c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087c8:	3301      	adds	r3, #1
 80087ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80087ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d049      	beq.n	800886a <tcp_slowtmr+0x446>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80087d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087dc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80087de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087e0:	f000 fb60 	bl	8008ea4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d004      	beq.n	80087f4 <tcp_slowtmr+0x3d0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
 80087ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ec:	68da      	ldr	r2, [r3, #12]
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	60da      	str	r2, [r3, #12]
 80087f2:	e003      	b.n	80087fc <tcp_slowtmr+0x3d8>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
 80087f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	4a4e      	ldr	r2, [pc, #312]	; (8008934 <tcp_slowtmr+0x510>)
 80087fa:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80087fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008800:	2b00      	cmp	r3, #0
 8008802:	d013      	beq.n	800882c <tcp_slowtmr+0x408>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008806:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8008808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800880c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800880e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008810:	1d19      	adds	r1, r3, #4
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	8ada      	ldrh	r2, [r3, #22]
 8008816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008818:	8b1b      	ldrh	r3, [r3, #24]
 800881a:	9100      	str	r1, [sp, #0]
 800881c:	9201      	str	r2, [sp, #4]
 800881e:	9302      	str	r3, [sp, #8]
 8008820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008822:	4631      	mov	r1, r6
 8008824:	462a      	mov	r2, r5
 8008826:	4623      	mov	r3, r4
 8008828:	f003 fc2c 	bl	800c084 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	7d1b      	ldrb	r3, [r3, #20]
 8008836:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883a:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fb0a 	bl	8007e5c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008848:	4b3b      	ldr	r3, [pc, #236]	; (8008938 <tcp_slowtmr+0x514>)
 800884a:	2200      	movs	r2, #0
 800884c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d004      	beq.n	800885e <tcp_slowtmr+0x43a>
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f06f 010c 	mvn.w	r1, #12
 800885c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800885e:	4b36      	ldr	r3, [pc, #216]	; (8008938 <tcp_slowtmr+0x514>)
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d000      	beq.n	8008868 <tcp_slowtmr+0x444>
        goto tcp_slowtmr_start;
 8008866:	e5ee      	b.n	8008446 <tcp_slowtmr+0x22>
 8008868:	e036      	b.n	80088d8 <tcp_slowtmr+0x4b4>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800886a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886c:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800886e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	7f1b      	ldrb	r3, [r3, #28]
 8008878:	3301      	adds	r3, #1
 800887a:	b2da      	uxtb	r2, r3
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008882:	7f1a      	ldrb	r2, [r3, #28]
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008886:	7f5b      	ldrb	r3, [r3, #29]
 8008888:	429a      	cmp	r2, r3
 800888a:	d325      	bcc.n	80088d8 <tcp_slowtmr+0x4b4>
        prev->polltmr = 0;
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	2200      	movs	r2, #0
 8008890:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008892:	4b29      	ldr	r3, [pc, #164]	; (8008938 <tcp_slowtmr+0x514>)
 8008894:	2200      	movs	r2, #0
 8008896:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00b      	beq.n	80088ba <tcp_slowtmr+0x496>
 80088a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088aa:	6912      	ldr	r2, [r2, #16]
 80088ac:	4610      	mov	r0, r2
 80088ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088b0:	4798      	blx	r3
 80088b2:	4603      	mov	r3, r0
 80088b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80088b8:	e002      	b.n	80088c0 <tcp_slowtmr+0x49c>
 80088ba:	2300      	movs	r3, #0
 80088bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80088c0:	4b1d      	ldr	r3, [pc, #116]	; (8008938 <tcp_slowtmr+0x514>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d000      	beq.n	80088ca <tcp_slowtmr+0x4a6>
          goto tcp_slowtmr_start;
 80088c8:	e5bd      	b.n	8008446 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80088ca:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d102      	bne.n	80088d8 <tcp_slowtmr+0x4b4>
          tcp_output(prev);
 80088d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088d4:	f002 ff5e 	bl	800b794 <tcp_output>
  prev = NULL;
  pcb = tcp_active_pcbs;
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f47f adb9 	bne.w	8008452 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80088e0:	2300      	movs	r3, #0
 80088e2:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80088e4:	4b15      	ldr	r3, [pc, #84]	; (800893c <tcp_slowtmr+0x518>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80088ea:	e03b      	b.n	8008964 <tcp_slowtmr+0x540>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80088f2:	4b0d      	ldr	r3, [pc, #52]	; (8008928 <tcp_slowtmr+0x504>)
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	2bf0      	cmp	r3, #240	; 0xf0
 80088fe:	d904      	bls.n	800890a <tcp_slowtmr+0x4e6>
      ++pcb_remove;
 8008900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008904:	3301      	adds	r3, #1
 8008906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800890a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800890e:	2b00      	cmp	r3, #0
 8008910:	d023      	beq.n	800895a <tcp_slowtmr+0x536>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008912:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008914:	f000 fac6 	bl	8008ea4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	2b00      	cmp	r3, #0
 800891c:	d010      	beq.n	8008940 <tcp_slowtmr+0x51c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
 800891e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008920:	68da      	ldr	r2, [r3, #12]
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	60da      	str	r2, [r3, #12]
 8008926:	e00f      	b.n	8008948 <tcp_slowtmr+0x524>
 8008928:	1ffeff5c 	.word	0x1ffeff5c
 800892c:	10624dd3 	.word	0x10624dd3
 8008930:	000124f8 	.word	0x000124f8
 8008934:	1ffeff58 	.word	0x1ffeff58
 8008938:	1ffeff54 	.word	0x1ffeff54
 800893c:	1ffeff68 	.word	0x1ffeff68
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
 8008940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	4a0a      	ldr	r2, [pc, #40]	; (8008970 <tcp_slowtmr+0x54c>)
 8008946:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800894c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008952:	6838      	ldr	r0, [r7, #0]
 8008954:	f7ff fa82 	bl	8007e5c <tcp_free>
 8008958:	e004      	b.n	8008964 <tcp_slowtmr+0x540>
    } else {
      prev = pcb;
 800895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895c:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800895e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
  while (pcb != NULL) {
 8008964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1c0      	bne.n	80088ec <tcp_slowtmr+0x4c8>
    } else {
      prev = pcb;
      pcb = pcb->next;
    }
  }
}
 800896a:	3734      	adds	r7, #52	; 0x34
 800896c:	46bd      	mov	sp, r7
 800896e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008970:	1ffeff68 	.word	0x1ffeff68

08008974 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800897a:	4b2c      	ldr	r3, [pc, #176]	; (8008a2c <tcp_fasttmr+0xb8>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	3301      	adds	r3, #1
 8008980:	b2da      	uxtb	r2, r3
 8008982:	4b2a      	ldr	r3, [pc, #168]	; (8008a2c <tcp_fasttmr+0xb8>)
 8008984:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008986:	4b2a      	ldr	r3, [pc, #168]	; (8008a30 <tcp_fasttmr+0xbc>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800898c:	e048      	b.n	8008a20 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	7f9a      	ldrb	r2, [r3, #30]
 8008992:	4b26      	ldr	r3, [pc, #152]	; (8008a2c <tcp_fasttmr+0xb8>)
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	429a      	cmp	r2, r3
 8008998:	d03f      	beq.n	8008a1a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800899a:	4b24      	ldr	r3, [pc, #144]	; (8008a2c <tcp_fasttmr+0xb8>)
 800899c:	781a      	ldrb	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	8b5b      	ldrh	r3, [r3, #26]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d010      	beq.n	80089d0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	8b5b      	ldrh	r3, [r3, #26]
 80089b2:	f043 0302 	orr.w	r3, r3, #2
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f002 fee9 	bl	800b794 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	8b5b      	ldrh	r3, [r3, #26]
 80089c6:	f023 0303 	bic.w	r3, r3, #3
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	8b5b      	ldrh	r3, [r3, #26]
 80089d4:	f003 0308 	and.w	r3, r3, #8
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d009      	beq.n	80089f0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	8b5b      	ldrh	r3, [r3, #26]
 80089e0:	f023 0308 	bic.w	r3, r3, #8
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7ff fb7c 	bl	80080e8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00a      	beq.n	8008a14 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80089fe:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <tcp_fasttmr+0xc0>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f817 	bl	8008a38 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008a0a:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <tcp_fasttmr+0xc0>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d000      	beq.n	8008a14 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008a12:	e7b8      	b.n	8008986 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	607b      	str	r3, [r7, #4]
 8008a18:	e002      	b.n	8008a20 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	607b      	str	r3, [r7, #4]
  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;

  while (pcb != NULL) {
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1b3      	bne.n	800898e <tcp_fasttmr+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	1ffe8b1d 	.word	0x1ffe8b1d
 8008a30:	1ffeff58 	.word	0x1ffeff58
 8008a34:	1ffeff54 	.word	0x1ffeff54

08008a38 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008a38:	b590      	push	{r4, r7, lr}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d101      	bne.n	8008a4a <tcp_process_refused_data+0x12>
 8008a46:	23f0      	movs	r3, #240	; 0xf0
 8008a48:	e05f      	b.n	8008b0a <tcp_process_refused_data+0xd2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a4e:	7b5b      	ldrb	r3, [r3, #13]
 8008a50:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a56:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00c      	beq.n	8008a82 <tcp_process_refused_data+0x4a>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	4618      	mov	r0, r3
 8008a74:	6879      	ldr	r1, [r7, #4]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	2300      	movs	r3, #0
 8008a7a:	47a0      	blx	r4
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]
 8008a80:	e007      	b.n	8008a92 <tcp_process_refused_data+0x5a>
 8008a82:	2000      	movs	r0, #0
 8008a84:	6879      	ldr	r1, [r7, #4]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f000 f88b 	bl	8008ba4 <tcp_recv_null>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d12a      	bne.n	8008af0 <tcp_process_refused_data+0xb8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008a9a:	7bbb      	ldrb	r3, [r7, #14]
 8008a9c:	f003 0320 	and.w	r3, r3, #32
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d031      	beq.n	8008b08 <tcp_process_refused_data+0xd0>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aa8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008aac:	d005      	beq.n	8008aba <tcp_process_refused_data+0x82>
          pcb->rcv_wnd++;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00c      	beq.n	8008ade <tcp_process_refused_data+0xa6>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	6879      	ldr	r1, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	47a0      	blx	r4
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]
 8008adc:	e001      	b.n	8008ae2 <tcp_process_refused_data+0xaa>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ae6:	f113 0f0d 	cmn.w	r3, #13
 8008aea:	d10d      	bne.n	8008b08 <tcp_process_refused_data+0xd0>
          return ERR_ABRT;
 8008aec:	23f3      	movs	r3, #243	; 0xf3
 8008aee:	e00c      	b.n	8008b0a <tcp_process_refused_data+0xd2>
        }
      }
    } else if (err == ERR_ABRT) {
 8008af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008af4:	f113 0f0d 	cmn.w	r3, #13
 8008af8:	d101      	bne.n	8008afe <tcp_process_refused_data+0xc6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008afa:	23f3      	movs	r3, #243	; 0xf3
 8008afc:	e005      	b.n	8008b0a <tcp_process_refused_data+0xd2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008b04:	23fb      	movs	r3, #251	; 0xfb
 8008b06:	e000      	b.n	8008b0a <tcp_process_refused_data+0xd2>
    }
  }
  return ERR_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	b25b      	sxtb	r3, r3
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd90      	pop	{r4, r7, pc}

08008b14 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008b1c:	e007      	b.n	8008b2e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f809 	bl	8008b3c <tcp_seg_free>
    seg = next;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	607b      	str	r3, [r7, #4]
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1f4      	bne.n	8008b1e <tcp_segs_free+0xa>
    struct tcp_seg *next = seg->next;
    tcp_seg_free(seg);
    seg = next;
  }
}
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop

08008b3c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00c      	beq.n	8008b64 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d004      	beq.n	8008b5c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe fede 	bl	8007918 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008b5c:	2004      	movs	r0, #4
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	f7fe f9c6 	bl	8006ef0 <memp_free>
  }
}
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop

08008b6c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008b74:	2004      	movs	r0, #4
 8008b76:	f7fe f98b 	bl	8006e90 <memp_malloc>
 8008b7a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <tcp_seg_copy+0x1a>
    return NULL;
 8008b82:	2300      	movs	r3, #0
 8008b84:	e00a      	b.n	8008b9c <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	2210      	movs	r2, #16
 8008b8c:	f7fc fb30 	bl	80051f0 <memcpy>
  pbuf_ref(cseg->p);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fe ff1d 	bl	80079d4 <pbuf_ref>
  return cseg;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
 8008bb0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <tcp_recv_null+0x18>
 8008bb8:	23f0      	movs	r3, #240	; 0xf0
 8008bba:	e016      	b.n	8008bea <tcp_recv_null+0x46>

  if (p != NULL) {
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d009      	beq.n	8008bd6 <tcp_recv_null+0x32>
    tcp_recved(pcb, p->tot_len);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	891b      	ldrh	r3, [r3, #8]
 8008bc6:	68b8      	ldr	r0, [r7, #8]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	f7ff fbf5 	bl	80083b8 <tcp_recved>
    pbuf_free(p);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7fe fea2 	bl	8007918 <pbuf_free>
 8008bd4:	e008      	b.n	8008be8 <tcp_recv_null+0x44>
  } else if (err == ERR_OK) {
 8008bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d104      	bne.n	8008be8 <tcp_recv_null+0x44>
    return tcp_close(pcb);
 8008bde:	68b8      	ldr	r0, [r7, #8]
 8008be0:	f7ff fada 	bl	8008198 <tcp_close>
 8008be4:	4603      	mov	r3, r0
 8008be6:	e000      	b.n	8008bea <tcp_recv_null+0x46>
  }
  return ERR_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	b25b      	sxtb	r3, r3
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008bfe:	79fb      	ldrb	r3, [r7, #7]
 8008c00:	b25b      	sxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	db01      	blt.n	8008c0a <tcp_kill_prio+0x16>
 8008c06:	79fb      	ldrb	r3, [r7, #7]
 8008c08:	e000      	b.n	8008c0c <tcp_kill_prio+0x18>
 8008c0a:	237f      	movs	r3, #127	; 0x7f
 8008c0c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008c0e:	7afb      	ldrb	r3, [r7, #11]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d100      	bne.n	8008c16 <tcp_kill_prio+0x22>
    return;
 8008c14:	e033      	b.n	8008c7e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008c16:	7afb      	ldrb	r3, [r7, #11]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008c20:	2300      	movs	r3, #0
 8008c22:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c24:	4b17      	ldr	r3, [pc, #92]	; (8008c84 <tcp_kill_prio+0x90>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	617b      	str	r3, [r7, #20]
 8008c2a:	e01f      	b.n	8008c6c <tcp_kill_prio+0x78>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	7d5b      	ldrb	r3, [r3, #21]
 8008c30:	7afa      	ldrb	r2, [r7, #11]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d80c      	bhi.n	8008c50 <tcp_kill_prio+0x5c>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	7d5b      	ldrb	r3, [r3, #21]

  inactivity = 0;
  inactive = NULL;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008c3a:	7afa      	ldrb	r2, [r7, #11]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d112      	bne.n	8008c66 <tcp_kill_prio+0x72>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008c40:	4b11      	ldr	r3, [pc, #68]	; (8008c88 <tcp_kill_prio+0x94>)
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	1ad2      	subs	r2, r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d30a      	bcc.n	8008c66 <tcp_kill_prio+0x72>
      inactivity = tcp_ticks - pcb->tmr;
 8008c50:	4b0d      	ldr	r3, [pc, #52]	; (8008c88 <tcp_kill_prio+0x94>)
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	7d5b      	ldrb	r3, [r3, #21]
 8008c64:	72fb      	strb	r3, [r7, #11]
   */
  mprio--;

  inactivity = 0;
  inactive = NULL;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	617b      	str	r3, [r7, #20]
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1dc      	bne.n	8008c2c <tcp_kill_prio+0x38>
      inactivity = tcp_ticks - pcb->tmr;
      inactive   = pcb;
      mprio      = pcb->prio;
    }
  }
  if (inactive != NULL) {
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d002      	beq.n	8008c7e <tcp_kill_prio+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008c78:	6938      	ldr	r0, [r7, #16]
 8008c7a:	f7ff fb51 	bl	8008320 <tcp_abort>
  }
}
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	1ffeff58 	.word	0x1ffeff58
 8008c88:	1ffeff5c 	.word	0x1ffeff5c

08008c8c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));

  inactivity = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c9e:	4b14      	ldr	r3, [pc, #80]	; (8008cf0 <tcp_kill_state+0x64>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	617b      	str	r3, [r7, #20]
 8008ca4:	e017      	b.n	8008cd6 <tcp_kill_state+0x4a>
    if (pcb->state == state) {
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	7d1b      	ldrb	r3, [r3, #20]
 8008caa:	79fa      	ldrb	r2, [r7, #7]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d10f      	bne.n	8008cd0 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008cb0:	4b10      	ldr	r3, [pc, #64]	; (8008cf4 <tcp_kill_state+0x68>)
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	1ad2      	subs	r2, r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d307      	bcc.n	8008cd0 <tcp_kill_state+0x44>
        inactivity = tcp_ticks - pcb->tmr;
 8008cc0:	4b0c      	ldr	r3, [pc, #48]	; (8008cf4 <tcp_kill_state+0x68>)
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	613b      	str	r3, [r7, #16]

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	617b      	str	r3, [r7, #20]
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1e4      	bne.n	8008ca6 <tcp_kill_state+0x1a>
        inactivity = tcp_ticks - pcb->tmr;
        inactive = pcb;
      }
    }
  }
  if (inactive != NULL) {
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <tcp_kill_state+0x5e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008ce2:	6938      	ldr	r0, [r7, #16]
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	f7ff fa75 	bl	80081d4 <tcp_abandon>
  }
}
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	1ffeff58 	.word	0x1ffeff58
 8008cf4:	1ffeff5c 	.word	0x1ffeff5c

08008cf8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d06:	4b11      	ldr	r3, [pc, #68]	; (8008d4c <tcp_kill_timewait+0x54>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	60fb      	str	r3, [r7, #12]
 8008d0c:	e012      	b.n	8008d34 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008d0e:	4b10      	ldr	r3, [pc, #64]	; (8008d50 <tcp_kill_timewait+0x58>)
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	1ad2      	subs	r2, r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d307      	bcc.n	8008d2e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008d1e:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <tcp_kill_timewait+0x58>)
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	60bb      	str	r3, [r7, #8]
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1e9      	bne.n	8008d0e <tcp_kill_timewait+0x16>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008d40:	68b8      	ldr	r0, [r7, #8]
 8008d42:	f7ff faed 	bl	8008320 <tcp_abort>
  }
}
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	1ffeff68 	.word	0x1ffeff68
 8008d50:	1ffeff5c 	.word	0x1ffeff5c

08008d54 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008d5a:	4b0f      	ldr	r3, [pc, #60]	; (8008d98 <tcp_handle_closepend+0x44>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008d60:	e014      	b.n	8008d8c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	8b5b      	ldrh	r3, [r3, #26]
 8008d6c:	f003 0308 	and.w	r3, r3, #8
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d009      	beq.n	8008d88 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	8b5b      	ldrh	r3, [r3, #26]
 8008d78:	f023 0308 	bic.w	r3, r3, #8
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7ff f9b0 	bl	80080e8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	607b      	str	r3, [r7, #4]
static void
tcp_handle_closepend(void)
{
  struct tcp_pcb *pcb = tcp_active_pcbs;

  while (pcb != NULL) {
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1e7      	bne.n	8008d62 <tcp_handle_closepend+0xe>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
      tcp_close_shutdown_fin(pcb);
    }
    pcb = next;
  }
}
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	1ffeff58 	.word	0x1ffeff58

08008d9c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008da6:	2002      	movs	r0, #2
 8008da8:	f7fe f872 	bl	8006e90 <memp_malloc>
 8008dac:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d126      	bne.n	8008e02 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008db4:	f7ff ffce 	bl	8008d54 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008db8:	f7ff ff9e 	bl	8008cf8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008dbc:	2002      	movs	r0, #2
 8008dbe:	f7fe f867 	bl	8006e90 <memp_malloc>
 8008dc2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d11b      	bne.n	8008e02 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008dca:	2009      	movs	r0, #9
 8008dcc:	f7ff ff5e 	bl	8008c8c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008dd0:	2002      	movs	r0, #2
 8008dd2:	f7fe f85d 	bl	8006e90 <memp_malloc>
 8008dd6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d111      	bne.n	8008e02 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008dde:	2008      	movs	r0, #8
 8008de0:	f7ff ff54 	bl	8008c8c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008de4:	2002      	movs	r0, #2
 8008de6:	f7fe f853 	bl	8006e90 <memp_malloc>
 8008dea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d107      	bne.n	8008e02 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008df2:	79fb      	ldrb	r3, [r7, #7]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7ff fefd 	bl	8008bf4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008dfa:	2002      	movs	r0, #2
 8008dfc:	f7fe f848 	bl	8006e90 <memp_malloc>
 8008e00:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d03f      	beq.n	8008e88 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	229c      	movs	r2, #156	; 0x9c
 8008e0e:	f005 fdf0 	bl	800e9f2 <memset>
    pcb->prio = prio;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	79fa      	ldrb	r2, [r7, #7]
 8008e16:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008e1e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008e28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	22ff      	movs	r2, #255	; 0xff
 8008e36:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008e3e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2206      	movs	r2, #6
 8008e44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2206      	movs	r2, #6
 8008e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e54:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008e5e:	4b0d      	ldr	r3, [pc, #52]	; (8008e94 <tcp_alloc+0xf8>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008e66:	4b0c      	ldr	r3, [pc, #48]	; (8008e98 <tcp_alloc+0xfc>)
 8008e68:	781a      	ldrb	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008e74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	4a08      	ldr	r2, [pc, #32]	; (8008e9c <tcp_alloc+0x100>)
 8008e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4a07      	ldr	r2, [pc, #28]	; (8008ea0 <tcp_alloc+0x104>)
 8008e84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008e88:	68fb      	ldr	r3, [r7, #12]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	1ffeff5c 	.word	0x1ffeff5c
 8008e98:	1ffe8b1d 	.word	0x1ffe8b1d
 8008e9c:	08008ba5 	.word	0x08008ba5
 8008ea0:	006ddd00 	.word	0x006ddd00

08008ea4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d100      	bne.n	8008eb4 <tcp_pcb_purge+0x10>
 8008eb2:	e03a      	b.n	8008f2a <tcp_pcb_purge+0x86>

  if (pcb->state != CLOSED &&
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	7d1b      	ldrb	r3, [r3, #20]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d036      	beq.n	8008f2a <tcp_pcb_purge+0x86>
      pcb->state != TIME_WAIT &&
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	7d1b      	ldrb	r3, [r3, #20]
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);

  if (pcb->state != CLOSED &&
 8008ec0:	2b0a      	cmp	r3, #10
 8008ec2:	d032      	beq.n	8008f2a <tcp_pcb_purge+0x86>
      pcb->state != TIME_WAIT &&
      pcb->state != LISTEN) {
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	7d1b      	ldrb	r3, [r3, #20]
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);

  if (pcb->state != CLOSED &&
      pcb->state != TIME_WAIT &&
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d02e      	beq.n	8008f2a <tcp_pcb_purge+0x86>
      pcb->state != LISTEN) {

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff f82b 	bl	8007f28 <tcp_backlog_accepted>

    if (pcb->refused_data != NULL) {
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d007      	beq.n	8008eea <tcp_pcb_purge+0x46>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fe fd1a 	bl	8007918 <pbuf_free>
      pcb->refused_data = NULL;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d002      	beq.n	8008ef8 <tcp_pcb_purge+0x54>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f908 	bl	8009108 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008efe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7ff fe05 	bl	8008b14 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff fe00 	bl	8008b14 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	66da      	str	r2, [r3, #108]	; 0x6c
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);

  TCP_RMV(pcblist, pcb);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d105      	bne.n	8008f50 <tcp_pcb_remove+0x20>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	e013      	b.n	8008f78 <tcp_pcb_remove+0x48>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	e00c      	b.n	8008f72 <tcp_pcb_remove+0x42>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	68da      	ldr	r2, [r3, #12]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d104      	bne.n	8008f6c <tcp_pcb_remove+0x3c>
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	68da      	ldr	r2, [r3, #12]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	60da      	str	r2, [r3, #12]
 8008f6a:	e005      	b.n	8008f78 <tcp_pcb_remove+0x48>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	60fb      	str	r3, [r7, #12]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1ef      	bne.n	8008f58 <tcp_pcb_remove+0x28>
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008f7e:	6838      	ldr	r0, [r7, #0]
 8008f80:	f7ff ff90 	bl	8008ea4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	7d1b      	ldrb	r3, [r3, #20]
 8008f88:	2b0a      	cmp	r3, #10
 8008f8a:	d013      	beq.n	8008fb4 <tcp_pcb_remove+0x84>
      (pcb->state != LISTEN) &&
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	7d1b      	ldrb	r3, [r3, #20]
  TCP_RMV(pcblist, pcb);

  tcp_pcb_purge(pcb);

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d00f      	beq.n	8008fb4 <tcp_pcb_remove+0x84>
      (pcb->state != LISTEN) &&
      (pcb->flags & TF_ACK_DELAY)) {
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	8b5b      	ldrh	r3, [r3, #26]
 8008f98:	f003 0301 	and.w	r3, r3, #1

  tcp_pcb_purge(pcb);

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
      (pcb->state != LISTEN) &&
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d009      	beq.n	8008fb4 <tcp_pcb_remove+0x84>
      (pcb->flags & TF_ACK_DELAY)) {
    tcp_ack_now(pcb);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	8b5b      	ldrh	r3, [r3, #26]
 8008fa4:	f043 0302 	orr.w	r3, r3, #2
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008fae:	6838      	ldr	r0, [r7, #0]
 8008fb0:	f002 fbf0 	bl	800b794 <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop

08008fc8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008fd0:	4b07      	ldr	r3, [pc, #28]	; (8008ff0 <tcp_next_iss+0x28>)
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	4b07      	ldr	r3, [pc, #28]	; (8008ff4 <tcp_next_iss+0x2c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4413      	add	r3, r2
 8008fda:	4a05      	ldr	r2, [pc, #20]	; (8008ff0 <tcp_next_iss+0x28>)
 8008fdc:	6013      	str	r3, [r2, #0]
  return iss;
 8008fde:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <tcp_next_iss+0x28>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	1ffe8908 	.word	0x1ffe8908
 8008ff4:	1ffeff5c 	.word	0x1ffeff5c

08008ff8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	81fb      	strh	r3, [r7, #14]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <tcp_eff_send_mss_netif+0x18>
      return sendmss;
 800900c:	89fb      	ldrh	r3, [r7, #14]
 800900e:	e019      	b.n	8009044 <tcp_eff_send_mss_netif+0x4c>
    }
    mtu = outif->mtu;
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009014:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009016:	8afb      	ldrh	r3, [r7, #22]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d012      	beq.n	8009042 <tcp_eff_send_mss_netif+0x4a>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800901c:	2328      	movs	r3, #40	; 0x28
 800901e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009020:	8afa      	ldrh	r2, [r7, #22]
 8009022:	8abb      	ldrh	r3, [r7, #20]
 8009024:	429a      	cmp	r2, r3
 8009026:	d904      	bls.n	8009032 <tcp_eff_send_mss_netif+0x3a>
 8009028:	8afa      	ldrh	r2, [r7, #22]
 800902a:	8abb      	ldrh	r3, [r7, #20]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	b29b      	uxth	r3, r3
 8009030:	e000      	b.n	8009034 <tcp_eff_send_mss_netif+0x3c>
 8009032:	2300      	movs	r3, #0
 8009034:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009036:	8a7a      	ldrh	r2, [r7, #18]
 8009038:	89fb      	ldrh	r3, [r7, #14]
 800903a:	4293      	cmp	r3, r2
 800903c:	bf28      	it	cs
 800903e:	4613      	movcs	r3, r2
 8009040:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009042:	89fb      	ldrh	r3, [r7, #14]
}
 8009044:	4618      	mov	r0, r3
 8009046:	371c      	adds	r7, #28
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);

  while (pcb != NULL) {
 800905e:	e011      	b.n	8009084 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	429a      	cmp	r2, r3
 800906a:	d108      	bne.n	800907e <tcp_netif_ip_addr_changed_pcblist+0x2e>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7ff f954 	bl	8008320 <tcp_abort>
      pcb = next;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	e002      	b.n	8009084 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	60fb      	str	r3, [r7, #12]
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);

  while (pcb != NULL) {
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1ea      	bne.n	8009060 <tcp_netif_ip_addr_changed_pcblist+0x10>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d02a      	beq.n	80090f6 <tcp_netif_ip_addr_changed+0x66>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d026      	beq.n	80090f6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80090a8:	4b14      	ldr	r3, [pc, #80]	; (80090fc <tcp_netif_ip_addr_changed+0x6c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	4619      	mov	r1, r3
 80090b0:	f7ff ffce 	bl	8009050 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80090b4:	4b12      	ldr	r3, [pc, #72]	; (8009100 <tcp_netif_ip_addr_changed+0x70>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	4619      	mov	r1, r3
 80090bc:	f7ff ffc8 	bl	8009050 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d017      	beq.n	80090f6 <tcp_netif_ip_addr_changed+0x66>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d013      	beq.n	80090f6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80090ce:	4b0d      	ldr	r3, [pc, #52]	; (8009104 <tcp_netif_ip_addr_changed+0x74>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e00c      	b.n	80090f0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d103      	bne.n	80090ea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	601a      	str	r2, [r3, #0]
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);

    if (!ip_addr_isany(new_addr)) {
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1ef      	bne.n	80090d6 <tcp_netif_ip_addr_changed+0x46>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	1ffeff58 	.word	0x1ffeff58
 8009100:	1ffeff64 	.word	0x1ffeff64
 8009104:	1ffeff60 	.word	0x1ffeff60

08009108 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009114:	2b00      	cmp	r3, #0
 8009116:	d007      	beq.n	8009128 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800911c:	4618      	mov	r0, r3
 800911e:	f7ff fcf9 	bl	8008b14 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop

08009130 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009130:	b5b0      	push	{r4, r5, r7, lr}
 8009132:	b08c      	sub	sp, #48	; 0x30
 8009134:	af04      	add	r7, sp, #16
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	4a95      	ldr	r2, [pc, #596]	; (8009394 <tcp_input+0x264>)
 8009140:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	895b      	ldrh	r3, [r3, #10]
 8009146:	2b13      	cmp	r3, #19
 8009148:	d800      	bhi.n	800914c <tcp_input+0x1c>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
 800914a:	e332      	b.n	80097b2 <tcp_input+0x682>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800914c:	4b92      	ldr	r3, [pc, #584]	; (8009398 <tcp_input+0x268>)
 800914e:	695a      	ldr	r2, [r3, #20]
 8009150:	4b91      	ldr	r3, [pc, #580]	; (8009398 <tcp_input+0x268>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4610      	mov	r0, r2
 8009156:	4619      	mov	r1, r3
 8009158:	f7fd fb0c 	bl	8006774 <ip4_addr_isbroadcast_u32>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	f040 8327 	bne.w	80097b2 <tcp_input+0x682>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009164:	4b8c      	ldr	r3, [pc, #560]	; (8009398 <tcp_input+0x268>)
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800916c:	2be0      	cmp	r3, #224	; 0xe0
 800916e:	f000 8320 	beq.w	80097b2 <tcp_input+0x682>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009172:	4b88      	ldr	r3, [pc, #544]	; (8009394 <tcp_input+0x264>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	899b      	ldrh	r3, [r3, #12]
 8009178:	b29b      	uxth	r3, r3
 800917a:	4618      	mov	r0, r3
 800917c:	f7fd fb3c 	bl	80067f8 <lwip_htons>
 8009180:	4603      	mov	r3, r0
 8009182:	0b1b      	lsrs	r3, r3, #12
 8009184:	b29b      	uxth	r3, r3
 8009186:	b2db      	uxtb	r3, r3
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800918c:	7cbb      	ldrb	r3, [r7, #18]
 800918e:	2b13      	cmp	r3, #19
 8009190:	f240 830f 	bls.w	80097b2 <tcp_input+0x682>
 8009194:	7cbb      	ldrb	r3, [r7, #18]
 8009196:	b29a      	uxth	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	891b      	ldrh	r3, [r3, #8]
 800919c:	429a      	cmp	r2, r3
 800919e:	f200 8308 	bhi.w	80097b2 <tcp_input+0x682>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80091a2:	7cbb      	ldrb	r3, [r7, #18]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	3b14      	subs	r3, #20
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	4b7c      	ldr	r3, [pc, #496]	; (800939c <tcp_input+0x26c>)
 80091ac:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80091ae:	4b7c      	ldr	r3, [pc, #496]	; (80093a0 <tcp_input+0x270>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	895a      	ldrh	r2, [r3, #10]
 80091b8:	7cbb      	ldrb	r3, [r7, #18]
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	429a      	cmp	r2, r3
 80091be:	d309      	bcc.n	80091d4 <tcp_input+0xa4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80091c0:	4b76      	ldr	r3, [pc, #472]	; (800939c <tcp_input+0x26c>)
 80091c2:	881a      	ldrh	r2, [r3, #0]
 80091c4:	4b77      	ldr	r3, [pc, #476]	; (80093a4 <tcp_input+0x274>)
 80091c6:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80091c8:	7cbb      	ldrb	r3, [r7, #18]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	4619      	mov	r1, r3
 80091ce:	f7fe fb23 	bl	8007818 <pbuf_remove_header>
 80091d2:	e02d      	b.n	8009230 <tcp_input+0x100>
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	2114      	movs	r1, #20
 80091d8:	f7fe fb1e 	bl	8007818 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	895a      	ldrh	r2, [r3, #10]
 80091e0:	4b70      	ldr	r3, [pc, #448]	; (80093a4 <tcp_input+0x274>)
 80091e2:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80091e4:	4b6d      	ldr	r3, [pc, #436]	; (800939c <tcp_input+0x26c>)
 80091e6:	881a      	ldrh	r2, [r3, #0]
 80091e8:	4b6e      	ldr	r3, [pc, #440]	; (80093a4 <tcp_input+0x274>)
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80091f0:	4b6c      	ldr	r3, [pc, #432]	; (80093a4 <tcp_input+0x274>)
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	4619      	mov	r1, r3
 80091f8:	f7fe fb0e 	bl	8007818 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	895b      	ldrh	r3, [r3, #10]
 8009202:	8a3a      	ldrh	r2, [r7, #16]
 8009204:	429a      	cmp	r2, r3
 8009206:	d900      	bls.n	800920a <tcp_input+0xda>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
 8009208:	e2d3      	b.n	80097b2 <tcp_input+0x682>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	4a63      	ldr	r2, [pc, #396]	; (80093a0 <tcp_input+0x270>)
 8009212:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	8a3b      	ldrh	r3, [r7, #16]
 800921a:	4610      	mov	r0, r2
 800921c:	4619      	mov	r1, r3
 800921e:	f7fe fafb 	bl	8007818 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	891a      	ldrh	r2, [r3, #8]
 8009226:	8a3b      	ldrh	r3, [r7, #16]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	b29a      	uxth	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009230:	4b58      	ldr	r3, [pc, #352]	; (8009394 <tcp_input+0x264>)
 8009232:	681c      	ldr	r4, [r3, #0]
 8009234:	4b57      	ldr	r3, [pc, #348]	; (8009394 <tcp_input+0x264>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	b29b      	uxth	r3, r3
 800923c:	4618      	mov	r0, r3
 800923e:	f7fd fadb 	bl	80067f8 <lwip_htons>
 8009242:	4603      	mov	r3, r0
 8009244:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009246:	4b53      	ldr	r3, [pc, #332]	; (8009394 <tcp_input+0x264>)
 8009248:	681c      	ldr	r4, [r3, #0]
 800924a:	4b52      	ldr	r3, [pc, #328]	; (8009394 <tcp_input+0x264>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	885b      	ldrh	r3, [r3, #2]
 8009250:	b29b      	uxth	r3, r3
 8009252:	4618      	mov	r0, r3
 8009254:	f7fd fad0 	bl	80067f8 <lwip_htons>
 8009258:	4603      	mov	r3, r0
 800925a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800925c:	4b4d      	ldr	r3, [pc, #308]	; (8009394 <tcp_input+0x264>)
 800925e:	681c      	ldr	r4, [r3, #0]
 8009260:	4b4c      	ldr	r3, [pc, #304]	; (8009394 <tcp_input+0x264>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	4618      	mov	r0, r3
 8009268:	f7fd fadc 	bl	8006824 <lwip_htonl>
 800926c:	4603      	mov	r3, r0
 800926e:	6063      	str	r3, [r4, #4]
 8009270:	6863      	ldr	r3, [r4, #4]
 8009272:	4a4d      	ldr	r2, [pc, #308]	; (80093a8 <tcp_input+0x278>)
 8009274:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009276:	4b47      	ldr	r3, [pc, #284]	; (8009394 <tcp_input+0x264>)
 8009278:	681c      	ldr	r4, [r3, #0]
 800927a:	4b46      	ldr	r3, [pc, #280]	; (8009394 <tcp_input+0x264>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	4618      	mov	r0, r3
 8009282:	f7fd facf 	bl	8006824 <lwip_htonl>
 8009286:	4603      	mov	r3, r0
 8009288:	60a3      	str	r3, [r4, #8]
 800928a:	68a3      	ldr	r3, [r4, #8]
 800928c:	4a47      	ldr	r2, [pc, #284]	; (80093ac <tcp_input+0x27c>)
 800928e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009290:	4b40      	ldr	r3, [pc, #256]	; (8009394 <tcp_input+0x264>)
 8009292:	681c      	ldr	r4, [r3, #0]
 8009294:	4b3f      	ldr	r3, [pc, #252]	; (8009394 <tcp_input+0x264>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	89db      	ldrh	r3, [r3, #14]
 800929a:	b29b      	uxth	r3, r3
 800929c:	4618      	mov	r0, r3
 800929e:	f7fd faab 	bl	80067f8 <lwip_htons>
 80092a2:	4603      	mov	r3, r0
 80092a4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80092a6:	4b3b      	ldr	r3, [pc, #236]	; (8009394 <tcp_input+0x264>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	899b      	ldrh	r3, [r3, #12]
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fd faa2 	bl	80067f8 <lwip_htons>
 80092b4:	4603      	mov	r3, r0
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	4b3c      	ldr	r3, [pc, #240]	; (80093b0 <tcp_input+0x280>)
 80092c0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	891a      	ldrh	r2, [r3, #8]
 80092c6:	4b3b      	ldr	r3, [pc, #236]	; (80093b4 <tcp_input+0x284>)
 80092c8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80092ca:	4b39      	ldr	r3, [pc, #228]	; (80093b0 <tcp_input+0x280>)
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	f003 0303 	and.w	r3, r3, #3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00c      	beq.n	80092f0 <tcp_input+0x1c0>
    tcplen++;
 80092d6:	4b37      	ldr	r3, [pc, #220]	; (80093b4 <tcp_input+0x284>)
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	3301      	adds	r3, #1
 80092dc:	b29a      	uxth	r2, r3
 80092de:	4b35      	ldr	r3, [pc, #212]	; (80093b4 <tcp_input+0x284>)
 80092e0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	891a      	ldrh	r2, [r3, #8]
 80092e6:	4b33      	ldr	r3, [pc, #204]	; (80093b4 <tcp_input+0x284>)
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d900      	bls.n	80092f0 <tcp_input+0x1c0>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
 80092ee:	e260      	b.n	80097b2 <tcp_input+0x682>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80092f0:	2300      	movs	r3, #0
 80092f2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80092f4:	4b30      	ldr	r3, [pc, #192]	; (80093b8 <tcp_input+0x288>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	61fb      	str	r3, [r7, #28]
 80092fa:	e040      	b.n	800937e <tcp_input+0x24e>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	7a1b      	ldrb	r3, [r3, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00c      	beq.n	800931e <tcp_input+0x1ee>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	7a1a      	ldrb	r2, [r3, #8]
 8009308:	4b23      	ldr	r3, [pc, #140]	; (8009398 <tcp_input+0x268>)
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009310:	3301      	adds	r3, #1
 8009312:	b2db      	uxtb	r3, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009314:	429a      	cmp	r2, r3
 8009316:	d002      	beq.n	800931e <tcp_input+0x1ee>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
      prev = pcb;
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	61bb      	str	r3, [r7, #24]
      continue;
 800931c:	e02c      	b.n	8009378 <tcp_input+0x248>
    }

    if (pcb->remote_port == tcphdr->src &&
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	8b1a      	ldrh	r2, [r3, #24]
 8009322:	4b1c      	ldr	r3, [pc, #112]	; (8009394 <tcp_input+0x264>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	b29b      	uxth	r3, r3
 800932a:	429a      	cmp	r2, r3
 800932c:	d122      	bne.n	8009374 <tcp_input+0x244>
        pcb->local_port == tcphdr->dest &&
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	8ada      	ldrh	r2, [r3, #22]
 8009332:	4b18      	ldr	r3, [pc, #96]	; (8009394 <tcp_input+0x264>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	885b      	ldrh	r3, [r3, #2]
 8009338:	b29b      	uxth	r3, r3
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
      prev = pcb;
      continue;
    }

    if (pcb->remote_port == tcphdr->src &&
 800933a:	429a      	cmp	r2, r3
 800933c:	d11a      	bne.n	8009374 <tcp_input+0x244>
        pcb->local_port == tcphdr->dest &&
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	4b15      	ldr	r3, [pc, #84]	; (8009398 <tcp_input+0x268>)
 8009344:	691b      	ldr	r3, [r3, #16]
      prev = pcb;
      continue;
    }

    if (pcb->remote_port == tcphdr->src &&
        pcb->local_port == tcphdr->dest &&
 8009346:	429a      	cmp	r2, r3
 8009348:	d114      	bne.n	8009374 <tcp_input+0x244>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	4b12      	ldr	r3, [pc, #72]	; (8009398 <tcp_input+0x268>)
 8009350:	695b      	ldr	r3, [r3, #20]
      continue;
    }

    if (pcb->remote_port == tcphdr->src &&
        pcb->local_port == tcphdr->dest &&
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009352:	429a      	cmp	r2, r3
 8009354:	d10e      	bne.n	8009374 <tcp_input+0x244>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00a      	beq.n	8009372 <tcp_input+0x242>
        prev->next = pcb->next;
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009364:	4b14      	ldr	r3, [pc, #80]	; (80093b8 <tcp_input+0x288>)
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800936c:	4a12      	ldr	r2, [pc, #72]	; (80093b8 <tcp_input+0x288>)
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
 8009372:	e007      	b.n	8009384 <tcp_input+0x254>
    }
    prev = pcb;
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	61bb      	str	r3, [r7, #24]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	61fb      	str	r3, [r7, #28]
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1bb      	bne.n	80092fc <tcp_input+0x1cc>
      break;
    }
    prev = pcb;
  }

  if (pcb == NULL) {
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	2b00      	cmp	r3, #0
 8009388:	f040 809f 	bne.w	80094ca <tcp_input+0x39a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800938c:	4b0b      	ldr	r3, [pc, #44]	; (80093bc <tcp_input+0x28c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	61fb      	str	r3, [r7, #28]
 8009392:	e04a      	b.n	800942a <tcp_input+0x2fa>
 8009394:	1ffe8b30 	.word	0x1ffe8b30
 8009398:	1ffe9100 	.word	0x1ffe9100
 800939c:	1ffe8b34 	.word	0x1ffe8b34
 80093a0:	1ffe8b38 	.word	0x1ffe8b38
 80093a4:	1ffe8b36 	.word	0x1ffe8b36
 80093a8:	1ffe8b40 	.word	0x1ffe8b40
 80093ac:	1ffe8b44 	.word	0x1ffe8b44
 80093b0:	1ffe8b4c 	.word	0x1ffe8b4c
 80093b4:	1ffe8b4a 	.word	0x1ffe8b4a
 80093b8:	1ffeff58 	.word	0x1ffeff58
 80093bc:	1ffeff68 	.word	0x1ffeff68
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	7a1b      	ldrb	r3, [r3, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00a      	beq.n	80093de <tcp_input+0x2ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	7a1a      	ldrb	r2, [r3, #8]
 80093cc:	4b95      	ldr	r3, [pc, #596]	; (8009624 <tcp_input+0x4f4>)
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093d4:	3301      	adds	r3, #1
 80093d6:	b2db      	uxtb	r3, r3
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80093d8:	429a      	cmp	r2, r3
 80093da:	d000      	beq.n	80093de <tcp_input+0x2ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
        continue;
 80093dc:	e022      	b.n	8009424 <tcp_input+0x2f4>
      }

      if (pcb->remote_port == tcphdr->src &&
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	8b1a      	ldrh	r2, [r3, #24]
 80093e2:	4b91      	ldr	r3, [pc, #580]	; (8009628 <tcp_input+0x4f8>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d11a      	bne.n	8009424 <tcp_input+0x2f4>
          pcb->local_port == tcphdr->dest &&
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	8ada      	ldrh	r2, [r3, #22]
 80093f2:	4b8d      	ldr	r3, [pc, #564]	; (8009628 <tcp_input+0x4f8>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	885b      	ldrh	r3, [r3, #2]
 80093f8:	b29b      	uxth	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d112      	bne.n	8009424 <tcp_input+0x2f4>
          pcb->local_port == tcphdr->dest &&
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	685a      	ldr	r2, [r3, #4]
 8009402:	4b88      	ldr	r3, [pc, #544]	; (8009624 <tcp_input+0x4f4>)
 8009404:	691b      	ldr	r3, [r3, #16]
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
          pcb->local_port == tcphdr->dest &&
 8009406:	429a      	cmp	r2, r3
 8009408:	d10c      	bne.n	8009424 <tcp_input+0x2f4>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	4b85      	ldr	r3, [pc, #532]	; (8009624 <tcp_input+0x4f4>)
 8009410:	695b      	ldr	r3, [r3, #20]
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
          pcb->local_port == tcphdr->dest &&
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009412:	429a      	cmp	r2, r3
 8009414:	d106      	bne.n	8009424 <tcp_input+0x2f4>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009416:	69f8      	ldr	r0, [r7, #28]
 8009418:	f000 fb18 	bl	8009a4c <tcp_timewait_input>
        }
        pbuf_free(p);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7fe fa7b 	bl	8007918 <pbuf_free>
        return;
 8009422:	e1c9      	b.n	80097b8 <tcp_input+0x688>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	61fb      	str	r3, [r7, #28]
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1c7      	bne.n	80093c0 <tcp_input+0x290>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009430:	2300      	movs	r3, #0
 8009432:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009434:	4b7d      	ldr	r3, [pc, #500]	; (800962c <tcp_input+0x4fc>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	617b      	str	r3, [r7, #20]
 800943a:	e02b      	b.n	8009494 <tcp_input+0x364>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	7a1b      	ldrb	r3, [r3, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00c      	beq.n	800945e <tcp_input+0x32e>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	7a1a      	ldrb	r2, [r3, #8]
 8009448:	4b76      	ldr	r3, [pc, #472]	; (8009624 <tcp_input+0x4f4>)
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009450:	3301      	adds	r3, #1
 8009452:	b2db      	uxtb	r3, r3
    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009454:	429a      	cmp	r2, r3
 8009456:	d002      	beq.n	800945e <tcp_input+0x32e>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
        prev = (struct tcp_pcb *)lpcb;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	61bb      	str	r3, [r7, #24]
        continue;
 800945c:	e017      	b.n	800948e <tcp_input+0x35e>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	8ada      	ldrh	r2, [r3, #22]
 8009462:	4b71      	ldr	r3, [pc, #452]	; (8009628 <tcp_input+0x4f8>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	885b      	ldrh	r3, [r3, #2]
 8009468:	b29b      	uxth	r3, r3
 800946a:	429a      	cmp	r2, r3
 800946c:	d10d      	bne.n	800948a <tcp_input+0x35a>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	4b6c      	ldr	r3, [pc, #432]	; (8009624 <tcp_input+0x4f4>)
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	429a      	cmp	r2, r3
 8009478:	d100      	bne.n	800947c <tcp_input+0x34c>
            /* found an exact match */
            break;
 800947a:	e00e      	b.n	800949a <tcp_input+0x36a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00b      	beq.n	800949a <tcp_input+0x36a>
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d007      	beq.n	800949a <tcp_input+0x36a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	61bb      	str	r3, [r7, #24]
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	617b      	str	r3, [r7, #20]
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1d0      	bne.n	800943c <tcp_input+0x30c>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d014      	beq.n	80094ca <tcp_input+0x39a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00a      	beq.n	80094bc <tcp_input+0x38c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	68da      	ldr	r2, [r3, #12]
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80094ae:	4b5f      	ldr	r3, [pc, #380]	; (800962c <tcp_input+0x4fc>)
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80094b6:	4a5d      	ldr	r2, [pc, #372]	; (800962c <tcp_input+0x4fc>)
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80094bc:	6978      	ldr	r0, [r7, #20]
 80094be:	f000 f9c3 	bl	8009848 <tcp_listen_input>
      }
      pbuf_free(p);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7fe fa28 	bl	8007918 <pbuf_free>
      return;
 80094c8:	e176      	b.n	80097b8 <tcp_input+0x688>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 8144 	beq.w	800975a <tcp_input+0x62a>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80094d2:	4b57      	ldr	r3, [pc, #348]	; (8009630 <tcp_input+0x500>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	891a      	ldrh	r2, [r3, #8]
 80094dc:	4b54      	ldr	r3, [pc, #336]	; (8009630 <tcp_input+0x500>)
 80094de:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80094e0:	4a53      	ldr	r2, [pc, #332]	; (8009630 <tcp_input+0x500>)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80094e6:	4b50      	ldr	r3, [pc, #320]	; (8009628 <tcp_input+0x4f8>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a51      	ldr	r2, [pc, #324]	; (8009630 <tcp_input+0x500>)
 80094ec:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80094ee:	4b51      	ldr	r3, [pc, #324]	; (8009634 <tcp_input+0x504>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80094f4:	4b50      	ldr	r3, [pc, #320]	; (8009638 <tcp_input+0x508>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80094fa:	4b50      	ldr	r3, [pc, #320]	; (800963c <tcp_input+0x50c>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009500:	4b4f      	ldr	r3, [pc, #316]	; (8009640 <tcp_input+0x510>)
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	f003 0308 	and.w	r3, r3, #8
 8009508:	2b00      	cmp	r3, #0
 800950a:	d006      	beq.n	800951a <tcp_input+0x3ea>
      p->flags |= PBUF_FLAG_PUSH;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	7b5b      	ldrb	r3, [r3, #13]
 8009510:	f043 0301 	orr.w	r3, r3, #1
 8009514:	b2da      	uxtb	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800951e:	2b00      	cmp	r3, #0
 8009520:	d017      	beq.n	8009552 <tcp_input+0x422>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009522:	69f8      	ldr	r0, [r7, #28]
 8009524:	f7ff fa88 	bl	8008a38 <tcp_process_refused_data>
 8009528:	4603      	mov	r3, r0
 800952a:	f113 0f0d 	cmn.w	r3, #13
 800952e:	d007      	beq.n	8009540 <tcp_input+0x410>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      p->flags |= PBUF_FLAG_PUSH;
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00c      	beq.n	8009552 <tcp_input+0x422>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009538:	4b42      	ldr	r3, [pc, #264]	; (8009644 <tcp_input+0x514>)
 800953a:	881b      	ldrh	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d008      	beq.n	8009552 <tcp_input+0x422>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009544:	2b00      	cmp	r3, #0
 8009546:	d103      	bne.n	8009550 <tcp_input+0x420>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009548:	69f8      	ldr	r0, [r7, #28]
 800954a:	f002 fdcf 	bl	800c0ec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800954e:	e0f1      	b.n	8009734 <tcp_input+0x604>
 8009550:	e0f0      	b.n	8009734 <tcp_input+0x604>
      }
    }
    tcp_input_pcb = pcb;
 8009552:	4a3d      	ldr	r2, [pc, #244]	; (8009648 <tcp_input+0x518>)
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009558:	69f8      	ldr	r0, [r7, #28]
 800955a:	f000 fae1 	bl	8009b20 <tcp_process>
 800955e:	4603      	mov	r3, r0
 8009560:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009562:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009566:	f113 0f0d 	cmn.w	r3, #13
 800956a:	f000 80e3 	beq.w	8009734 <tcp_input+0x604>
      if (recv_flags & TF_RESET) {
 800956e:	4b32      	ldr	r3, [pc, #200]	; (8009638 <tcp_input+0x508>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	f003 0308 	and.w	r3, r3, #8
 8009576:	2b00      	cmp	r3, #0
 8009578:	d015      	beq.n	80095a6 <tcp_input+0x476>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009580:	2b00      	cmp	r3, #0
 8009582:	d008      	beq.n	8009596 <tcp_input+0x466>
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	6912      	ldr	r2, [r2, #16]
 800958e:	4610      	mov	r0, r2
 8009590:	f06f 010d 	mvn.w	r1, #13
 8009594:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009596:	482d      	ldr	r0, [pc, #180]	; (800964c <tcp_input+0x51c>)
 8009598:	69f9      	ldr	r1, [r7, #28]
 800959a:	f7ff fcc9 	bl	8008f30 <tcp_pcb_remove>
        tcp_free(pcb);
 800959e:	69f8      	ldr	r0, [r7, #28]
 80095a0:	f7fe fc5c 	bl	8007e5c <tcp_free>
 80095a4:	e0c6      	b.n	8009734 <tcp_input+0x604>
      } else {
        err = ERR_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80095aa:	4b24      	ldr	r3, [pc, #144]	; (800963c <tcp_input+0x50c>)
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d01e      	beq.n	80095f0 <tcp_input+0x4c0>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80095b2:	4b22      	ldr	r3, [pc, #136]	; (800963c <tcp_input+0x50c>)
 80095b4:	881b      	ldrh	r3, [r3, #0]
 80095b6:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00b      	beq.n	80095da <tcp_input+0x4aa>
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095c8:	69fa      	ldr	r2, [r7, #28]
 80095ca:	6911      	ldr	r1, [r2, #16]
 80095cc:	89fa      	ldrh	r2, [r7, #14]
 80095ce:	4608      	mov	r0, r1
 80095d0:	69f9      	ldr	r1, [r7, #28]
 80095d2:	4798      	blx	r3
 80095d4:	4603      	mov	r3, r0
 80095d6:	74fb      	strb	r3, [r7, #19]
 80095d8:	e001      	b.n	80095de <tcp_input+0x4ae>
 80095da:	2300      	movs	r3, #0
 80095dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80095de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095e2:	f113 0f0d 	cmn.w	r3, #13
 80095e6:	d100      	bne.n	80095ea <tcp_input+0x4ba>
              goto aborted;
 80095e8:	e0a4      	b.n	8009734 <tcp_input+0x604>
            }
          }
          recv_acked = 0;
 80095ea:	4b14      	ldr	r3, [pc, #80]	; (800963c <tcp_input+0x50c>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80095f0:	69f8      	ldr	r0, [r7, #28]
 80095f2:	f000 f8f9 	bl	80097e8 <tcp_input_delayed_close>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d000      	beq.n	80095fe <tcp_input+0x4ce>
          goto aborted;
 80095fc:	e09a      	b.n	8009734 <tcp_input+0x604>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80095fe:	4b0d      	ldr	r3, [pc, #52]	; (8009634 <tcp_input+0x504>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d050      	beq.n	80096a8 <tcp_input+0x578>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	8b5b      	ldrh	r3, [r3, #26]
 800960a:	f003 0310 	and.w	r3, r3, #16
 800960e:	2b00      	cmp	r3, #0
 8009610:	d01e      	beq.n	8009650 <tcp_input+0x520>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009612:	4b08      	ldr	r3, [pc, #32]	; (8009634 <tcp_input+0x504>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4618      	mov	r0, r3
 8009618:	f7fe f97e 	bl	8007918 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800961c:	69f8      	ldr	r0, [r7, #28]
 800961e:	f7fe fe7f 	bl	8008320 <tcp_abort>
            goto aborted;
 8009622:	e087      	b.n	8009734 <tcp_input+0x604>
 8009624:	1ffe9100 	.word	0x1ffe9100
 8009628:	1ffe8b30 	.word	0x1ffe8b30
 800962c:	1ffeff60 	.word	0x1ffeff60
 8009630:	1ffe8b20 	.word	0x1ffe8b20
 8009634:	1ffe8b50 	.word	0x1ffe8b50
 8009638:	1ffe8b4d 	.word	0x1ffe8b4d
 800963c:	1ffe8b48 	.word	0x1ffe8b48
 8009640:	1ffe8b4c 	.word	0x1ffe8b4c
 8009644:	1ffe8b4a 	.word	0x1ffe8b4a
 8009648:	1ffeff6c 	.word	0x1ffeff6c
 800964c:	1ffeff58 	.word	0x1ffeff58
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00e      	beq.n	8009678 <tcp_input+0x548>
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	691a      	ldr	r2, [r3, #16]
 8009664:	4b56      	ldr	r3, [pc, #344]	; (80097c0 <tcp_input+0x690>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4610      	mov	r0, r2
 800966a:	69f9      	ldr	r1, [r7, #28]
 800966c:	461a      	mov	r2, r3
 800966e:	2300      	movs	r3, #0
 8009670:	47a0      	blx	r4
 8009672:	4603      	mov	r3, r0
 8009674:	74fb      	strb	r3, [r7, #19]
 8009676:	e009      	b.n	800968c <tcp_input+0x55c>
 8009678:	4b51      	ldr	r3, [pc, #324]	; (80097c0 <tcp_input+0x690>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2000      	movs	r0, #0
 800967e:	69f9      	ldr	r1, [r7, #28]
 8009680:	461a      	mov	r2, r3
 8009682:	2300      	movs	r3, #0
 8009684:	f7ff fa8e 	bl	8008ba4 <tcp_recv_null>
 8009688:	4603      	mov	r3, r0
 800968a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800968c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009690:	f113 0f0d 	cmn.w	r3, #13
 8009694:	d100      	bne.n	8009698 <tcp_input+0x568>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
 8009696:	e04d      	b.n	8009734 <tcp_input+0x604>
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009698:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d003      	beq.n	80096a8 <tcp_input+0x578>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80096a0:	4b47      	ldr	r3, [pc, #284]	; (80097c0 <tcp_input+0x690>)
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80096a8:	4b46      	ldr	r3, [pc, #280]	; (80097c4 <tcp_input+0x694>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	f003 0320 	and.w	r3, r3, #32
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d032      	beq.n	800971a <tcp_input+0x5ea>
          if (pcb->refused_data != NULL) {
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d009      	beq.n	80096d0 <tcp_input+0x5a0>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096c0:	69fa      	ldr	r2, [r7, #28]
 80096c2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80096c4:	7b52      	ldrb	r2, [r2, #13]
 80096c6:	f042 0220 	orr.w	r2, r2, #32
 80096ca:	b2d2      	uxtb	r2, r2
 80096cc:	735a      	strb	r2, [r3, #13]
 80096ce:	e024      	b.n	800971a <tcp_input+0x5ea>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80096d8:	d005      	beq.n	80096e6 <tcp_input+0x5b6>
              pcb->rcv_wnd++;
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096de:	3301      	adds	r3, #1
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00c      	beq.n	800970a <tcp_input+0x5da>
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	4618      	mov	r0, r3
 80096fc:	69f9      	ldr	r1, [r7, #28]
 80096fe:	2200      	movs	r2, #0
 8009700:	2300      	movs	r3, #0
 8009702:	47a0      	blx	r4
 8009704:	4603      	mov	r3, r0
 8009706:	74fb      	strb	r3, [r7, #19]
 8009708:	e001      	b.n	800970e <tcp_input+0x5de>
 800970a:	2300      	movs	r3, #0
 800970c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800970e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009712:	f113 0f0d 	cmn.w	r3, #13
 8009716:	d100      	bne.n	800971a <tcp_input+0x5ea>
              goto aborted;
 8009718:	e00c      	b.n	8009734 <tcp_input+0x604>
            }
          }
        }

        tcp_input_pcb = NULL;
 800971a:	4b2b      	ldr	r3, [pc, #172]	; (80097c8 <tcp_input+0x698>)
 800971c:	2200      	movs	r2, #0
 800971e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009720:	69f8      	ldr	r0, [r7, #28]
 8009722:	f000 f861 	bl	80097e8 <tcp_input_delayed_close>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d000      	beq.n	800972e <tcp_input+0x5fe>
          goto aborted;
 800972c:	e002      	b.n	8009734 <tcp_input+0x604>
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800972e:	69f8      	ldr	r0, [r7, #28]
 8009730:	f002 f830 	bl	800b794 <tcp_output>
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 8009734:	4b24      	ldr	r3, [pc, #144]	; (80097c8 <tcp_input+0x698>)
 8009736:	2200      	movs	r2, #0
 8009738:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800973a:	4b21      	ldr	r3, [pc, #132]	; (80097c0 <tcp_input+0x690>)
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009740:	4b22      	ldr	r3, [pc, #136]	; (80097cc <tcp_input+0x69c>)
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d033      	beq.n	80097b0 <tcp_input+0x680>
      pbuf_free(inseg.p);
 8009748:	4b20      	ldr	r3, [pc, #128]	; (80097cc <tcp_input+0x69c>)
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	4618      	mov	r0, r3
 800974e:	f7fe f8e3 	bl	8007918 <pbuf_free>
      inseg.p = NULL;
 8009752:	4b1e      	ldr	r3, [pc, #120]	; (80097cc <tcp_input+0x69c>)
 8009754:	2200      	movs	r2, #0
 8009756:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009758:	e02e      	b.n	80097b8 <tcp_input+0x688>
    }
  } else {
    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800975a:	4b1d      	ldr	r3, [pc, #116]	; (80097d0 <tcp_input+0x6a0>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	899b      	ldrh	r3, [r3, #12]
 8009760:	b29b      	uxth	r3, r3
 8009762:	4618      	mov	r0, r3
 8009764:	f7fd f848 	bl	80067f8 <lwip_htons>
 8009768:	4603      	mov	r3, r0
 800976a:	b2db      	uxtb	r3, r3
 800976c:	f003 0304 	and.w	r3, r3, #4
 8009770:	2b00      	cmp	r3, #0
 8009772:	d119      	bne.n	80097a8 <tcp_input+0x678>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009774:	4b17      	ldr	r3, [pc, #92]	; (80097d4 <tcp_input+0x6a4>)
 8009776:	681d      	ldr	r5, [r3, #0]
 8009778:	4b17      	ldr	r3, [pc, #92]	; (80097d8 <tcp_input+0x6a8>)
 800977a:	881b      	ldrh	r3, [r3, #0]
 800977c:	461a      	mov	r2, r3
 800977e:	4b17      	ldr	r3, [pc, #92]	; (80097dc <tcp_input+0x6ac>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009784:	4b12      	ldr	r3, [pc, #72]	; (80097d0 <tcp_input+0x6a0>)
 8009786:	681b      	ldr	r3, [r3, #0]
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009788:	885b      	ldrh	r3, [r3, #2]
 800978a:	b29a      	uxth	r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800978c:	4b10      	ldr	r3, [pc, #64]	; (80097d0 <tcp_input+0x6a0>)
 800978e:	681b      	ldr	r3, [r3, #0]
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	b29b      	uxth	r3, r3
 8009794:	4912      	ldr	r1, [pc, #72]	; (80097e0 <tcp_input+0x6b0>)
 8009796:	9100      	str	r1, [sp, #0]
 8009798:	9201      	str	r2, [sp, #4]
 800979a:	9302      	str	r3, [sp, #8]
 800979c:	2000      	movs	r0, #0
 800979e:	4629      	mov	r1, r5
 80097a0:	4622      	mov	r2, r4
 80097a2:	4b10      	ldr	r3, [pc, #64]	; (80097e4 <tcp_input+0x6b4>)
 80097a4:	f002 fc6e 	bl	800c084 <tcp_rst>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    }
    pbuf_free(p);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7fe f8b5 	bl	8007918 <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80097ae:	e003      	b.n	80097b8 <tcp_input+0x688>
 80097b0:	e002      	b.n	80097b8 <tcp_input+0x688>
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7fe f8b0 	bl	8007918 <pbuf_free>
}
 80097b8:	3720      	adds	r7, #32
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bdb0      	pop	{r4, r5, r7, pc}
 80097be:	bf00      	nop
 80097c0:	1ffe8b50 	.word	0x1ffe8b50
 80097c4:	1ffe8b4d 	.word	0x1ffe8b4d
 80097c8:	1ffeff6c 	.word	0x1ffeff6c
 80097cc:	1ffe8b20 	.word	0x1ffe8b20
 80097d0:	1ffe8b30 	.word	0x1ffe8b30
 80097d4:	1ffe8b44 	.word	0x1ffe8b44
 80097d8:	1ffe8b4a 	.word	0x1ffe8b4a
 80097dc:	1ffe8b40 	.word	0x1ffe8b40
 80097e0:	1ffe9110 	.word	0x1ffe9110
 80097e4:	1ffe9114 	.word	0x1ffe9114

080097e8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);

  if (recv_flags & TF_CLOSED) {
 80097f0:	4b13      	ldr	r3, [pc, #76]	; (8009840 <tcp_input_delayed_close+0x58>)
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	f003 0310 	and.w	r3, r3, #16
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d01c      	beq.n	8009836 <tcp_input_delayed_close+0x4e>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	8b5b      	ldrh	r3, [r3, #26]
 8009800:	f003 0310 	and.w	r3, r3, #16
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10d      	bne.n	8009824 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800980e:	2b00      	cmp	r3, #0
 8009810:	d008      	beq.n	8009824 <tcp_input_delayed_close+0x3c>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	6912      	ldr	r2, [r2, #16]
 800981c:	4610      	mov	r0, r2
 800981e:	f06f 010e 	mvn.w	r1, #14
 8009822:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009824:	4807      	ldr	r0, [pc, #28]	; (8009844 <tcp_input_delayed_close+0x5c>)
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	f7ff fb82 	bl	8008f30 <tcp_pcb_remove>
    tcp_free(pcb);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7fe fb15 	bl	8007e5c <tcp_free>
    return 1;
 8009832:	2301      	movs	r3, #1
 8009834:	e000      	b.n	8009838 <tcp_input_delayed_close+0x50>
  }
  return 0;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	1ffe8b4d 	.word	0x1ffe8b4d
 8009844:	1ffeff58 	.word	0x1ffeff58

08009848 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009848:	b5b0      	push	{r4, r5, r7, lr}
 800984a:	b08a      	sub	sp, #40	; 0x28
 800984c:	af04      	add	r7, sp, #16
 800984e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009850:	4b74      	ldr	r3, [pc, #464]	; (8009a24 <tcp_listen_input+0x1dc>)
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b00      	cmp	r3, #0
 800985a:	d000      	beq.n	800985e <tcp_listen_input+0x16>
    /* An incoming RST should be ignored. Return. */
    return;
 800985c:	e0de      	b.n	8009a1c <tcp_listen_input+0x1d4>

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800985e:	4b71      	ldr	r3, [pc, #452]	; (8009a24 <tcp_listen_input+0x1dc>)
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	f003 0310 	and.w	r3, r3, #16
 8009866:	2b00      	cmp	r3, #0
 8009868:	d01a      	beq.n	80098a0 <tcp_listen_input+0x58>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800986a:	4b6f      	ldr	r3, [pc, #444]	; (8009a28 <tcp_listen_input+0x1e0>)
 800986c:	681d      	ldr	r5, [r3, #0]
 800986e:	4b6f      	ldr	r3, [pc, #444]	; (8009a2c <tcp_listen_input+0x1e4>)
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	461a      	mov	r2, r3
 8009874:	4b6e      	ldr	r3, [pc, #440]	; (8009a30 <tcp_listen_input+0x1e8>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	18d4      	adds	r4, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800987a:	4b6e      	ldr	r3, [pc, #440]	; (8009a34 <tcp_listen_input+0x1ec>)
 800987c:	681b      	ldr	r3, [r3, #0]
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800987e:	885b      	ldrh	r3, [r3, #2]
 8009880:	b29a      	uxth	r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009882:	4b6c      	ldr	r3, [pc, #432]	; (8009a34 <tcp_listen_input+0x1ec>)
 8009884:	681b      	ldr	r3, [r3, #0]
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	b29b      	uxth	r3, r3
 800988a:	496b      	ldr	r1, [pc, #428]	; (8009a38 <tcp_listen_input+0x1f0>)
 800988c:	9100      	str	r1, [sp, #0]
 800988e:	9201      	str	r2, [sp, #4]
 8009890:	9302      	str	r3, [sp, #8]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	4629      	mov	r1, r5
 8009896:	4622      	mov	r2, r4
 8009898:	4b68      	ldr	r3, [pc, #416]	; (8009a3c <tcp_listen_input+0x1f4>)
 800989a:	f002 fbf3 	bl	800c084 <tcp_rst>
 800989e:	e0bc      	b.n	8009a1a <tcp_listen_input+0x1d2>
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
 80098a0:	4b60      	ldr	r3, [pc, #384]	; (8009a24 <tcp_listen_input+0x1dc>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 80b6 	beq.w	8009a1a <tcp_listen_input+0x1d2>
    LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
#if TCP_LISTEN_BACKLOG
    if (pcb->accepts_pending >= pcb->backlog) {
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	7f5a      	ldrb	r2, [r3, #29]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	7f1b      	ldrb	r3, [r3, #28]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d300      	bcc.n	80098bc <tcp_listen_input+0x74>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return;
 80098ba:	e0af      	b.n	8009a1c <tcp_listen_input+0x1d4>
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	7d5b      	ldrb	r3, [r3, #21]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff fa6b 	bl	8008d9c <tcp_alloc>
 80098c6:	6178      	str	r0, [r7, #20]
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d112      	bne.n	80098f4 <tcp_listen_input+0xac>
      err_t err;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00b      	beq.n	80098ee <tcp_listen_input+0xa6>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	6912      	ldr	r2, [r2, #16]
 80098de:	4610      	mov	r0, r2
 80098e0:	2100      	movs	r1, #0
 80098e2:	f04f 32ff 	mov.w	r2, #4294967295
 80098e6:	4798      	blx	r3
 80098e8:	4603      	mov	r3, r0
 80098ea:	74fb      	strb	r3, [r7, #19]
      LWIP_UNUSED_ARG(err); /* err not useful here */
      return;
 80098ec:	e096      	b.n	8009a1c <tcp_listen_input+0x1d4>
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
      err_t err;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80098ee:	23f0      	movs	r3, #240	; 0xf0
 80098f0:	74fb      	strb	r3, [r7, #19]
      LWIP_UNUSED_ARG(err); /* err not useful here */
      return;
 80098f2:	e093      	b.n	8009a1c <tcp_listen_input+0x1d4>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	7f5b      	ldrb	r3, [r3, #29]
 80098f8:	3301      	adds	r3, #1
 80098fa:	b2da      	uxtb	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	775a      	strb	r2, [r3, #29]
    tcp_set_flags(npcb, TF_BACKLOGPEND);
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	8b5b      	ldrh	r3, [r3, #26]
 8009904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009908:	b29a      	uxth	r2, r3
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	835a      	strh	r2, [r3, #26]
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800990e:	4b4c      	ldr	r3, [pc, #304]	; (8009a40 <tcp_listen_input+0x1f8>)
 8009910:	695a      	ldr	r2, [r3, #20]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009916:	4b4a      	ldr	r3, [pc, #296]	; (8009a40 <tcp_listen_input+0x1f8>)
 8009918:	691a      	ldr	r2, [r3, #16]
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	8ada      	ldrh	r2, [r3, #22]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009926:	4b43      	ldr	r3, [pc, #268]	; (8009a34 <tcp_listen_input+0x1ec>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	b29a      	uxth	r2, r3
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	2203      	movs	r2, #3
 8009936:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009938:	4b3d      	ldr	r3, [pc, #244]	; (8009a30 <tcp_listen_input+0x1e8>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	1c5a      	adds	r2, r3, #1
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800994a:	6978      	ldr	r0, [r7, #20]
 800994c:	f7ff fb3c 	bl	8008fc8 <tcp_next_iss>
 8009950:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800996a:	4b31      	ldr	r3, [pc, #196]	; (8009a30 <tcp_listen_input+0x1e8>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	1e5a      	subs	r2, r3, #1
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	691a      	ldr	r2, [r3, #16]
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	611a      	str	r2, [r3, #16]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
    npcb->listener = pcb;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	7a5b      	ldrb	r3, [r3, #9]
 8009986:	f003 030c 	and.w	r3, r3, #12
 800998a:	b2da      	uxtb	r2, r3
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	7a1a      	ldrb	r2, [r3, #8]
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	721a      	strb	r2, [r3, #8]
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
 8009998:	4b2a      	ldr	r3, [pc, #168]	; (8009a44 <tcp_listen_input+0x1fc>)
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	60da      	str	r2, [r3, #12]
 80099a0:	4a28      	ldr	r2, [pc, #160]	; (8009a44 <tcp_listen_input+0x1fc>)
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	6013      	str	r3, [r2, #0]
 80099a6:	f002 fce3 	bl	800c370 <tcp_timer_needed>
 80099aa:	4b27      	ldr	r3, [pc, #156]	; (8009a48 <tcp_listen_input+0x200>)
 80099ac:	2201      	movs	r2, #1
 80099ae:	701a      	strb	r2, [r3, #0]

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
 80099b0:	6978      	ldr	r0, [r7, #20]
 80099b2:	f001 fc13 	bl	800b1dc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80099b6:	4b1f      	ldr	r3, [pc, #124]	; (8009a34 <tcp_listen_input+0x1ec>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	89db      	ldrh	r3, [r3, #14]
 80099bc:	b29a      	uxth	r2, r3
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	3304      	adds	r3, #4
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fc fc61 	bl	80062a0 <ip4_route>
 80099de:	4602      	mov	r2, r0
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	3304      	adds	r3, #4
 80099e4:	4620      	mov	r0, r4
 80099e6:	4611      	mov	r1, r2
 80099e8:	461a      	mov	r2, r3
 80099ea:	f7ff fb05 	bl	8008ff8 <tcp_eff_send_mss_netif>
 80099ee:	4603      	mov	r3, r0
 80099f0:	461a      	mov	r2, r3
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	865a      	strh	r2, [r3, #50]	; 0x32
      return;
    }
#endif

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80099f6:	6978      	ldr	r0, [r7, #20]
 80099f8:	2112      	movs	r1, #18
 80099fa:	f001 fe3b 	bl	800b674 <tcp_enqueue_flags>
 80099fe:	4603      	mov	r3, r0
 8009a00:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 8009a02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d004      	beq.n	8009a14 <tcp_listen_input+0x1cc>
      tcp_abandon(npcb, 0);
 8009a0a:	6978      	ldr	r0, [r7, #20]
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	f7fe fbe1 	bl	80081d4 <tcp_abandon>
      return;
 8009a12:	e003      	b.n	8009a1c <tcp_listen_input+0x1d4>
    }
    tcp_output(npcb);
 8009a14:	6978      	ldr	r0, [r7, #20]
 8009a16:	f001 febd 	bl	800b794 <tcp_output>
  }
  return;
 8009a1a:	bf00      	nop
}
 8009a1c:	3718      	adds	r7, #24
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bdb0      	pop	{r4, r5, r7, pc}
 8009a22:	bf00      	nop
 8009a24:	1ffe8b4c 	.word	0x1ffe8b4c
 8009a28:	1ffe8b44 	.word	0x1ffe8b44
 8009a2c:	1ffe8b4a 	.word	0x1ffe8b4a
 8009a30:	1ffe8b40 	.word	0x1ffe8b40
 8009a34:	1ffe8b30 	.word	0x1ffe8b30
 8009a38:	1ffe9110 	.word	0x1ffe9110
 8009a3c:	1ffe9114 	.word	0x1ffe9114
 8009a40:	1ffe9100 	.word	0x1ffe9100
 8009a44:	1ffeff58 	.word	0x1ffeff58
 8009a48:	1ffeff54 	.word	0x1ffeff54

08009a4c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009a4c:	b5b0      	push	{r4, r5, r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af04      	add	r7, sp, #16
 8009a52:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009a54:	4b2a      	ldr	r3, [pc, #168]	; (8009b00 <tcp_timewait_input+0xb4>)
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	f003 0304 	and.w	r3, r3, #4
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d000      	beq.n	8009a62 <tcp_timewait_input+0x16>
    return;
 8009a60:	e04a      	b.n	8009af8 <tcp_timewait_input+0xac>
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009a62:	4b27      	ldr	r3, [pc, #156]	; (8009b00 <tcp_timewait_input+0xb4>)
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	f003 0302 	and.w	r3, r3, #2
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d02b      	beq.n	8009ac6 <tcp_timewait_input+0x7a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009a6e:	4b25      	ldr	r3, [pc, #148]	; (8009b04 <tcp_timewait_input+0xb8>)
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	db2e      	blt.n	8009ada <tcp_timewait_input+0x8e>
 8009a7c:	4b21      	ldr	r3, [pc, #132]	; (8009b04 <tcp_timewait_input+0xb8>)
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a84:	6879      	ldr	r1, [r7, #4]
 8009a86:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a88:	440b      	add	r3, r1
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	dc24      	bgt.n	8009ada <tcp_timewait_input+0x8e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a90:	4b1d      	ldr	r3, [pc, #116]	; (8009b08 <tcp_timewait_input+0xbc>)
 8009a92:	681d      	ldr	r5, [r3, #0]
 8009a94:	4b1d      	ldr	r3, [pc, #116]	; (8009b0c <tcp_timewait_input+0xc0>)
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	461a      	mov	r2, r3
 8009a9a:	4b1a      	ldr	r3, [pc, #104]	; (8009b04 <tcp_timewait_input+0xb8>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009aa0:	4b1b      	ldr	r3, [pc, #108]	; (8009b10 <tcp_timewait_input+0xc4>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009aa4:	885b      	ldrh	r3, [r3, #2]
 8009aa6:	b29a      	uxth	r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009aa8:	4b19      	ldr	r3, [pc, #100]	; (8009b10 <tcp_timewait_input+0xc4>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	4918      	ldr	r1, [pc, #96]	; (8009b14 <tcp_timewait_input+0xc8>)
 8009ab2:	9100      	str	r1, [sp, #0]
 8009ab4:	9201      	str	r2, [sp, #4]
 8009ab6:	9302      	str	r3, [sp, #8]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	4629      	mov	r1, r5
 8009abc:	4622      	mov	r2, r4
 8009abe:	4b16      	ldr	r3, [pc, #88]	; (8009b18 <tcp_timewait_input+0xcc>)
 8009ac0:	f002 fae0 	bl	800c084 <tcp_rst>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
      return;
 8009ac4:	e018      	b.n	8009af8 <tcp_timewait_input+0xac>
    }
  } else if (flags & TCP_FIN) {
 8009ac6:	4b0e      	ldr	r3, [pc, #56]	; (8009b00 <tcp_timewait_input+0xb4>)
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <tcp_timewait_input+0x8e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009ad2:	4b12      	ldr	r3, [pc, #72]	; (8009b1c <tcp_timewait_input+0xd0>)
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009ada:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <tcp_timewait_input+0xc0>)
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d009      	beq.n	8009af6 <tcp_timewait_input+0xaa>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	8b5b      	ldrh	r3, [r3, #26]
 8009ae6:	f043 0302 	orr.w	r3, r3, #2
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 fe4f 	bl	800b794 <tcp_output>
  }
  return;
 8009af6:	bf00      	nop
}
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bdb0      	pop	{r4, r5, r7, pc}
 8009afe:	bf00      	nop
 8009b00:	1ffe8b4c 	.word	0x1ffe8b4c
 8009b04:	1ffe8b40 	.word	0x1ffe8b40
 8009b08:	1ffe8b44 	.word	0x1ffe8b44
 8009b0c:	1ffe8b4a 	.word	0x1ffe8b4a
 8009b10:	1ffe8b30 	.word	0x1ffe8b30
 8009b14:	1ffe9110 	.word	0x1ffe9110
 8009b18:	1ffe9114 	.word	0x1ffe9114
 8009b1c:	1ffeff5c 	.word	0x1ffeff5c

08009b20 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009b20:	b5b0      	push	{r4, r5, r7, lr}
 8009b22:	b08c      	sub	sp, #48	; 0x30
 8009b24:	af04      	add	r7, sp, #16
 8009b26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009b30:	4ba1      	ldr	r3, [pc, #644]	; (8009db8 <tcp_process+0x298>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	f003 0304 	and.w	r3, r3, #4
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d042      	beq.n	8009bc2 <tcp_process+0xa2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	7d1b      	ldrb	r3, [r3, #20]
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d108      	bne.n	8009b56 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b48:	4b9c      	ldr	r3, [pc, #624]	; (8009dbc <tcp_process+0x29c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d123      	bne.n	8009b98 <tcp_process+0x78>
        acceptable = 1;
 8009b50:	2301      	movs	r3, #1
 8009b52:	76fb      	strb	r3, [r7, #27]
 8009b54:	e020      	b.n	8009b98 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b5a:	4b99      	ldr	r3, [pc, #612]	; (8009dc0 <tcp_process+0x2a0>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d102      	bne.n	8009b68 <tcp_process+0x48>
        acceptable = 1;
 8009b62:	2301      	movs	r3, #1
 8009b64:	76fb      	strb	r3, [r7, #27]
 8009b66:	e017      	b.n	8009b98 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009b68:	4b95      	ldr	r3, [pc, #596]	; (8009dc0 <tcp_process+0x2a0>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	db10      	blt.n	8009b98 <tcp_process+0x78>
 8009b76:	4b92      	ldr	r3, [pc, #584]	; (8009dc0 <tcp_process+0x2a0>)
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b82:	440b      	add	r3, r1
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	dc06      	bgt.n	8009b98 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	8b5b      	ldrh	r3, [r3, #26]
 8009b8e:	f043 0302 	orr.w	r3, r3, #2
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009b98:	7efb      	ldrb	r3, [r7, #27]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00f      	beq.n	8009bbe <tcp_process+0x9e>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
 8009b9e:	4b89      	ldr	r3, [pc, #548]	; (8009dc4 <tcp_process+0x2a4>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	f043 0308 	orr.w	r3, r3, #8
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	4b86      	ldr	r3, [pc, #536]	; (8009dc4 <tcp_process+0x2a4>)
 8009baa:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	8b5b      	ldrh	r3, [r3, #26]
 8009bb0:	f023 0301 	bic.w	r3, r3, #1
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009bba:	23f2      	movs	r3, #242	; 0xf2
 8009bbc:	e33c      	b.n	800a238 <tcp_process+0x718>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e33a      	b.n	800a238 <tcp_process+0x718>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009bc2:	4b7d      	ldr	r3, [pc, #500]	; (8009db8 <tcp_process+0x298>)
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d010      	beq.n	8009bf0 <tcp_process+0xd0>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	7d1b      	ldrb	r3, [r3, #20]
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d00c      	beq.n	8009bf0 <tcp_process+0xd0>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	7d1b      	ldrb	r3, [r3, #20]
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	d008      	beq.n	8009bf0 <tcp_process+0xd0>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	8b5b      	ldrh	r3, [r3, #26]
 8009be2:	f043 0302 	orr.w	r3, r3, #2
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	e323      	b.n	800a238 <tcp_process+0x718>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	8b5b      	ldrh	r3, [r3, #26]
 8009bf4:	f003 0310 	and.w	r3, r3, #16
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d103      	bne.n	8009c04 <tcp_process+0xe4>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009bfc:	4b72      	ldr	r3, [pc, #456]	; (8009dc8 <tcp_process+0x2a8>)
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f001 fae1 	bl	800b1dc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	7d1b      	ldrb	r3, [r3, #20]
 8009c1e:	3b02      	subs	r3, #2
 8009c20:	2b07      	cmp	r3, #7
 8009c22:	f200 8307 	bhi.w	800a234 <tcp_process+0x714>
 8009c26:	a201      	add	r2, pc, #4	; (adr r2, 8009c2c <tcp_process+0x10c>)
 8009c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009e3b 	.word	0x08009e3b
 8009c34:	08009fa3 	.word	0x08009fa3
 8009c38:	08009fcd 	.word	0x08009fcd
 8009c3c:	0800a0df 	.word	0x0800a0df
 8009c40:	08009fa3 	.word	0x08009fa3
 8009c44:	0800a16b 	.word	0x0800a16b
 8009c48:	0800a1fd 	.word	0x0800a1fd
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009c4c:	4b5a      	ldr	r3, [pc, #360]	; (8009db8 <tcp_process+0x298>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 80c3 	beq.w	8009de0 <tcp_process+0x2c0>
 8009c5a:	4b57      	ldr	r3, [pc, #348]	; (8009db8 <tcp_process+0x298>)
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f000 80bc 	beq.w	8009de0 <tcp_process+0x2c0>
          && (ackno == pcb->lastack + 1)) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	4b53      	ldr	r3, [pc, #332]	; (8009dbc <tcp_process+0x29c>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	f040 80b4 	bne.w	8009de0 <tcp_process+0x2c0>
        pcb->rcv_nxt = seqno + 1;
 8009c78:	4b51      	ldr	r3, [pc, #324]	; (8009dc0 <tcp_process+0x2a0>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009c8a:	4b4c      	ldr	r3, [pc, #304]	; (8009dbc <tcp_process+0x29c>)
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009c92:	4b4e      	ldr	r3, [pc, #312]	; (8009dcc <tcp_process+0x2ac>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	89db      	ldrh	r3, [r3, #14]
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009cac:	4b44      	ldr	r3, [pc, #272]	; (8009dc0 <tcp_process+0x2a0>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	1e5a      	subs	r2, r3, #1
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2204      	movs	r2, #4
 8009cba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fc faeb 	bl	80062a0 <ip4_route>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	f7ff f98f 	bl	8008ff8 <tcp_eff_send_mss_netif>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	461a      	mov	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ce6:	009a      	lsls	r2, r3, #2
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009cec:	005b      	lsls	r3, r3, #1
 8009cee:	f241 111c 	movw	r1, #4380	; 0x111c
 8009cf2:	428b      	cmp	r3, r1
 8009cf4:	bf38      	it	cc
 8009cf6:	460b      	movcc	r3, r1
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d204      	bcs.n	8009d06 <tcp_process+0x1e6>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	e00d      	b.n	8009d22 <tcp_process+0x202>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d0a:	005b      	lsls	r3, r3, #1
 8009d0c:	f241 121c 	movw	r2, #4380	; 0x111c
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d904      	bls.n	8009d1e <tcp_process+0x1fe>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d18:	005b      	lsls	r3, r3, #1
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	e001      	b.n	8009d22 <tcp_process+0x202>
 8009d1e:	f241 131c 	movw	r3, #4380	; 0x111c
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
        --pcb->snd_queuelen;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d3c:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d107      	bne.n	8009d54 <tcp_process+0x234>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d48:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
          pcb->unsent = rseg->next;
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	66da      	str	r2, [r3, #108]	; 0x6c
 8009d52:	e003      	b.n	8009d5c <tcp_process+0x23c>
        } else {
          pcb->unacked = rseg->next;
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009d5c:	69f8      	ldr	r0, [r7, #28]
 8009d5e:	f7fe feed 	bl	8008b3c <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d104      	bne.n	8009d74 <tcp_process+0x254>
          pcb->rtime = -1;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d70:	861a      	strh	r2, [r3, #48]	; 0x30
 8009d72:	e006      	b.n	8009d82 <tcp_process+0x262>
        } else {
          pcb->rtime = 0;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00b      	beq.n	8009da4 <tcp_process+0x284>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	6912      	ldr	r2, [r2, #16]
 8009d96:	4610      	mov	r0, r2
 8009d98:	6879      	ldr	r1, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	4798      	blx	r3
 8009d9e:	4603      	mov	r3, r0
 8009da0:	76bb      	strb	r3, [r7, #26]
 8009da2:	e001      	b.n	8009da8 <tcp_process+0x288>
 8009da4:	2300      	movs	r3, #0
 8009da6:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009da8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009dac:	f113 0f0d 	cmn.w	r3, #13
 8009db0:	d10e      	bne.n	8009dd0 <tcp_process+0x2b0>
          return ERR_ABRT;
 8009db2:	23f3      	movs	r3, #243	; 0xf3
 8009db4:	e240      	b.n	800a238 <tcp_process+0x718>
 8009db6:	bf00      	nop
 8009db8:	1ffe8b4c 	.word	0x1ffe8b4c
 8009dbc:	1ffe8b44 	.word	0x1ffe8b44
 8009dc0:	1ffe8b40 	.word	0x1ffe8b40
 8009dc4:	1ffe8b4d 	.word	0x1ffe8b4d
 8009dc8:	1ffeff5c 	.word	0x1ffeff5c
 8009dcc:	1ffe8b30 	.word	0x1ffe8b30
        }
        tcp_ack_now(pcb);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	8b5b      	ldrh	r3, [r3, #26]
 8009dd4:	f043 0302 	orr.w	r3, r3, #2
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	835a      	strh	r2, [r3, #26]
 8009dde:	e02b      	b.n	8009e38 <tcp_process+0x318>
      }
      /* received ACK? possibly a half-open connection */
      else if (flags & TCP_ACK) {
 8009de0:	4b98      	ldr	r3, [pc, #608]	; (800a044 <tcp_process+0x524>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	f003 0310 	and.w	r3, r3, #16
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d025      	beq.n	8009e38 <tcp_process+0x318>
        /* send a RST to bring the other side in a non-synchronized state. */
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009dec:	4b96      	ldr	r3, [pc, #600]	; (800a048 <tcp_process+0x528>)
 8009dee:	681d      	ldr	r5, [r3, #0]
 8009df0:	4b96      	ldr	r3, [pc, #600]	; (800a04c <tcp_process+0x52c>)
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	461a      	mov	r2, r3
 8009df6:	4b96      	ldr	r3, [pc, #600]	; (800a050 <tcp_process+0x530>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	18d4      	adds	r4, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009dfc:	4b95      	ldr	r3, [pc, #596]	; (800a054 <tcp_process+0x534>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
        tcp_ack_now(pcb);
      }
      /* received ACK? possibly a half-open connection */
      else if (flags & TCP_ACK) {
        /* send a RST to bring the other side in a non-synchronized state. */
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e00:	885b      	ldrh	r3, [r3, #2]
 8009e02:	b29a      	uxth	r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e04:	4b93      	ldr	r3, [pc, #588]	; (800a054 <tcp_process+0x534>)
 8009e06:	681b      	ldr	r3, [r3, #0]
        tcp_ack_now(pcb);
      }
      /* received ACK? possibly a half-open connection */
      else if (flags & TCP_ACK) {
        /* send a RST to bring the other side in a non-synchronized state. */
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	4992      	ldr	r1, [pc, #584]	; (800a058 <tcp_process+0x538>)
 8009e0e:	9100      	str	r1, [sp, #0]
 8009e10:	9201      	str	r2, [sp, #4]
 8009e12:	9302      	str	r3, [sp, #8]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	4629      	mov	r1, r5
 8009e18:	4622      	mov	r2, r4
 8009e1a:	4b90      	ldr	r3, [pc, #576]	; (800a05c <tcp_process+0x53c>)
 8009e1c:	f002 f932 	bl	800c084 <tcp_rst>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        /* Resend SYN immediately (don't wait for rto timeout) to establish
          connection faster, but do not send more SYNs than we otherwise would
          have, or we might get caught in a loop on loopback interfaces. */
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e26:	2b05      	cmp	r3, #5
 8009e28:	d806      	bhi.n	8009e38 <tcp_process+0x318>
          pcb->rtime = 0;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f001 ff8b 	bl	800bd4c <tcp_rexmit_rto>
        }
      }
      break;
 8009e36:	e1fe      	b.n	800a236 <tcp_process+0x716>
 8009e38:	e1fd      	b.n	800a236 <tcp_process+0x716>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009e3a:	4b82      	ldr	r3, [pc, #520]	; (800a044 <tcp_process+0x524>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	f003 0310 	and.w	r3, r3, #16
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f000 809b 	beq.w	8009f7e <tcp_process+0x45e>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e48:	4b7f      	ldr	r3, [pc, #508]	; (800a048 <tcp_process+0x528>)
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	3b01      	subs	r3, #1
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	db76      	blt.n	8009f46 <tcp_process+0x426>
 8009e58:	4b7b      	ldr	r3, [pc, #492]	; (800a048 <tcp_process+0x528>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	dc6f      	bgt.n	8009f46 <tcp_process+0x426>
          pcb->state = ESTABLISHED;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2204      	movs	r2, #4
 8009e6a:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d102      	bne.n	8009e7a <tcp_process+0x35a>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009e74:	23fa      	movs	r3, #250	; 0xfa
 8009e76:	76bb      	strb	r3, [r7, #26]
 8009e78:	e015      	b.n	8009ea6 <tcp_process+0x386>
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
#endif
            tcp_backlog_accepted(pcb);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7fe f854 	bl	8007f28 <tcp_backlog_accepted>
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00b      	beq.n	8009ea2 <tcp_process+0x382>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e8e:	699b      	ldr	r3, [r3, #24]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	6912      	ldr	r2, [r2, #16]
 8009e94:	4610      	mov	r0, r2
 8009e96:	6879      	ldr	r1, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	4798      	blx	r3
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	76bb      	strb	r3, [r7, #26]
 8009ea0:	e001      	b.n	8009ea6 <tcp_process+0x386>
 8009ea2:	23f0      	movs	r3, #240	; 0xf0
 8009ea4:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009ea6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d009      	beq.n	8009ec2 <tcp_process+0x3a2>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009eae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009eb2:	f113 0f0d 	cmn.w	r3, #13
 8009eb6:	d002      	beq.n	8009ebe <tcp_process+0x39e>
              tcp_abort(pcb);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7fe fa31 	bl	8008320 <tcp_abort>
            }
            return ERR_ABRT;
 8009ebe:	23f3      	movs	r3, #243	; 0xf3
 8009ec0:	e1ba      	b.n	800a238 <tcp_process+0x718>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fa98 	bl	800a3f8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009ec8:	4b65      	ldr	r3, [pc, #404]	; (800a060 <tcp_process+0x540>)
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d005      	beq.n	8009edc <tcp_process+0x3bc>
            recv_acked--;
 8009ed0:	4b63      	ldr	r3, [pc, #396]	; (800a060 <tcp_process+0x540>)
 8009ed2:	881b      	ldrh	r3, [r3, #0]
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	4b61      	ldr	r3, [pc, #388]	; (800a060 <tcp_process+0x540>)
 8009eda:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ee0:	009a      	lsls	r2, r3, #2
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	f241 111c 	movw	r1, #4380	; 0x111c
 8009eec:	428b      	cmp	r3, r1
 8009eee:	bf38      	it	cc
 8009ef0:	460b      	movcc	r3, r1
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d204      	bcs.n	8009f00 <tcp_process+0x3e0>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	e00d      	b.n	8009f1c <tcp_process+0x3fc>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f04:	005b      	lsls	r3, r3, #1
 8009f06:	f241 121c 	movw	r2, #4380	; 0x111c
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d904      	bls.n	8009f18 <tcp_process+0x3f8>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	e001      	b.n	8009f1c <tcp_process+0x3fc>
 8009f18:	f241 131c 	movw	r3, #4380	; 0x111c
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009f22:	4b50      	ldr	r3, [pc, #320]	; (800a064 <tcp_process+0x544>)
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	f003 0320 	and.w	r3, r3, #32
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00a      	beq.n	8009f44 <tcp_process+0x424>
            tcp_ack_now(pcb);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	8b5b      	ldrh	r3, [r3, #26]
 8009f32:	f043 0302 	orr.w	r3, r3, #2
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2207      	movs	r2, #7
 8009f40:	751a      	strb	r2, [r3, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009f42:	e01b      	b.n	8009f7c <tcp_process+0x45c>
 8009f44:	e01a      	b.n	8009f7c <tcp_process+0x45c>
            tcp_ack_now(pcb);
            pcb->state = CLOSE_WAIT;
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f46:	4b40      	ldr	r3, [pc, #256]	; (800a048 <tcp_process+0x528>)
 8009f48:	681d      	ldr	r5, [r3, #0]
 8009f4a:	4b40      	ldr	r3, [pc, #256]	; (800a04c <tcp_process+0x52c>)
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	4b3f      	ldr	r3, [pc, #252]	; (800a050 <tcp_process+0x530>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	18d4      	adds	r4, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f56:	4b3f      	ldr	r3, [pc, #252]	; (800a054 <tcp_process+0x534>)
 8009f58:	681b      	ldr	r3, [r3, #0]
            tcp_ack_now(pcb);
            pcb->state = CLOSE_WAIT;
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f5a:	885b      	ldrh	r3, [r3, #2]
 8009f5c:	b29a      	uxth	r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f5e:	4b3d      	ldr	r3, [pc, #244]	; (800a054 <tcp_process+0x534>)
 8009f60:	681b      	ldr	r3, [r3, #0]
            tcp_ack_now(pcb);
            pcb->state = CLOSE_WAIT;
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	493c      	ldr	r1, [pc, #240]	; (800a058 <tcp_process+0x538>)
 8009f68:	9100      	str	r1, [sp, #0]
 8009f6a:	9201      	str	r2, [sp, #4]
 8009f6c:	9302      	str	r3, [sp, #8]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4629      	mov	r1, r5
 8009f72:	4622      	mov	r2, r4
 8009f74:	4b39      	ldr	r3, [pc, #228]	; (800a05c <tcp_process+0x53c>)
 8009f76:	f002 f885 	bl	800c084 <tcp_rst>
 8009f7a:	e011      	b.n	8009fa0 <tcp_process+0x480>
 8009f7c:	e010      	b.n	8009fa0 <tcp_process+0x480>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009f7e:	4b31      	ldr	r3, [pc, #196]	; (800a044 <tcp_process+0x524>)
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	f003 0302 	and.w	r3, r3, #2
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00a      	beq.n	8009fa0 <tcp_process+0x480>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8e:	1e5a      	subs	r2, r3, #1
 8009f90:	4b2f      	ldr	r3, [pc, #188]	; (800a050 <tcp_process+0x530>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d103      	bne.n	8009fa0 <tcp_process+0x480>
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 fee7 	bl	800bd6c <tcp_rexmit>
      }
      break;
 8009f9e:	e14a      	b.n	800a236 <tcp_process+0x716>
 8009fa0:	e149      	b.n	800a236 <tcp_process+0x716>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fa28 	bl	800a3f8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009fa8:	4b2e      	ldr	r3, [pc, #184]	; (800a064 <tcp_process+0x544>)
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	f003 0320 	and.w	r3, r3, #32
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00a      	beq.n	8009fca <tcp_process+0x4aa>
        tcp_ack_now(pcb);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	8b5b      	ldrh	r3, [r3, #26]
 8009fb8:	f043 0302 	orr.w	r3, r3, #2
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2207      	movs	r2, #7
 8009fc6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009fc8:	e135      	b.n	800a236 <tcp_process+0x716>
 8009fca:	e134      	b.n	800a236 <tcp_process+0x716>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 fa13 	bl	800a3f8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009fd2:	4b24      	ldr	r3, [pc, #144]	; (800a064 <tcp_process+0x544>)
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	f003 0320 	and.w	r3, r3, #32
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d06a      	beq.n	800a0b4 <tcp_process+0x594>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009fde:	4b19      	ldr	r3, [pc, #100]	; (800a044 <tcp_process+0x524>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	f003 0310 	and.w	r3, r3, #16
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d059      	beq.n	800a09e <tcp_process+0x57e>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fee:	4b16      	ldr	r3, [pc, #88]	; (800a048 <tcp_process+0x528>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d153      	bne.n	800a09e <tcp_process+0x57e>
            pcb->unsent == NULL) {
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      }
      break;
    case FIN_WAIT_1:
      tcp_receive(pcb);
      if (recv_flags & TF_GOT_FIN) {
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d14f      	bne.n	800a09e <tcp_process+0x57e>
            pcb->unsent == NULL) {
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	8b5b      	ldrh	r3, [r3, #26]
 800a002:	f043 0302 	orr.w	r3, r3, #2
 800a006:	b29a      	uxth	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7fe ff49 	bl	8008ea4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a012:	4b15      	ldr	r3, [pc, #84]	; (800a068 <tcp_process+0x548>)
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d105      	bne.n	800a028 <tcp_process+0x508>
 800a01c:	4b12      	ldr	r3, [pc, #72]	; (800a068 <tcp_process+0x548>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	4a11      	ldr	r2, [pc, #68]	; (800a068 <tcp_process+0x548>)
 800a024:	6013      	str	r3, [r2, #0]
 800a026:	e027      	b.n	800a078 <tcp_process+0x558>
 800a028:	4b0f      	ldr	r3, [pc, #60]	; (800a068 <tcp_process+0x548>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	617b      	str	r3, [r7, #20]
 800a02e:	e020      	b.n	800a072 <tcp_process+0x552>
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	68da      	ldr	r2, [r3, #12]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	429a      	cmp	r2, r3
 800a038:	d118      	bne.n	800a06c <tcp_process+0x54c>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	68da      	ldr	r2, [r3, #12]
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	60da      	str	r2, [r3, #12]
 800a042:	e019      	b.n	800a078 <tcp_process+0x558>
 800a044:	1ffe8b4c 	.word	0x1ffe8b4c
 800a048:	1ffe8b44 	.word	0x1ffe8b44
 800a04c:	1ffe8b4a 	.word	0x1ffe8b4a
 800a050:	1ffe8b40 	.word	0x1ffe8b40
 800a054:	1ffe8b30 	.word	0x1ffe8b30
 800a058:	1ffe9110 	.word	0x1ffe9110
 800a05c:	1ffe9114 	.word	0x1ffe9114
 800a060:	1ffe8b48 	.word	0x1ffe8b48
 800a064:	1ffe8b4d 	.word	0x1ffe8b4d
 800a068:	1ffeff58 	.word	0x1ffeff58
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	617b      	str	r3, [r7, #20]
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d1db      	bne.n	800a030 <tcp_process+0x510>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	60da      	str	r2, [r3, #12]
 800a07e:	4b71      	ldr	r3, [pc, #452]	; (800a244 <tcp_process+0x724>)
 800a080:	2201      	movs	r2, #1
 800a082:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	220a      	movs	r2, #10
 800a088:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a08a:	4b6f      	ldr	r3, [pc, #444]	; (800a248 <tcp_process+0x728>)
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	60da      	str	r2, [r3, #12]
 800a092:	4a6d      	ldr	r2, [pc, #436]	; (800a248 <tcp_process+0x728>)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6013      	str	r3, [r2, #0]
 800a098:	f002 f96a 	bl	800c370 <tcp_timer_needed>
 800a09c:	e01e      	b.n	800a0dc <tcp_process+0x5bc>
        } else {
          tcp_ack_now(pcb);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	8b5b      	ldrh	r3, [r3, #26]
 800a0a2:	f043 0302 	orr.w	r3, r3, #2
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2208      	movs	r2, #8
 800a0b0:	751a      	strb	r2, [r3, #20]
 800a0b2:	e013      	b.n	800a0dc <tcp_process+0x5bc>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a0b4:	4b65      	ldr	r3, [pc, #404]	; (800a24c <tcp_process+0x72c>)
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	f003 0310 	and.w	r3, r3, #16
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00d      	beq.n	800a0dc <tcp_process+0x5bc>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a0c4:	4b62      	ldr	r3, [pc, #392]	; (800a250 <tcp_process+0x730>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d107      	bne.n	800a0dc <tcp_process+0x5bc>
                 pcb->unsent == NULL) {
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          TCP_REG(&tcp_tw_pcbs, pcb);
        } else {
          tcp_ack_now(pcb);
          pcb->state = CLOSING;
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d103      	bne.n	800a0dc <tcp_process+0x5bc>
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2206      	movs	r2, #6
 800a0d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a0da:	e0ac      	b.n	800a236 <tcp_process+0x716>
 800a0dc:	e0ab      	b.n	800a236 <tcp_process+0x716>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f98a 	bl	800a3f8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a0e4:	4b5b      	ldr	r3, [pc, #364]	; (800a254 <tcp_process+0x734>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	f003 0320 	and.w	r3, r3, #32
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d03b      	beq.n	800a168 <tcp_process+0x648>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	8b5b      	ldrh	r3, [r3, #26]
 800a0f4:	f043 0302 	orr.w	r3, r3, #2
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7fe fed0 	bl	8008ea4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a104:	4b54      	ldr	r3, [pc, #336]	; (800a258 <tcp_process+0x738>)
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d105      	bne.n	800a11a <tcp_process+0x5fa>
 800a10e:	4b52      	ldr	r3, [pc, #328]	; (800a258 <tcp_process+0x738>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	4a50      	ldr	r2, [pc, #320]	; (800a258 <tcp_process+0x738>)
 800a116:	6013      	str	r3, [r2, #0]
 800a118:	e013      	b.n	800a142 <tcp_process+0x622>
 800a11a:	4b4f      	ldr	r3, [pc, #316]	; (800a258 <tcp_process+0x738>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	613b      	str	r3, [r7, #16]
 800a120:	e00c      	b.n	800a13c <tcp_process+0x61c>
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	68da      	ldr	r2, [r3, #12]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d104      	bne.n	800a136 <tcp_process+0x616>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	68da      	ldr	r2, [r3, #12]
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	60da      	str	r2, [r3, #12]
 800a134:	e005      	b.n	800a142 <tcp_process+0x622>
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	613b      	str	r3, [r7, #16]
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1ef      	bne.n	800a122 <tcp_process+0x602>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	60da      	str	r2, [r3, #12]
 800a148:	4b3e      	ldr	r3, [pc, #248]	; (800a244 <tcp_process+0x724>)
 800a14a:	2201      	movs	r2, #1
 800a14c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	220a      	movs	r2, #10
 800a152:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a154:	4b3c      	ldr	r3, [pc, #240]	; (800a248 <tcp_process+0x728>)
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	60da      	str	r2, [r3, #12]
 800a15c:	4a3a      	ldr	r2, [pc, #232]	; (800a248 <tcp_process+0x728>)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6013      	str	r3, [r2, #0]
 800a162:	f002 f905 	bl	800c370 <tcp_timer_needed>
      }
      break;
 800a166:	e066      	b.n	800a236 <tcp_process+0x716>
 800a168:	e065      	b.n	800a236 <tcp_process+0x716>
    case CLOSING:
      tcp_receive(pcb);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f944 	bl	800a3f8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a170:	4b36      	ldr	r3, [pc, #216]	; (800a24c <tcp_process+0x72c>)
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	f003 0310 	and.w	r3, r3, #16
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d03e      	beq.n	800a1fa <tcp_process+0x6da>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a180:	4b33      	ldr	r3, [pc, #204]	; (800a250 <tcp_process+0x730>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	429a      	cmp	r2, r3
 800a186:	d138      	bne.n	800a1fa <tcp_process+0x6da>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d134      	bne.n	800a1fa <tcp_process+0x6da>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7fe fe87 	bl	8008ea4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a196:	4b30      	ldr	r3, [pc, #192]	; (800a258 <tcp_process+0x738>)
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d105      	bne.n	800a1ac <tcp_process+0x68c>
 800a1a0:	4b2d      	ldr	r3, [pc, #180]	; (800a258 <tcp_process+0x738>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	4a2c      	ldr	r2, [pc, #176]	; (800a258 <tcp_process+0x738>)
 800a1a8:	6013      	str	r3, [r2, #0]
 800a1aa:	e013      	b.n	800a1d4 <tcp_process+0x6b4>
 800a1ac:	4b2a      	ldr	r3, [pc, #168]	; (800a258 <tcp_process+0x738>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	e00c      	b.n	800a1ce <tcp_process+0x6ae>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	68da      	ldr	r2, [r3, #12]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d104      	bne.n	800a1c8 <tcp_process+0x6a8>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	68da      	ldr	r2, [r3, #12]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	60da      	str	r2, [r3, #12]
 800a1c6:	e005      	b.n	800a1d4 <tcp_process+0x6b4>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	60fb      	str	r3, [r7, #12]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1ef      	bne.n	800a1b4 <tcp_process+0x694>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	60da      	str	r2, [r3, #12]
 800a1da:	4b1a      	ldr	r3, [pc, #104]	; (800a244 <tcp_process+0x724>)
 800a1dc:	2201      	movs	r2, #1
 800a1de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	220a      	movs	r2, #10
 800a1e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a1e6:	4b18      	ldr	r3, [pc, #96]	; (800a248 <tcp_process+0x728>)
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	60da      	str	r2, [r3, #12]
 800a1ee:	4a16      	ldr	r2, [pc, #88]	; (800a248 <tcp_process+0x728>)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6013      	str	r3, [r2, #0]
 800a1f4:	f002 f8bc 	bl	800c370 <tcp_timer_needed>
      }
      break;
 800a1f8:	e01d      	b.n	800a236 <tcp_process+0x716>
 800a1fa:	e01c      	b.n	800a236 <tcp_process+0x716>
    case LAST_ACK:
      tcp_receive(pcb);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f8fb 	bl	800a3f8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a202:	4b12      	ldr	r3, [pc, #72]	; (800a24c <tcp_process+0x72c>)
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	f003 0310 	and.w	r3, r3, #16
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d011      	beq.n	800a232 <tcp_process+0x712>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a212:	4b0f      	ldr	r3, [pc, #60]	; (800a250 <tcp_process+0x730>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	429a      	cmp	r2, r3
 800a218:	d10b      	bne.n	800a232 <tcp_process+0x712>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d107      	bne.n	800a232 <tcp_process+0x712>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a222:	4b0c      	ldr	r3, [pc, #48]	; (800a254 <tcp_process+0x734>)
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	f043 0310 	orr.w	r3, r3, #16
 800a22a:	b2da      	uxtb	r2, r3
 800a22c:	4b09      	ldr	r3, [pc, #36]	; (800a254 <tcp_process+0x734>)
 800a22e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a230:	e001      	b.n	800a236 <tcp_process+0x716>
 800a232:	e000      	b.n	800a236 <tcp_process+0x716>
    default:
      break;
 800a234:	bf00      	nop
  }
  return ERR_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	b25b      	sxtb	r3, r3
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3720      	adds	r7, #32
 800a23e:	46bd      	mov	sp, r7
 800a240:	bdb0      	pop	{r4, r5, r7, pc}
 800a242:	bf00      	nop
 800a244:	1ffeff54 	.word	0x1ffeff54
 800a248:	1ffeff68 	.word	0x1ffeff68
 800a24c:	1ffe8b4c 	.word	0x1ffe8b4c
 800a250:	1ffe8b44 	.word	0x1ffe8b44
 800a254:	1ffe8b4d 	.word	0x1ffe8b4d
 800a258:	1ffeff58 	.word	0x1ffeff58

0800a25c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a25c:	b5b0      	push	{r4, r5, r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	899b      	ldrh	r3, [r3, #12]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fc fac2 	bl	80067f8 <lwip_htons>
 800a274:	4603      	mov	r3, r0
 800a276:	b2db      	uxtb	r3, r3
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d005      	beq.n	800a28c <tcp_oos_insert_segment+0x30>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a280:	6838      	ldr	r0, [r7, #0]
 800a282:	f7fe fc47 	bl	8008b14 <tcp_segs_free>
    next = NULL;
 800a286:	2300      	movs	r3, #0
 800a288:	603b      	str	r3, [r7, #0]
 800a28a:	e056      	b.n	800a33a <tcp_oos_insert_segment+0xde>
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
 800a28c:	e021      	b.n	800a2d2 <tcp_oos_insert_segment+0x76>
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	899b      	ldrh	r3, [r3, #12]
 800a294:	b29b      	uxth	r3, r3
 800a296:	4618      	mov	r0, r3
 800a298:	f7fc faae 	bl	80067f8 <lwip_htons>
 800a29c:	4603      	mov	r3, r0
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	f003 0301 	and.w	r3, r3, #1
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00c      	beq.n	800a2c2 <tcp_oos_insert_segment+0x66>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	68dc      	ldr	r4, [r3, #12]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	899b      	ldrh	r3, [r3, #12]
 800a2b2:	b29d      	uxth	r5, r3
 800a2b4:	2001      	movs	r0, #1
 800a2b6:	f7fc fa9f 	bl	80067f8 <lwip_htons>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	432b      	orrs	r3, r5
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f7fe fc35 	bl	8008b3c <tcp_seg_free>
    tcp_segs_free(next);
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00e      	beq.n	800a2f6 <tcp_oos_insert_segment+0x9a>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	891b      	ldrh	r3, [r3, #8]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	4b1a      	ldr	r3, [pc, #104]	; (800a348 <tcp_oos_insert_segment+0xec>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	441a      	add	r2, r3
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	8909      	ldrh	r1, [r1, #8]
 800a2ee:	440b      	add	r3, r1
 800a2f0:	1ad3      	subs	r3, r2, r3
    tcp_segs_free(next);
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	dacb      	bge.n	800a28e <tcp_oos_insert_segment+0x32>
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d01e      	beq.n	800a33a <tcp_oos_insert_segment+0xde>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	891b      	ldrh	r3, [r3, #8]
 800a300:	461a      	mov	r2, r3
 800a302:	4b11      	ldr	r3, [pc, #68]	; (800a348 <tcp_oos_insert_segment+0xec>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	441a      	add	r2, r3
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	1ad3      	subs	r3, r2, r3
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
 800a310:	2b00      	cmp	r3, #0
 800a312:	dd12      	ble.n	800a33a <tcp_oos_insert_segment+0xde>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	4b0a      	ldr	r3, [pc, #40]	; (800a348 <tcp_oos_insert_segment+0xec>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	b29b      	uxth	r3, r3
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	b29a      	uxth	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	891b      	ldrh	r3, [r3, #8]
 800a332:	4610      	mov	r0, r2
 800a334:	4619      	mov	r1, r3
 800a336:	f7fd f9a9 	bl	800768c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	601a      	str	r2, [r3, #0]
}
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bdb0      	pop	{r4, r5, r7, pc}
 800a346:	bf00      	nop
 800a348:	1ffe8b40 	.word	0x1ffe8b40

0800a34c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a34c:	b5b0      	push	{r4, r5, r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
 800a358:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a35a:	e01f      	b.n	800a39c <tcp_free_acked_segments+0x50>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fd fb1a 	bl	80079a4 <pbuf_clen>
 800a370:	4603      	mov	r3, r0
 800a372:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a37a:	8a7b      	ldrh	r3, [r7, #18]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	b29a      	uxth	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	891a      	ldrh	r2, [r3, #8]
 800a38a:	4b19      	ldr	r3, [pc, #100]	; (800a3f0 <tcp_free_acked_segments+0xa4>)
 800a38c:	881b      	ldrh	r3, [r3, #0]
 800a38e:	4413      	add	r3, r2
 800a390:	b29a      	uxth	r2, r3
 800a392:	4b17      	ldr	r3, [pc, #92]	; (800a3f0 <tcp_free_acked_segments+0xa4>)
 800a394:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a396:	6978      	ldr	r0, [r7, #20]
 800a398:	f7fe fbd0 	bl	8008b3c <tcp_seg_free>
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d020      	beq.n	800a3e4 <tcp_free_acked_segments+0x98>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fc fa3b 	bl	8006824 <lwip_htonl>
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	891b      	ldrh	r3, [r3, #8]
 800a3b4:	461d      	mov	r5, r3
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	899b      	ldrh	r3, [r3, #12]
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fc fa1a 	bl	80067f8 <lwip_htons>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	f003 0303 	and.w	r3, r3, #3
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <tcp_free_acked_segments+0x88>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e000      	b.n	800a3d6 <tcp_free_acked_segments+0x8a>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	442b      	add	r3, r5
 800a3d8:	18e2      	adds	r2, r4, r3
 800a3da:	4b06      	ldr	r3, [pc, #24]	; (800a3f4 <tcp_free_acked_segments+0xa8>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	1ad3      	subs	r3, r2, r3
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	ddbb      	ble.n	800a35c <tcp_free_acked_segments+0x10>
    if (pcb->snd_queuelen != 0) {
      LWIP_ASSERT("tcp_receive: valid queue length",
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3718      	adds	r7, #24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	1ffe8b48 	.word	0x1ffe8b48
 800a3f4:	1ffe8b44 	.word	0x1ffe8b44

0800a3f8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a3f8:	b5b0      	push	{r4, r5, r7, lr}
 800a3fa:	b094      	sub	sp, #80	; 0x50
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a400:	2300      	movs	r3, #0
 800a402:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 800a404:	4b9f      	ldr	r3, [pc, #636]	; (800a684 <tcp_receive+0x28c>)
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	f003 0310 	and.w	r3, r3, #16
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 825e 	beq.w	800a8ce <tcp_receive+0x4d6>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a418:	461a      	mov	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a41e:	4413      	add	r3, r2
 800a420:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a426:	4b98      	ldr	r3, [pc, #608]	; (800a688 <tcp_receive+0x290>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	db1b      	blt.n	800a468 <tcp_receive+0x70>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a434:	4b94      	ldr	r3, [pc, #592]	; (800a688 <tcp_receive+0x290>)
 800a436:	681b      	ldr	r3, [r3, #0]

  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a438:	429a      	cmp	r2, r3
 800a43a:	d106      	bne.n	800a44a <tcp_receive+0x52>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a440:	4b92      	ldr	r3, [pc, #584]	; (800a68c <tcp_receive+0x294>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	db0e      	blt.n	800a468 <tcp_receive+0x70>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a44e:	4b8f      	ldr	r3, [pc, #572]	; (800a68c <tcp_receive+0x294>)
 800a450:	681b      	ldr	r3, [r3, #0]
  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a452:	429a      	cmp	r2, r3
 800a454:	d125      	bne.n	800a4a2 <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a456:	4b8e      	ldr	r3, [pc, #568]	; (800a690 <tcp_receive+0x298>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	89db      	ldrh	r3, [r3, #14]
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a464:	429a      	cmp	r2, r3
 800a466:	d91c      	bls.n	800a4a2 <tcp_receive+0xaa>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a468:	4b89      	ldr	r3, [pc, #548]	; (800a690 <tcp_receive+0x298>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	89db      	ldrh	r3, [r3, #14]
 800a46e:	b29a      	uxth	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a482:	429a      	cmp	r2, r3
 800a484:	d205      	bcs.n	800a492 <tcp_receive+0x9a>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a492:	4b7d      	ldr	r3, [pc, #500]	; (800a688 <tcp_receive+0x290>)
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a49a:	4b7c      	ldr	r3, [pc, #496]	; (800a68c <tcp_receive+0x294>)
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a4a2:	4b7a      	ldr	r3, [pc, #488]	; (800a68c <tcp_receive+0x294>)
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	dc5d      	bgt.n	800a56c <tcp_receive+0x174>
      /* Clause 2 */
      if (tcplen == 0) {
 800a4b0:	4b78      	ldr	r3, [pc, #480]	; (800a694 <tcp_receive+0x29c>)
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d150      	bne.n	800a55a <tcp_receive+0x162>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a4c2:	441a      	add	r2, r3
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d147      	bne.n	800a55a <tcp_receive+0x162>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a4ce:	b21b      	sxth	r3, r3
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	db42      	blt.n	800a55a <tcp_receive+0x162>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4d8:	4b6c      	ldr	r3, [pc, #432]	; (800a68c <tcp_receive+0x294>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d13c      	bne.n	800a55a <tcp_receive+0x162>
              found_dupack = 1;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d907      	bls.n	800a508 <tcp_receive+0x110>
                ++pcb->dupacks;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4fe:	3301      	adds	r3, #1
 800a500:	b2da      	uxtb	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a50e:	2b03      	cmp	r3, #3
 800a510:	d91b      	bls.n	800a54a <tcp_receive+0x152>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a51c:	4413      	add	r3, r2
 800a51e:	b29a      	uxth	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a526:	429a      	cmp	r2, r3
 800a528:	d30a      	bcc.n	800a540 <tcp_receive+0x148>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a534:	4413      	add	r3, r2
 800a536:	b29a      	uxth	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a53e:	e004      	b.n	800a54a <tcp_receive+0x152>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a546:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a550:	2b02      	cmp	r3, #2
 800a552:	d902      	bls.n	800a55a <tcp_receive+0x162>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f001 fc65 	bl	800be24 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a55a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f040 8159 	bne.w	800a814 <tcp_receive+0x41c>
        pcb->dupacks = 0;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a56a:	e153      	b.n	800a814 <tcp_receive+0x41c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a56c:	4b47      	ldr	r3, [pc, #284]	; (800a68c <tcp_receive+0x294>)
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	3b01      	subs	r3, #1
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f2c0 8148 	blt.w	800a80e <tcp_receive+0x416>
 800a57e:	4b43      	ldr	r3, [pc, #268]	; (800a68c <tcp_receive+0x294>)
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f300 8140 	bgt.w	800a80e <tcp_receive+0x416>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	8b5b      	ldrh	r3, [r3, #26]
 800a592:	f003 0304 	and.w	r3, r3, #4
 800a596:	2b00      	cmp	r3, #0
 800a598:	d010      	beq.n	800a5bc <tcp_receive+0x1c4>
        tcp_clear_flags(pcb, TF_INFR);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	8b5b      	ldrh	r3, [r3, #26]
 800a59e:	f023 0304 	bic.w	r3, r3, #4
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a5c8:	b21b      	sxth	r3, r3
 800a5ca:	10db      	asrs	r3, r3, #3
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	4413      	add	r3, r2
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a5e2:	4b2a      	ldr	r3, [pc, #168]	; (800a68c <tcp_receive+0x294>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a5fa:	4b24      	ldr	r3, [pc, #144]	; (800a68c <tcp_receive+0x294>)
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	7d1b      	ldrb	r3, [r3, #20]
 800a606:	2b03      	cmp	r3, #3
 800a608:	f240 808f 	bls.w	800a72a <tcp_receive+0x332>
        if (pcb->cwnd < pcb->ssthresh) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a618:	429a      	cmp	r2, r3
 800a61a:	d23d      	bcs.n	800a698 <tcp_receive+0x2a0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	8b5b      	ldrh	r3, [r3, #26]
 800a620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a624:	2b00      	cmp	r3, #0
 800a626:	d001      	beq.n	800a62c <tcp_receive+0x234>
 800a628:	2301      	movs	r3, #1
 800a62a:	e000      	b.n	800a62e <tcp_receive+0x236>
 800a62c:	2302      	movs	r3, #2
 800a62e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a632:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a636:	b29a      	uxth	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a63c:	fb12 f303 	smulbb	r3, r2, r3
 800a640:	b29a      	uxth	r2, r3
 800a642:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a644:	4293      	cmp	r3, r2
 800a646:	bf28      	it	cs
 800a648:	4613      	movcs	r3, r2
 800a64a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a652:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a654:	4413      	add	r3, r2
 800a656:	b29a      	uxth	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a65e:	429a      	cmp	r2, r3
 800a660:	d309      	bcc.n	800a676 <tcp_receive+0x27e>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a668:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a66a:	4413      	add	r3, r2
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a674:	e059      	b.n	800a72a <tcp_receive+0x332>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a67c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a680:	e053      	b.n	800a72a <tcp_receive+0x332>
 800a682:	bf00      	nop
 800a684:	1ffe8b4c 	.word	0x1ffe8b4c
 800a688:	1ffe8b40 	.word	0x1ffe8b40
 800a68c:	1ffe8b44 	.word	0x1ffe8b44
 800a690:	1ffe8b30 	.word	0x1ffe8b30
 800a694:	1ffe8b4a 	.word	0x1ffe8b4a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a69e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a6a0:	4413      	add	r3, r2
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d309      	bcc.n	800a6c2 <tcp_receive+0x2ca>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a6b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a6b6:	4413      	add	r3, r2
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a6c0:	e004      	b.n	800a6cc <tcp_receive+0x2d4>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d326      	bcc.n	800a72a <tcp_receive+0x332>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6fc:	4413      	add	r3, r2
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a706:	429a      	cmp	r2, r3
 800a708:	d30a      	bcc.n	800a720 <tcp_receive+0x328>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a714:	4413      	add	r3, r2
 800a716:	b29a      	uxth	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a71e:	e004      	b.n	800a72a <tcp_receive+0x332>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a726:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	4611      	mov	r1, r2
 800a736:	4a96      	ldr	r2, [pc, #600]	; (800a990 <tcp_receive+0x598>)
 800a738:	f7ff fe08 	bl	800a34c <tcp_free_acked_segments>
 800a73c:	4602      	mov	r2, r0
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	4611      	mov	r1, r2
 800a74e:	4a91      	ldr	r2, [pc, #580]	; (800a994 <tcp_receive+0x59c>)
 800a750:	f7ff fdfc 	bl	800a34c <tcp_free_acked_segments>
 800a754:	4602      	mov	r2, r0
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d104      	bne.n	800a76c <tcp_receive+0x374>
        pcb->rtime = -1;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a768:	861a      	strh	r2, [r3, #48]	; 0x30
 800a76a:	e002      	b.n	800a772 <tcp_receive+0x37a>
      } else {
        pcb->rtime = 0;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d103      	bne.n	800a788 <tcp_receive+0x390>
        pcb->unsent_oversize = 0;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a78e:	4b82      	ldr	r3, [pc, #520]	; (800a998 <tcp_receive+0x5a0>)
 800a790:	881b      	ldrh	r3, [r3, #0]
 800a792:	4413      	add	r3, r2
 800a794:	b29a      	uxth	r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	8b5b      	ldrh	r3, [r3, #26]
 800a7a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d031      	beq.n	800a80c <tcp_receive+0x414>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d118      	bne.n	800a7e2 <tcp_receive+0x3ea>
          if ((pcb->unsent == NULL) ||
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00c      	beq.n	800a7d2 <tcp_receive+0x3da>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fc f82d 	bl	8006824 <lwip_htonl>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	1ae3      	subs	r3, r4, r3
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
          if ((pcb->unsent == NULL) ||
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	dc1c      	bgt.n	800a80c <tcp_receive+0x414>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
            tcp_clear_flags(pcb, TF_RTO);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	8b5b      	ldrh	r3, [r3, #26]
 800a7d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	835a      	strh	r2, [r3, #26]
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a7e0:	e018      	b.n	800a814 <tcp_receive+0x41c>
        if (pcb->unacked == NULL) {
          if ((pcb->unsent == NULL) ||
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
            tcp_clear_flags(pcb, TF_RTO);
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fc f818 	bl	8006824 <lwip_htonl>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	1ae3      	subs	r3, r4, r3
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	dc07      	bgt.n	800a80c <tcp_receive+0x414>
          tcp_clear_flags(pcb, TF_RTO);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	8b5b      	ldrh	r3, [r3, #26]
 800a800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a804:	b29a      	uxth	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	835a      	strh	r2, [r3, #26]
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a80a:	e003      	b.n	800a814 <tcp_receive+0x41c>
 800a80c:	e002      	b.n	800a814 <tcp_receive+0x41c>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f001 fc6c 	bl	800c0ec <tcp_send_empty_ack>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d058      	beq.n	800a8ce <tcp_receive+0x4d6>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a820:	4b5e      	ldr	r3, [pc, #376]	; (800a99c <tcp_receive+0x5a4>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	da51      	bge.n	800a8ce <tcp_receive+0x4d6>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a82a:	4b5d      	ldr	r3, [pc, #372]	; (800a9a0 <tcp_receive+0x5a8>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	b29a      	uxth	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a834:	b29b      	uxth	r3, r3
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	b29b      	uxth	r3, r3
 800a83a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a83e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a846:	b21b      	sxth	r3, r3
 800a848:	10db      	asrs	r3, r3, #3
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	b29b      	uxth	r3, r3
 800a852:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a860:	4413      	add	r3, r2
 800a862:	b29b      	uxth	r3, r3
 800a864:	b29a      	uxth	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a86a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a86e:	2b00      	cmp	r3, #0
 800a870:	da05      	bge.n	800a87e <tcp_receive+0x486>
        m = (s16_t) - m;
 800a872:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a876:	425b      	negs	r3, r3
 800a878:	b29b      	uxth	r3, r3
 800a87a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a87e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a886:	b21b      	sxth	r3, r3
 800a888:	109b      	asrs	r3, r3, #2
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	b29b      	uxth	r3, r3
 800a892:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a8a0:	4413      	add	r3, r2
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a8ae:	b21b      	sxth	r3, r3
 800a8b0:	10db      	asrs	r3, r3, #3
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	4413      	add	r3, r2
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	b29a      	uxth	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a8ce:	4b35      	ldr	r3, [pc, #212]	; (800a9a4 <tcp_receive+0x5ac>)
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f000 842a 	beq.w	800b12c <tcp_receive+0xd34>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	7d1b      	ldrb	r3, [r3, #20]
 800a8dc:	2b06      	cmp	r3, #6
 800a8de:	f200 8425 	bhi.w	800b12c <tcp_receive+0xd34>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8e6:	4b30      	ldr	r3, [pc, #192]	; (800a9a8 <tcp_receive+0x5b0>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	1ad3      	subs	r3, r2, r3
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	db5e      	blt.n	800a9b0 <tcp_receive+0x5b8>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8f6:	4b2b      	ldr	r3, [pc, #172]	; (800a9a4 <tcp_receive+0x5ac>)
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4b2a      	ldr	r3, [pc, #168]	; (800a9a8 <tcp_receive+0x5b0>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	440b      	add	r3, r1
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	3301      	adds	r3, #1
 800a906:	2b00      	cmp	r3, #0
 800a908:	dc52      	bgt.n	800a9b0 <tcp_receive+0x5b8>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a90a:	4b28      	ldr	r3, [pc, #160]	; (800a9ac <tcp_receive+0x5b4>)
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a914:	4b24      	ldr	r3, [pc, #144]	; (800a9a8 <tcp_receive+0x5b0>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
      off = (u16_t)off32;
 800a91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
      inseg.len -= off;
 800a922:	4b22      	ldr	r3, [pc, #136]	; (800a9ac <tcp_receive+0x5b4>)
 800a924:	891a      	ldrh	r2, [r3, #8]
 800a926:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	4b1f      	ldr	r3, [pc, #124]	; (800a9ac <tcp_receive+0x5b4>)
 800a930:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a932:	4b1e      	ldr	r3, [pc, #120]	; (800a9ac <tcp_receive+0x5b4>)
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	891a      	ldrh	r2, [r3, #8]
 800a938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a940:	e00f      	b.n	800a962 <tcp_receive+0x56a>
        off -= p->len;
 800a942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a944:	895b      	ldrh	r3, [r3, #10]
 800a946:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a952:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a954:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a958:	2200      	movs	r2, #0
 800a95a:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a95c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	647b      	str	r3, [r7, #68]	; 0x44
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
      off = (u16_t)off32;
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
      inseg.len -= off;
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
      while (p->len < off) {
 800a962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a964:	895b      	ldrh	r3, [r3, #10]
 800a966:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d8e9      	bhi.n	800a942 <tcp_receive+0x54a>
        p->tot_len = new_tot_len;
        p->len = 0;
        p = p->next;
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a96e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a972:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a974:	4619      	mov	r1, r3
 800a976:	f7fc ff4f 	bl	8007818 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a97a:	4b0c      	ldr	r3, [pc, #48]	; (800a9ac <tcp_receive+0x5b4>)
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a982:	4909      	ldr	r1, [pc, #36]	; (800a9a8 <tcp_receive+0x5b0>)
 800a984:	600a      	str	r2, [r1, #0]
 800a986:	4a08      	ldr	r2, [pc, #32]	; (800a9a8 <tcp_receive+0x5b0>)
 800a988:	6812      	ldr	r2, [r2, #0]
 800a98a:	605a      	str	r2, [r3, #4]
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a98c:	e01e      	b.n	800a9cc <tcp_receive+0x5d4>
 800a98e:	bf00      	nop
 800a990:	0801166c 	.word	0x0801166c
 800a994:	08011674 	.word	0x08011674
 800a998:	1ffe8b48 	.word	0x1ffe8b48
 800a99c:	1ffe8b44 	.word	0x1ffe8b44
 800a9a0:	1ffeff5c 	.word	0x1ffeff5c
 800a9a4:	1ffe8b4a 	.word	0x1ffe8b4a
 800a9a8:	1ffe8b40 	.word	0x1ffe8b40
 800a9ac:	1ffe8b20 	.word	0x1ffe8b20
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a9b0:	4b83      	ldr	r3, [pc, #524]	; (800abc0 <tcp_receive+0x7c8>)
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	da06      	bge.n	800a9cc <tcp_receive+0x5d4>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	8b5b      	ldrh	r3, [r3, #26]
 800a9c2:	f043 0302 	orr.w	r3, r3, #2
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a9cc:	4b7c      	ldr	r3, [pc, #496]	; (800abc0 <tcp_receive+0x7c8>)
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d4:	1ad3      	subs	r3, r2, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f2c0 83a3 	blt.w	800b122 <tcp_receive+0xd2a>
 800a9dc:	4b78      	ldr	r3, [pc, #480]	; (800abc0 <tcp_receive+0x7c8>)
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e4:	6879      	ldr	r1, [r7, #4]
 800a9e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a9e8:	440b      	add	r3, r1
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f300 8397 	bgt.w	800b122 <tcp_receive+0xd2a>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9f8:	4b71      	ldr	r3, [pc, #452]	; (800abc0 <tcp_receive+0x7c8>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	f040 8235 	bne.w	800ae6c <tcp_receive+0xa74>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800aa02:	4b70      	ldr	r3, [pc, #448]	; (800abc4 <tcp_receive+0x7cc>)
 800aa04:	891c      	ldrh	r4, [r3, #8]
 800aa06:	4b6f      	ldr	r3, [pc, #444]	; (800abc4 <tcp_receive+0x7cc>)
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	899b      	ldrh	r3, [r3, #12]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fb fef2 	bl	80067f8 <lwip_htons>
 800aa14:	4603      	mov	r3, r0
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	f003 0303 	and.w	r3, r3, #3
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d001      	beq.n	800aa24 <tcp_receive+0x62c>
 800aa20:	2301      	movs	r3, #1
 800aa22:	e000      	b.n	800aa26 <tcp_receive+0x62e>
 800aa24:	2300      	movs	r3, #0
 800aa26:	4423      	add	r3, r4
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	4b67      	ldr	r3, [pc, #412]	; (800abc8 <tcp_receive+0x7d0>)
 800aa2c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa32:	4b65      	ldr	r3, [pc, #404]	; (800abc8 <tcp_receive+0x7d0>)
 800aa34:	881b      	ldrh	r3, [r3, #0]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d262      	bcs.n	800ab00 <tcp_receive+0x708>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aa3a:	4b62      	ldr	r3, [pc, #392]	; (800abc4 <tcp_receive+0x7cc>)
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	899b      	ldrh	r3, [r3, #12]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fb fed8 	bl	80067f8 <lwip_htons>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	f003 0301 	and.w	r3, r3, #1
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d020      	beq.n	800aa96 <tcp_receive+0x69e>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800aa54:	4b5b      	ldr	r3, [pc, #364]	; (800abc4 <tcp_receive+0x7cc>)
 800aa56:	68dc      	ldr	r4, [r3, #12]
 800aa58:	4b5a      	ldr	r3, [pc, #360]	; (800abc4 <tcp_receive+0x7cc>)
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	899b      	ldrh	r3, [r3, #12]
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aa66:	b29d      	uxth	r5, r3
 800aa68:	4b56      	ldr	r3, [pc, #344]	; (800abc4 <tcp_receive+0x7cc>)
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	899b      	ldrh	r3, [r3, #12]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fb fec1 	bl	80067f8 <lwip_htons>
 800aa76:	4603      	mov	r3, r0
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fb feb8 	bl	80067f8 <lwip_htons>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	462a      	mov	r2, r5
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa9a:	4b4a      	ldr	r3, [pc, #296]	; (800abc4 <tcp_receive+0x7cc>)
 800aa9c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aa9e:	4b49      	ldr	r3, [pc, #292]	; (800abc4 <tcp_receive+0x7cc>)
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	899b      	ldrh	r3, [r3, #12]
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fb fea6 	bl	80067f8 <lwip_htons>
 800aaac:	4603      	mov	r3, r0
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	f003 0302 	and.w	r3, r3, #2
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d005      	beq.n	800aac4 <tcp_receive+0x6cc>
            inseg.len -= 1;
 800aab8:	4b42      	ldr	r3, [pc, #264]	; (800abc4 <tcp_receive+0x7cc>)
 800aaba:	891b      	ldrh	r3, [r3, #8]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	4b40      	ldr	r3, [pc, #256]	; (800abc4 <tcp_receive+0x7cc>)
 800aac2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800aac4:	4b3f      	ldr	r3, [pc, #252]	; (800abc4 <tcp_receive+0x7cc>)
 800aac6:	685a      	ldr	r2, [r3, #4]
 800aac8:	4b3e      	ldr	r3, [pc, #248]	; (800abc4 <tcp_receive+0x7cc>)
 800aaca:	891b      	ldrh	r3, [r3, #8]
 800aacc:	4610      	mov	r0, r2
 800aace:	4619      	mov	r1, r3
 800aad0:	f7fc fddc 	bl	800768c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800aad4:	4b3b      	ldr	r3, [pc, #236]	; (800abc4 <tcp_receive+0x7cc>)
 800aad6:	891c      	ldrh	r4, [r3, #8]
 800aad8:	4b3a      	ldr	r3, [pc, #232]	; (800abc4 <tcp_receive+0x7cc>)
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	899b      	ldrh	r3, [r3, #12]
 800aade:	b29b      	uxth	r3, r3
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fb fe89 	bl	80067f8 <lwip_htons>
 800aae6:	4603      	mov	r3, r0
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	f003 0303 	and.w	r3, r3, #3
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d001      	beq.n	800aaf6 <tcp_receive+0x6fe>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e000      	b.n	800aaf8 <tcp_receive+0x700>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	4423      	add	r3, r4
 800aafa:	b29a      	uxth	r2, r3
 800aafc:	4b32      	ldr	r3, [pc, #200]	; (800abc8 <tcp_receive+0x7d0>)
 800aafe:	801a      	strh	r2, [r3, #0]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 80ce 	beq.w	800aca6 <tcp_receive+0x8ae>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ab0a:	4b2e      	ldr	r3, [pc, #184]	; (800abc4 <tcp_receive+0x7cc>)
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	899b      	ldrh	r3, [r3, #12]
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fb fe70 	bl	80067f8 <lwip_htons>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	f003 0301 	and.w	r3, r3, #1
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d010      	beq.n	800ab46 <tcp_receive+0x74e>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ab24:	e00a      	b.n	800ab3c <tcp_receive+0x744>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab2a:	61fb      	str	r3, [r7, #28]
              pcb->ooseq = pcb->ooseq->next;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ab36:	69f8      	ldr	r0, [r7, #28]
 800ab38:	f7fe f800 	bl	8008b3c <tcp_seg_free>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1f0      	bne.n	800ab26 <tcp_receive+0x72e>
 800ab44:	e0af      	b.n	800aca6 <tcp_receive+0x8ae>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab4a:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ab4c:	e04b      	b.n	800abe6 <tcp_receive+0x7ee>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ab4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	899b      	ldrh	r3, [r3, #12]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fb fe4e 	bl	80067f8 <lwip_htons>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d036      	beq.n	800abd6 <tcp_receive+0x7de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ab68:	4b16      	ldr	r3, [pc, #88]	; (800abc4 <tcp_receive+0x7cc>)
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	899b      	ldrh	r3, [r3, #12]
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7fb fe41 	bl	80067f8 <lwip_htons>
 800ab76:	4603      	mov	r3, r0
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	f003 0302 	and.w	r3, r3, #2
            while (next &&
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d129      	bne.n	800abd6 <tcp_receive+0x7de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ab82:	4b10      	ldr	r3, [pc, #64]	; (800abc4 <tcp_receive+0x7cc>)
 800ab84:	68dc      	ldr	r4, [r3, #12]
 800ab86:	4b0f      	ldr	r3, [pc, #60]	; (800abc4 <tcp_receive+0x7cc>)
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	899b      	ldrh	r3, [r3, #12]
 800ab8c:	b29d      	uxth	r5, r3
 800ab8e:	2001      	movs	r0, #1
 800ab90:	f7fb fe32 	bl	80067f8 <lwip_htons>
 800ab94:	4603      	mov	r3, r0
 800ab96:	432b      	orrs	r3, r5
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ab9c:	4b09      	ldr	r3, [pc, #36]	; (800abc4 <tcp_receive+0x7cc>)
 800ab9e:	891c      	ldrh	r4, [r3, #8]
 800aba0:	4b08      	ldr	r3, [pc, #32]	; (800abc4 <tcp_receive+0x7cc>)
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	899b      	ldrh	r3, [r3, #12]
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fb fe25 	bl	80067f8 <lwip_htons>
 800abae:	4603      	mov	r3, r0
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	f003 0303 	and.w	r3, r3, #3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d008      	beq.n	800abcc <tcp_receive+0x7d4>
 800abba:	2301      	movs	r3, #1
 800abbc:	e007      	b.n	800abce <tcp_receive+0x7d6>
 800abbe:	bf00      	nop
 800abc0:	1ffe8b40 	.word	0x1ffe8b40
 800abc4:	1ffe8b20 	.word	0x1ffe8b20
 800abc8:	1ffe8b4a 	.word	0x1ffe8b4a
 800abcc:	2300      	movs	r3, #0
 800abce:	4423      	add	r3, r4
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	4b9d      	ldr	r3, [pc, #628]	; (800ae48 <tcp_receive+0xa50>)
 800abd4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800abd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abd8:	61bb      	str	r3, [r7, #24]
              next = next->next;
 800abda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800abe0:	69b8      	ldr	r0, [r7, #24]
 800abe2:	f7fd ffab 	bl	8008b3c <tcp_seg_free>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800abe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00e      	beq.n	800ac0a <tcp_receive+0x812>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800abec:	4b96      	ldr	r3, [pc, #600]	; (800ae48 <tcp_receive+0xa50>)
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	461a      	mov	r2, r3
 800abf2:	4b96      	ldr	r3, [pc, #600]	; (800ae4c <tcp_receive+0xa54>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	441a      	add	r2, r3
 800abf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac00:	8909      	ldrh	r1, [r1, #8]
 800ac02:	440b      	add	r3, r1
 800ac04:	1ad3      	subs	r3, r2, r3
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	daa1      	bge.n	800ab4e <tcp_receive+0x756>
              next = next->next;
              tcp_seg_free(tmp);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ac0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d047      	beq.n	800aca0 <tcp_receive+0x8a8>
                TCP_SEQ_GT(seqno + tcplen,
 800ac10:	4b8d      	ldr	r3, [pc, #564]	; (800ae48 <tcp_receive+0xa50>)
 800ac12:	881b      	ldrh	r3, [r3, #0]
 800ac14:	461a      	mov	r2, r3
 800ac16:	4b8d      	ldr	r3, [pc, #564]	; (800ae4c <tcp_receive+0xa54>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	441a      	add	r2, r3
 800ac1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	1ad3      	subs	r3, r2, r3
              next = next->next;
              tcp_seg_free(tmp);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	dd3b      	ble.n	800aca0 <tcp_receive+0x8a8>
                TCP_SEQ_GT(seqno + tcplen,
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ac28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	b29a      	uxth	r2, r3
 800ac30:	4b86      	ldr	r3, [pc, #536]	; (800ae4c <tcp_receive+0xa54>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	4b85      	ldr	r3, [pc, #532]	; (800ae50 <tcp_receive+0xa58>)
 800ac3c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ac3e:	4b84      	ldr	r3, [pc, #528]	; (800ae50 <tcp_receive+0xa58>)
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	899b      	ldrh	r3, [r3, #12]
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fb fdd6 	bl	80067f8 <lwip_htons>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	f003 0302 	and.w	r3, r3, #2
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d005      	beq.n	800ac64 <tcp_receive+0x86c>
                inseg.len -= 1;
 800ac58:	4b7d      	ldr	r3, [pc, #500]	; (800ae50 <tcp_receive+0xa58>)
 800ac5a:	891b      	ldrh	r3, [r3, #8]
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	4b7b      	ldr	r3, [pc, #492]	; (800ae50 <tcp_receive+0xa58>)
 800ac62:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ac64:	4b7a      	ldr	r3, [pc, #488]	; (800ae50 <tcp_receive+0xa58>)
 800ac66:	685a      	ldr	r2, [r3, #4]
 800ac68:	4b79      	ldr	r3, [pc, #484]	; (800ae50 <tcp_receive+0xa58>)
 800ac6a:	891b      	ldrh	r3, [r3, #8]
 800ac6c:	4610      	mov	r0, r2
 800ac6e:	4619      	mov	r1, r3
 800ac70:	f7fc fd0c 	bl	800768c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ac74:	4b76      	ldr	r3, [pc, #472]	; (800ae50 <tcp_receive+0xa58>)
 800ac76:	891c      	ldrh	r4, [r3, #8]
 800ac78:	4b75      	ldr	r3, [pc, #468]	; (800ae50 <tcp_receive+0xa58>)
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	899b      	ldrh	r3, [r3, #12]
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fb fdb9 	bl	80067f8 <lwip_htons>
 800ac86:	4603      	mov	r3, r0
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	f003 0303 	and.w	r3, r3, #3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d001      	beq.n	800ac96 <tcp_receive+0x89e>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e000      	b.n	800ac98 <tcp_receive+0x8a0>
 800ac96:	2300      	movs	r3, #0
 800ac98:	4423      	add	r3, r4
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	4b6a      	ldr	r3, [pc, #424]	; (800ae48 <tcp_receive+0xa50>)
 800ac9e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aca4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800aca6:	4b68      	ldr	r3, [pc, #416]	; (800ae48 <tcp_receive+0xa50>)
 800aca8:	881b      	ldrh	r3, [r3, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	4b67      	ldr	r3, [pc, #412]	; (800ae4c <tcp_receive+0xa54>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	441a      	add	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800acba:	4b63      	ldr	r3, [pc, #396]	; (800ae48 <tcp_receive+0xa50>)
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f7fd fb36 	bl	8008338 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800accc:	4b60      	ldr	r3, [pc, #384]	; (800ae50 <tcp_receive+0xa58>)
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	891b      	ldrh	r3, [r3, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d006      	beq.n	800ace4 <tcp_receive+0x8ec>
          recv_data = inseg.p;
 800acd6:	4b5e      	ldr	r3, [pc, #376]	; (800ae50 <tcp_receive+0xa58>)
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	4a5e      	ldr	r2, [pc, #376]	; (800ae54 <tcp_receive+0xa5c>)
 800acdc:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800acde:	4b5c      	ldr	r3, [pc, #368]	; (800ae50 <tcp_receive+0xa58>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ace4:	4b5a      	ldr	r3, [pc, #360]	; (800ae50 <tcp_receive+0xa58>)
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	899b      	ldrh	r3, [r3, #12]
 800acea:	b29b      	uxth	r3, r3
 800acec:	4618      	mov	r0, r3
 800acee:	f7fb fd83 	bl	80067f8 <lwip_htons>
 800acf2:	4603      	mov	r3, r0
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d006      	beq.n	800ad0c <tcp_receive+0x914>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800acfe:	4b56      	ldr	r3, [pc, #344]	; (800ae58 <tcp_receive+0xa60>)
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	f043 0320 	orr.w	r3, r3, #32
 800ad06:	b2da      	uxtb	r2, r3
 800ad08:	4b53      	ldr	r3, [pc, #332]	; (800ae58 <tcp_receive+0xa60>)
 800ad0a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ad0c:	e07a      	b.n	800ae04 <tcp_receive+0xa0c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad12:	617b      	str	r3, [r7, #20]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	4a4b      	ldr	r2, [pc, #300]	; (800ae4c <tcp_receive+0xa54>)
 800ad1e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	891b      	ldrh	r3, [r3, #8]
 800ad24:	461c      	mov	r4, r3
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	899b      	ldrh	r3, [r3, #12]
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7fb fd62 	bl	80067f8 <lwip_htons>
 800ad34:	4603      	mov	r3, r0
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	f003 0303 	and.w	r3, r3, #3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <tcp_receive+0x94c>
 800ad40:	2301      	movs	r3, #1
 800ad42:	e000      	b.n	800ad46 <tcp_receive+0x94e>
 800ad44:	2300      	movs	r3, #0
 800ad46:	4423      	add	r3, r4
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ad4c:	441a      	add	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	891b      	ldrh	r3, [r3, #8]
 800ad56:	461c      	mov	r4, r3
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	899b      	ldrh	r3, [r3, #12]
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fb fd49 	bl	80067f8 <lwip_htons>
 800ad66:	4603      	mov	r3, r0
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	f003 0303 	and.w	r3, r3, #3
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d001      	beq.n	800ad76 <tcp_receive+0x97e>
 800ad72:	2301      	movs	r3, #1
 800ad74:	e000      	b.n	800ad78 <tcp_receive+0x980>
 800ad76:	2300      	movs	r3, #0
 800ad78:	18e1      	adds	r1, r4, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ad7e:	b28b      	uxth	r3, r1
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f7fd fad5 	bl	8008338 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	891b      	ldrh	r3, [r3, #8]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d013      	beq.n	800adc0 <tcp_receive+0x9c8>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ad98:	4b2e      	ldr	r3, [pc, #184]	; (800ae54 <tcp_receive+0xa5c>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d008      	beq.n	800adb2 <tcp_receive+0x9ba>
              pbuf_cat(recv_data, cseg->p);
 800ada0:	4b2c      	ldr	r3, [pc, #176]	; (800ae54 <tcp_receive+0xa5c>)
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	4610      	mov	r0, r2
 800adaa:	4619      	mov	r1, r3
 800adac:	f7fc fe24 	bl	80079f8 <pbuf_cat>
 800adb0:	e003      	b.n	800adba <tcp_receive+0x9c2>
            } else {
              recv_data = cseg->p;
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	4a27      	ldr	r2, [pc, #156]	; (800ae54 <tcp_receive+0xa5c>)
 800adb8:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	2200      	movs	r2, #0
 800adbe:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	899b      	ldrh	r3, [r3, #12]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	4618      	mov	r0, r3
 800adca:	f7fb fd15 	bl	80067f8 <lwip_htons>
 800adce:	4603      	mov	r3, r0
 800add0:	b2db      	uxtb	r3, r3
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00d      	beq.n	800adf6 <tcp_receive+0x9fe>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800adda:	4b1f      	ldr	r3, [pc, #124]	; (800ae58 <tcp_receive+0xa60>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	f043 0320 	orr.w	r3, r3, #32
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	4b1c      	ldr	r3, [pc, #112]	; (800ae58 <tcp_receive+0xa60>)
 800ade6:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	7d1b      	ldrb	r3, [r3, #20]
 800adec:	2b04      	cmp	r3, #4
 800adee:	d102      	bne.n	800adf6 <tcp_receive+0x9fe>
              pcb->state = CLOSE_WAIT;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2207      	movs	r2, #7
 800adf4:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800adfe:	6978      	ldr	r0, [r7, #20]
 800ae00:	f7fd fe9c 	bl	8008b3c <tcp_seg_free>
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d008      	beq.n	800ae1e <tcp_receive+0xa26>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	f43f af78 	beq.w	800ad0e <tcp_receive+0x916>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	8b5b      	ldrh	r3, [r3, #26]
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d018      	beq.n	800ae5c <tcp_receive+0xa64>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	8b5b      	ldrh	r3, [r3, #26]
 800ae2e:	f023 0301 	bic.w	r3, r3, #1
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	835a      	strh	r2, [r3, #26]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	8b5b      	ldrh	r3, [r3, #26]
 800ae3c:	f043 0302 	orr.w	r3, r3, #2
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	835a      	strh	r2, [r3, #26]
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ae46:	e170      	b.n	800b12a <tcp_receive+0xd32>
 800ae48:	1ffe8b4a 	.word	0x1ffe8b4a
 800ae4c:	1ffe8b40 	.word	0x1ffe8b40
 800ae50:	1ffe8b20 	.word	0x1ffe8b20
 800ae54:	1ffe8b50 	.word	0x1ffe8b50
 800ae58:	1ffe8b4d 	.word	0x1ffe8b4d
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	8b5b      	ldrh	r3, [r3, #26]
 800ae60:	f043 0301 	orr.w	r3, r3, #1
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	835a      	strh	r2, [r3, #26]
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ae6a:	e15e      	b.n	800b12a <tcp_receive+0xd32>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d106      	bne.n	800ae82 <tcp_receive+0xa8a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ae74:	4855      	ldr	r0, [pc, #340]	; (800afcc <tcp_receive+0xbd4>)
 800ae76:	f7fd fe79 	bl	8008b6c <tcp_seg_copy>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	675a      	str	r2, [r3, #116]	; 0x74
 800ae80:	e14b      	b.n	800b11a <tcp_receive+0xd22>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ae82:	2300      	movs	r3, #0
 800ae84:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae8a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae8c:	e141      	b.n	800b112 <tcp_receive+0xd1a>
            if (seqno == next->tcphdr->seqno) {
 800ae8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	685a      	ldr	r2, [r3, #4]
 800ae94:	4b4e      	ldr	r3, [pc, #312]	; (800afd0 <tcp_receive+0xbd8>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d11d      	bne.n	800aed8 <tcp_receive+0xae0>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ae9c:	4b4b      	ldr	r3, [pc, #300]	; (800afcc <tcp_receive+0xbd4>)
 800ae9e:	891a      	ldrh	r2, [r3, #8]
 800aea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea2:	891b      	ldrh	r3, [r3, #8]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d916      	bls.n	800aed6 <tcp_receive+0xade>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aea8:	4848      	ldr	r0, [pc, #288]	; (800afcc <tcp_receive+0xbd4>)
 800aeaa:	f7fd fe5f 	bl	8008b6c <tcp_seg_copy>
 800aeae:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00e      	beq.n	800aed4 <tcp_receive+0xadc>
                  if (prev != NULL) {
 800aeb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d003      	beq.n	800aec4 <tcp_receive+0xacc>
                    prev->next = cseg;
 800aebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	601a      	str	r2, [r3, #0]
 800aec2:	e002      	b.n	800aeca <tcp_receive+0xad2>
                  } else {
                    pcb->ooseq = cseg;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800aeca:	68b8      	ldr	r0, [r7, #8]
 800aecc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aece:	f7ff f9c5 	bl	800a25c <tcp_oos_insert_segment>
                }
                break;
 800aed2:	e122      	b.n	800b11a <tcp_receive+0xd22>
 800aed4:	e121      	b.n	800b11a <tcp_receive+0xd22>
              } else {
                /* Either the lengths are the same or the incoming
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
 800aed6:	e120      	b.n	800b11a <tcp_receive+0xd22>
              }
            } else {
              if (prev == NULL) {
 800aed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d117      	bne.n	800af0e <tcp_receive+0xb16>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800aede:	4b3c      	ldr	r3, [pc, #240]	; (800afd0 <tcp_receive+0xbd8>)
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	da4f      	bge.n	800af8e <tcp_receive+0xb96>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aeee:	4837      	ldr	r0, [pc, #220]	; (800afcc <tcp_receive+0xbd4>)
 800aef0:	f7fd fe3c 	bl	8008b6c <tcp_seg_copy>
 800aef4:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d007      	beq.n	800af0c <tcp_receive+0xb14>
                    pcb->ooseq = cseg;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800af02:	6938      	ldr	r0, [r7, #16]
 800af04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800af06:	f7ff f9a9 	bl	800a25c <tcp_oos_insert_segment>
                  }
                  break;
 800af0a:	e106      	b.n	800b11a <tcp_receive+0xd22>
 800af0c:	e105      	b.n	800b11a <tcp_receive+0xd22>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800af0e:	4b30      	ldr	r3, [pc, #192]	; (800afd0 <tcp_receive+0xbd8>)
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	3b01      	subs	r3, #1
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	db36      	blt.n	800af8e <tcp_receive+0xb96>
 800af20:	4b2b      	ldr	r3, [pc, #172]	; (800afd0 <tcp_receive+0xbd8>)
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	3301      	adds	r3, #1
 800af2e:	2b00      	cmp	r3, #0
 800af30:	dc2d      	bgt.n	800af8e <tcp_receive+0xb96>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800af32:	4826      	ldr	r0, [pc, #152]	; (800afcc <tcp_receive+0xbd4>)
 800af34:	f7fd fe1a 	bl	8008b6c <tcp_seg_copy>
 800af38:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d025      	beq.n	800af8c <tcp_receive+0xb94>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800af40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af48:	8912      	ldrh	r2, [r2, #8]
 800af4a:	441a      	add	r2, r3
 800af4c:	4b20      	ldr	r3, [pc, #128]	; (800afd0 <tcp_receive+0xbd8>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	dd12      	ble.n	800af7c <tcp_receive+0xb84>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800af56:	4b1e      	ldr	r3, [pc, #120]	; (800afd0 <tcp_receive+0xbd8>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	b29b      	uxth	r3, r3
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	b29a      	uxth	r2, r3
 800af68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800af6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6e:	685a      	ldr	r2, [r3, #4]
 800af70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af72:	891b      	ldrh	r3, [r3, #8]
 800af74:	4610      	mov	r0, r2
 800af76:	4619      	mov	r1, r3
 800af78:	f7fc fb88 	bl	800768c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800af7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800af86:	f7ff f969 	bl	800a25c <tcp_oos_insert_segment>
                  }
                  break;
 800af8a:	e0c6      	b.n	800b11a <tcp_receive+0xd22>
 800af8c:	e0c5      	b.n	800b11a <tcp_receive+0xd22>
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800af8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af90:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800af92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	f040 80b8 	bne.w	800b10c <tcp_receive+0xd14>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800af9c:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <tcp_receive+0xbd8>)
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	1ad3      	subs	r3, r2, r3
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f340 80af 	ble.w	800b10c <tcp_receive+0xd14>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800afae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	899b      	ldrh	r3, [r3, #12]
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fb fc1e 	bl	80067f8 <lwip_htons>
 800afbc:	4603      	mov	r3, r0
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d005      	beq.n	800afd4 <tcp_receive+0xbdc>
                  /* segment "next" already contains all data */
                  break;
 800afc8:	e0a7      	b.n	800b11a <tcp_receive+0xd22>
 800afca:	bf00      	nop
 800afcc:	1ffe8b20 	.word	0x1ffe8b20
 800afd0:	1ffe8b40 	.word	0x1ffe8b40
                }
                next->next = tcp_seg_copy(&inseg);
 800afd4:	4863      	ldr	r0, [pc, #396]	; (800b164 <tcp_receive+0xd6c>)
 800afd6:	f7fd fdc9 	bl	8008b6c <tcp_seg_copy>
 800afda:	4602      	mov	r2, r0
 800afdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afde:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800afe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f000 8090 	beq.w	800b10a <tcp_receive+0xd12>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800afea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aff2:	8912      	ldrh	r2, [r2, #8]
 800aff4:	441a      	add	r2, r3
 800aff6:	4b5c      	ldr	r3, [pc, #368]	; (800b168 <tcp_receive+0xd70>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	2b00      	cmp	r3, #0
 800affe:	dd12      	ble.n	800b026 <tcp_receive+0xc2e>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b000:	4b59      	ldr	r3, [pc, #356]	; (800b168 <tcp_receive+0xd70>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	b29a      	uxth	r2, r3
 800b006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	b29a      	uxth	r2, r3
 800b012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b014:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b018:	685a      	ldr	r2, [r3, #4]
 800b01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01c:	891b      	ldrh	r3, [r3, #8]
 800b01e:	4610      	mov	r0, r2
 800b020:	4619      	mov	r1, r3
 800b022:	f7fc fb33 	bl	800768c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b026:	4b51      	ldr	r3, [pc, #324]	; (800b16c <tcp_receive+0xd74>)
 800b028:	881b      	ldrh	r3, [r3, #0]
 800b02a:	461a      	mov	r2, r3
 800b02c:	4b4e      	ldr	r3, [pc, #312]	; (800b168 <tcp_receive+0xd70>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	441a      	add	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b036:	6879      	ldr	r1, [r7, #4]
 800b038:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b03a:	440b      	add	r3, r1
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	2b00      	cmp	r3, #0
 800b040:	dd63      	ble.n	800b10a <tcp_receive+0xd12>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	899b      	ldrh	r3, [r3, #12]
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fb fbd3 	bl	80067f8 <lwip_htons>
 800b052:	4603      	mov	r3, r0
 800b054:	b2db      	uxtb	r3, r3
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d023      	beq.n	800b0a6 <tcp_receive+0xcae>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68dc      	ldr	r4, [r3, #12]
 800b064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	899b      	ldrh	r3, [r3, #12]
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	b29b      	uxth	r3, r3
 800b070:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b074:	b29d      	uxth	r5, r3
 800b076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	899b      	ldrh	r3, [r3, #12]
 800b07e:	b29b      	uxth	r3, r3
 800b080:	4618      	mov	r0, r3
 800b082:	f7fb fbb9 	bl	80067f8 <lwip_htons>
 800b086:	4603      	mov	r3, r0
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b090:	b29b      	uxth	r3, r3
 800b092:	4618      	mov	r0, r3
 800b094:	f7fb fbb0 	bl	80067f8 <lwip_htons>
 800b098:	4603      	mov	r3, r0
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	462a      	mov	r2, r5
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b0ae:	b291      	uxth	r1, r2
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b0b4:	440a      	add	r2, r1
 800b0b6:	b291      	uxth	r1, r2
 800b0b8:	4a2b      	ldr	r2, [pc, #172]	; (800b168 <tcp_receive+0xd70>)
 800b0ba:	6812      	ldr	r2, [r2, #0]
 800b0bc:	b292      	uxth	r2, r2
 800b0be:	1a8a      	subs	r2, r1, r2
 800b0c0:	b292      	uxth	r2, r2
 800b0c2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	685a      	ldr	r2, [r3, #4]
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	891b      	ldrh	r3, [r3, #8]
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	f7fc fada 	bl	800768c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	891c      	ldrh	r4, [r3, #8]
 800b0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	899b      	ldrh	r3, [r3, #12]
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7fb fb85 	bl	80067f8 <lwip_htons>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	f003 0303 	and.w	r3, r3, #3
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d001      	beq.n	800b0fe <tcp_receive+0xd06>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e000      	b.n	800b100 <tcp_receive+0xd08>
 800b0fe:	2300      	movs	r3, #0
 800b100:	4423      	add	r3, r4
 800b102:	b29a      	uxth	r2, r3
 800b104:	4b19      	ldr	r3, [pc, #100]	; (800b16c <tcp_receive+0xd74>)
 800b106:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b108:	e007      	b.n	800b11a <tcp_receive+0xd22>
 800b10a:	e006      	b.n	800b11a <tcp_receive+0xd22>
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	63bb      	str	r3, [r7, #56]	; 0x38
 800b112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b114:	2b00      	cmp	r3, #0
 800b116:	f47f aeba 	bne.w	800ae8e <tcp_receive+0xa96>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 ffe6 	bl	800c0ec <tcp_send_empty_ack>
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b120:	e003      	b.n	800b12a <tcp_receive+0xd32>
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 ffe2 	bl	800c0ec <tcp_send_empty_ack>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b128:	e019      	b.n	800b15e <tcp_receive+0xd66>
 800b12a:	e018      	b.n	800b15e <tcp_receive+0xd66>
      tcp_send_empty_ack(pcb);
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b12c:	4b0e      	ldr	r3, [pc, #56]	; (800b168 <tcp_receive+0xd70>)
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	2b00      	cmp	r3, #0
 800b138:	db0a      	blt.n	800b150 <tcp_receive+0xd58>
 800b13a:	4b0b      	ldr	r3, [pc, #44]	; (800b168 <tcp_receive+0xd70>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b146:	440b      	add	r3, r1
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	3301      	adds	r3, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	dd06      	ble.n	800b15e <tcp_receive+0xd66>
      tcp_ack_now(pcb);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	8b5b      	ldrh	r3, [r3, #26]
 800b154:	f043 0302 	orr.w	r3, r3, #2
 800b158:	b29a      	uxth	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b15e:	3750      	adds	r7, #80	; 0x50
 800b160:	46bd      	mov	sp, r7
 800b162:	bdb0      	pop	{r4, r5, r7, pc}
 800b164:	1ffe8b20 	.word	0x1ffe8b20
 800b168:	1ffe8b40 	.word	0x1ffe8b40
 800b16c:	1ffe8b4a 	.word	0x1ffe8b4a

0800b170 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b176:	4b15      	ldr	r3, [pc, #84]	; (800b1cc <tcp_get_next_optbyte+0x5c>)
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	1c5a      	adds	r2, r3, #1
 800b17c:	b291      	uxth	r1, r2
 800b17e:	4a13      	ldr	r2, [pc, #76]	; (800b1cc <tcp_get_next_optbyte+0x5c>)
 800b180:	8011      	strh	r1, [r2, #0]
 800b182:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b184:	4b12      	ldr	r3, [pc, #72]	; (800b1d0 <tcp_get_next_optbyte+0x60>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d004      	beq.n	800b196 <tcp_get_next_optbyte+0x26>
 800b18c:	4b11      	ldr	r3, [pc, #68]	; (800b1d4 <tcp_get_next_optbyte+0x64>)
 800b18e:	881b      	ldrh	r3, [r3, #0]
 800b190:	88fa      	ldrh	r2, [r7, #6]
 800b192:	429a      	cmp	r2, r3
 800b194:	d208      	bcs.n	800b1a8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b196:	4b10      	ldr	r3, [pc, #64]	; (800b1d8 <tcp_get_next_optbyte+0x68>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	3314      	adds	r3, #20
 800b19c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b19e:	88fb      	ldrh	r3, [r7, #6]
 800b1a0:	683a      	ldr	r2, [r7, #0]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	e00b      	b.n	800b1c0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b1a8:	88fb      	ldrh	r3, [r7, #6]
 800b1aa:	b2da      	uxtb	r2, r3
 800b1ac:	4b09      	ldr	r3, [pc, #36]	; (800b1d4 <tcp_get_next_optbyte+0x64>)
 800b1ae:	881b      	ldrh	r3, [r3, #0]
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b1b6:	4b06      	ldr	r3, [pc, #24]	; (800b1d0 <tcp_get_next_optbyte+0x60>)
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	797b      	ldrb	r3, [r7, #5]
 800b1bc:	4413      	add	r3, r2
 800b1be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr
 800b1cc:	1ffe8b3c 	.word	0x1ffe8b3c
 800b1d0:	1ffe8b38 	.word	0x1ffe8b38
 800b1d4:	1ffe8b36 	.word	0x1ffe8b36
 800b1d8:	1ffe8b30 	.word	0x1ffe8b30

0800b1dc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b1e4:	4b2c      	ldr	r3, [pc, #176]	; (800b298 <tcp_parseopt+0xbc>)
 800b1e6:	881b      	ldrh	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d051      	beq.n	800b290 <tcp_parseopt+0xb4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b1ec:	4b2b      	ldr	r3, [pc, #172]	; (800b29c <tcp_parseopt+0xc0>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	801a      	strh	r2, [r3, #0]
 800b1f2:	e045      	b.n	800b280 <tcp_parseopt+0xa4>
      u8_t opt = tcp_get_next_optbyte();
 800b1f4:	f7ff ffbc 	bl	800b170 <tcp_get_next_optbyte>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d03e      	beq.n	800b280 <tcp_parseopt+0xa4>
 800b202:	2b02      	cmp	r3, #2
 800b204:	d002      	beq.n	800b20c <tcp_parseopt+0x30>
 800b206:	2b00      	cmp	r3, #0
 800b208:	d041      	beq.n	800b28e <tcp_parseopt+0xb2>
 800b20a:	e027      	b.n	800b25c <tcp_parseopt+0x80>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b20c:	f7ff ffb0 	bl	800b170 <tcp_get_next_optbyte>
 800b210:	4603      	mov	r3, r0
 800b212:	2b04      	cmp	r3, #4
 800b214:	d106      	bne.n	800b224 <tcp_parseopt+0x48>
 800b216:	4b21      	ldr	r3, [pc, #132]	; (800b29c <tcp_parseopt+0xc0>)
 800b218:	881b      	ldrh	r3, [r3, #0]
 800b21a:	3302      	adds	r3, #2
 800b21c:	4a1e      	ldr	r2, [pc, #120]	; (800b298 <tcp_parseopt+0xbc>)
 800b21e:	8812      	ldrh	r2, [r2, #0]
 800b220:	4293      	cmp	r3, r2
 800b222:	dd00      	ble.n	800b226 <tcp_parseopt+0x4a>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
 800b224:	e034      	b.n	800b290 <tcp_parseopt+0xb4>
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b226:	f7ff ffa3 	bl	800b170 <tcp_get_next_optbyte>
 800b22a:	4603      	mov	r3, r0
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	021b      	lsls	r3, r3, #8
 800b230:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b232:	f7ff ff9d 	bl	800b170 <tcp_get_next_optbyte>
 800b236:	4603      	mov	r3, r0
 800b238:	b29a      	uxth	r2, r3
 800b23a:	89bb      	ldrh	r3, [r7, #12]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b240:	89bb      	ldrh	r3, [r7, #12]
 800b242:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b246:	d804      	bhi.n	800b252 <tcp_parseopt+0x76>
 800b248:	89bb      	ldrh	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d001      	beq.n	800b252 <tcp_parseopt+0x76>
 800b24e:	89ba      	ldrh	r2, [r7, #12]
 800b250:	e001      	b.n	800b256 <tcp_parseopt+0x7a>
 800b252:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b25a:	e011      	b.n	800b280 <tcp_parseopt+0xa4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b25c:	f7ff ff88 	bl	800b170 <tcp_get_next_optbyte>
 800b260:	4603      	mov	r3, r0
 800b262:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b264:	7afb      	ldrb	r3, [r7, #11]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d800      	bhi.n	800b26c <tcp_parseopt+0x90>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            /* If the length field is zero, the options are malformed
               and we don't process them further. */
            return;
 800b26a:	e011      	b.n	800b290 <tcp_parseopt+0xb4>
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b26c:	7afb      	ldrb	r3, [r7, #11]
 800b26e:	b29a      	uxth	r2, r3
 800b270:	4b0a      	ldr	r3, [pc, #40]	; (800b29c <tcp_parseopt+0xc0>)
 800b272:	881b      	ldrh	r3, [r3, #0]
 800b274:	4413      	add	r3, r2
 800b276:	b29b      	uxth	r3, r3
 800b278:	3b02      	subs	r3, #2
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	4b07      	ldr	r3, [pc, #28]	; (800b29c <tcp_parseopt+0xc0>)
 800b27e:	801a      	strh	r2, [r3, #0]

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b280:	4b06      	ldr	r3, [pc, #24]	; (800b29c <tcp_parseopt+0xc0>)
 800b282:	881a      	ldrh	r2, [r3, #0]
 800b284:	4b04      	ldr	r3, [pc, #16]	; (800b298 <tcp_parseopt+0xbc>)
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d3b3      	bcc.n	800b1f4 <tcp_parseopt+0x18>
 800b28c:	e000      	b.n	800b290 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
        case LWIP_TCP_OPT_EOL:
          /* End of options. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
 800b28e:	bf00      	nop
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	1ffe8b34 	.word	0x1ffe8b34
 800b29c:	1ffe8b3c 	.word	0x1ffe8b3c

0800b2a0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b2a4:	4b05      	ldr	r3, [pc, #20]	; (800b2bc <tcp_trigger_input_pcb_close+0x1c>)
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	f043 0310 	orr.w	r3, r3, #16
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	4b03      	ldr	r3, [pc, #12]	; (800b2bc <tcp_trigger_input_pcb_close+0x1c>)
 800b2b0:	701a      	strb	r2, [r3, #0]
}
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	1ffe8b4d 	.word	0x1ffe8b4d

0800b2c0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00a      	beq.n	800b2e8 <tcp_route+0x28>
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	7a1b      	ldrb	r3, [r3, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d006      	beq.n	800b2e8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	7a1b      	ldrb	r3, [r3, #8]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fc f882 	bl	80073e8 <netif_get_by_index>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	e003      	b.n	800b2f0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f7fa ffd9 	bl	80062a0 <ip4_route>
 800b2ee:	4603      	mov	r3, r0
  }
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b2f8:	b590      	push	{r4, r7, lr}
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	603b      	str	r3, [r7, #0]
 800b304:	4613      	mov	r3, r2
 800b306:	71fb      	strb	r3, [r7, #7]
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b308:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b30c:	f003 0301 	and.w	r3, r3, #1
 800b310:	2b00      	cmp	r3, #0
 800b312:	d001      	beq.n	800b318 <tcp_create_segment+0x20>
 800b314:	2304      	movs	r3, #4
 800b316:	e000      	b.n	800b31a <tcp_create_segment+0x22>
 800b318:	2300      	movs	r3, #0
 800b31a:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b31c:	2004      	movs	r0, #4
 800b31e:	f7fb fdb7 	bl	8006e90 <memp_malloc>
 800b322:	6138      	str	r0, [r7, #16]
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d104      	bne.n	800b334 <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b32a:	68b8      	ldr	r0, [r7, #8]
 800b32c:	f7fc faf4 	bl	8007918 <pbuf_free>
    return NULL;
 800b330:	2300      	movs	r3, #0
 800b332:	e055      	b.n	800b3e0 <tcp_create_segment+0xe8>
  }
  seg->flags = optflags;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b33a:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	2200      	movs	r2, #0
 800b340:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	891a      	ldrh	r2, [r3, #8]
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
 800b34e:	b29b      	uxth	r3, r3
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	b29a      	uxth	r2, r3
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b358:	68b8      	ldr	r0, [r7, #8]
 800b35a:	2114      	movs	r1, #20
 800b35c:	f7fc fa4c 	bl	80077f8 <pbuf_add_header>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d004      	beq.n	800b370 <tcp_create_segment+0x78>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b366:	6938      	ldr	r0, [r7, #16]
 800b368:	f7fd fbe8 	bl	8008b3c <tcp_seg_free>
    return NULL;
 800b36c:	2300      	movs	r3, #0
 800b36e:	e037      	b.n	800b3e0 <tcp_create_segment+0xe8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	68dc      	ldr	r4, [r3, #12]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	8adb      	ldrh	r3, [r3, #22]
 800b382:	4618      	mov	r0, r3
 800b384:	f7fb fa38 	bl	80067f8 <lwip_htons>
 800b388:	4603      	mov	r3, r0
 800b38a:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	68dc      	ldr	r4, [r3, #12]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	8b1b      	ldrh	r3, [r3, #24]
 800b394:	4618      	mov	r0, r3
 800b396:	f7fb fa2f 	bl	80067f8 <lwip_htons>
 800b39a:	4603      	mov	r3, r0
 800b39c:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	68dc      	ldr	r4, [r3, #12]
 800b3a2:	6838      	ldr	r0, [r7, #0]
 800b3a4:	f7fb fa3e 	bl	8006824 <lwip_htonl>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	68dc      	ldr	r4, [r3, #12]
 800b3b0:	7dfb      	ldrb	r3, [r7, #23]
 800b3b2:	089b      	lsrs	r3, r3, #2
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	3305      	adds	r3, #5
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	031b      	lsls	r3, r3, #12
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	79fb      	ldrb	r3, [r7, #7]
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fb fa15 	bl	80067f8 <lwip_htons>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	749a      	strb	r2, [r3, #18]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	74da      	strb	r2, [r3, #19]
  return seg;
 800b3de:	693b      	ldr	r3, [r7, #16]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	371c      	adds	r7, #28
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd90      	pop	{r4, r7, pc}

0800b3e8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b3e8:	b5b0      	push	{r4, r5, r7, lr}
 800b3ea:	b08a      	sub	sp, #40	; 0x28
 800b3ec:	af02      	add	r7, sp, #8
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	61bb      	str	r3, [r7, #24]
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	613b      	str	r3, [r7, #16]
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);

  useg = pcb->unsent;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b404:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <tcp_split_unsent_seg+0x28>
    return ERR_MEM;
 800b40c:	23ff      	movs	r3, #255	; 0xff
 800b40e:	e0eb      	b.n	800b5e8 <tcp_split_unsent_seg+0x200>
  }

  if (split == 0) {
 800b410:	887b      	ldrh	r3, [r7, #2]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <tcp_split_unsent_seg+0x32>
    LWIP_ASSERT("Can't split segment into length 0", 0);
    return ERR_VAL;
 800b416:	23fa      	movs	r3, #250	; 0xfa
 800b418:	e0e6      	b.n	800b5e8 <tcp_split_unsent_seg+0x200>
  }

  if (useg->len <= split) {
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	891b      	ldrh	r3, [r3, #8]
 800b41e:	887a      	ldrh	r2, [r7, #2]
 800b420:	429a      	cmp	r2, r3
 800b422:	d301      	bcc.n	800b428 <tcp_split_unsent_seg+0x40>
    return ERR_OK;
 800b424:	2300      	movs	r3, #0
 800b426:	e0df      	b.n	800b5e8 <tcp_split_unsent_seg+0x200>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	7a9b      	ldrb	r3, [r3, #10]
 800b42c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
 800b430:	f003 0301 	and.w	r3, r3, #1
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <tcp_split_unsent_seg+0x54>
 800b438:	2304      	movs	r3, #4
 800b43a:	e000      	b.n	800b43e <tcp_split_unsent_seg+0x56>
 800b43c:	2300      	movs	r3, #0
 800b43e:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	891a      	ldrh	r2, [r3, #8]
 800b444:	887b      	ldrh	r3, [r7, #2]
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b44a:	7bbb      	ldrb	r3, [r7, #14]
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	89bb      	ldrh	r3, [r7, #12]
 800b450:	4413      	add	r3, r2
 800b452:	b29b      	uxth	r3, r3
 800b454:	2038      	movs	r0, #56	; 0x38
 800b456:	4619      	mov	r1, r3
 800b458:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b45c:	f7fc f840 	bl	80074e0 <pbuf_alloc>
 800b460:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d100      	bne.n	800b46a <tcp_split_unsent_seg+0x82>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
 800b468:	e0b7      	b.n	800b5da <tcp_split_unsent_seg+0x1f2>
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	891a      	ldrh	r2, [r3, #8]
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	891b      	ldrh	r3, [r3, #8]
 800b474:	1ad3      	subs	r3, r2, r3
 800b476:	b29a      	uxth	r2, r3
 800b478:	887b      	ldrh	r3, [r7, #2]
 800b47a:	4413      	add	r3, r2
 800b47c:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	6858      	ldr	r0, [r3, #4]
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	685a      	ldr	r2, [r3, #4]
 800b486:	7bbb      	ldrb	r3, [r7, #14]
 800b488:	18d1      	adds	r1, r2, r3
 800b48a:	89ba      	ldrh	r2, [r7, #12]
 800b48c:	897b      	ldrh	r3, [r7, #10]
 800b48e:	f7fc fb7b 	bl	8007b88 <pbuf_copy_partial>
 800b492:	4603      	mov	r3, r0
 800b494:	461a      	mov	r2, r3
 800b496:	89bb      	ldrh	r3, [r7, #12]
 800b498:	4293      	cmp	r3, r2
 800b49a:	d000      	beq.n	800b49e <tcp_split_unsent_seg+0xb6>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not copy pbuf remainder %u\n", remainder));
    goto memerr;
 800b49c:	e09d      	b.n	800b5da <tcp_split_unsent_seg+0x1f2>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	899b      	ldrh	r3, [r3, #12]
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fb f9a6 	bl	80067f8 <lwip_htons>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4b4:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800b4ba:	7ffb      	ldrb	r3, [r7, #31]
 800b4bc:	f003 0308 	and.w	r3, r3, #8
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d007      	beq.n	800b4d4 <tcp_split_unsent_seg+0xec>
    split_flags &= ~TCP_PSH;
 800b4c4:	7ffb      	ldrb	r3, [r7, #31]
 800b4c6:	f023 0308 	bic.w	r3, r3, #8
 800b4ca:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800b4cc:	7fbb      	ldrb	r3, [r7, #30]
 800b4ce:	f043 0308 	orr.w	r3, r3, #8
 800b4d2:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800b4d4:	7ffb      	ldrb	r3, [r7, #31]
 800b4d6:	f003 0301 	and.w	r3, r3, #1
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d007      	beq.n	800b4ee <tcp_split_unsent_seg+0x106>
    split_flags &= ~TCP_FIN;
 800b4de:	7ffb      	ldrb	r3, [r7, #31]
 800b4e0:	f023 0301 	bic.w	r3, r3, #1
 800b4e4:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800b4e6:	7fbb      	ldrb	r3, [r7, #30]
 800b4e8:	f043 0301 	orr.w	r3, r3, #1
 800b4ec:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7fb f995 	bl	8006824 <lwip_htonl>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	887b      	ldrh	r3, [r7, #2]
 800b4fe:	18d4      	adds	r4, r2, r3
 800b500:	7fba      	ldrb	r2, [r7, #30]
 800b502:	7bfb      	ldrb	r3, [r7, #15]
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	6939      	ldr	r1, [r7, #16]
 800b50a:	4623      	mov	r3, r4
 800b50c:	f7ff fef4 	bl	800b2f8 <tcp_create_segment>
 800b510:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d100      	bne.n	800b51a <tcp_split_unsent_seg+0x132>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 800b518:	e05f      	b.n	800b5da <tcp_split_unsent_seg+0x1f2>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fc fa40 	bl	80079a4 <pbuf_clen>
 800b524:	4603      	mov	r3, r0
 800b526:	461a      	mov	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b52e:	1a9b      	subs	r3, r3, r2
 800b530:	b29a      	uxth	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	6859      	ldr	r1, [r3, #4]
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	891a      	ldrh	r2, [r3, #8]
 800b542:	89bb      	ldrh	r3, [r7, #12]
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	b29b      	uxth	r3, r3
 800b548:	4608      	mov	r0, r1
 800b54a:	4619      	mov	r1, r3
 800b54c:	f7fc f89e 	bl	800768c <pbuf_realloc>
  useg->len -= remainder;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	891a      	ldrh	r2, [r3, #8]
 800b554:	89bb      	ldrh	r3, [r7, #12]
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	b29a      	uxth	r2, r3
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	68dc      	ldr	r4, [r3, #12]
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	899b      	ldrh	r3, [r3, #12]
 800b568:	b29d      	uxth	r5, r3
 800b56a:	7ffb      	ldrb	r3, [r7, #31]
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fb f942 	bl	80067f8 <lwip_htons>
 800b574:	4603      	mov	r3, r0
 800b576:	432b      	orrs	r3, r5
 800b578:	b29b      	uxth	r3, r3
 800b57a:	81a3      	strh	r3, [r4, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	4618      	mov	r0, r3
 800b582:	f7fc fa0f 	bl	80079a4 <pbuf_clen>
 800b586:	4603      	mov	r3, r0
 800b588:	461a      	mov	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b590:	4413      	add	r3, r2
 800b592:	b29a      	uxth	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fc fa00 	bl	80079a4 <pbuf_clen>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5ae:	4413      	add	r3, r2
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	69ba      	ldr	r2, [r7, #24]
 800b5c4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d103      	bne.n	800b5d6 <tcp_split_unsent_seg+0x1ee>
    pcb->unsent_oversize = 0;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	e006      	b.n	800b5e8 <tcp_split_unsent_seg+0x200>
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
  if (p != NULL) {
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <tcp_split_unsent_seg+0x1fe>
    pbuf_free(p);
 800b5e0:	6938      	ldr	r0, [r7, #16]
 800b5e2:	f7fc f999 	bl	8007918 <pbuf_free>
  }

  return ERR_MEM;
 800b5e6:	23ff      	movs	r3, #255	; 0xff
 800b5e8:	b25b      	sxtb	r3, r3
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3720      	adds	r7, #32
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bdb0      	pop	{r4, r5, r7, pc}
 800b5f2:	bf00      	nop

0800b5f4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b5f4:	b5b0      	push	{r4, r5, r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b600:	2b00      	cmp	r3, #0
 800b602:	d02d      	beq.n	800b660 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b608:	60fb      	str	r3, [r7, #12]
 800b60a:	e002      	b.n	800b612 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1f8      	bne.n	800b60c <tcp_send_fin+0x18>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	899b      	ldrh	r3, [r3, #12]
 800b620:	b29b      	uxth	r3, r3
 800b622:	4618      	mov	r0, r3
 800b624:	f7fb f8e8 	bl	80067f8 <lwip_htons>
 800b628:	4603      	mov	r3, r0
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	f003 0307 	and.w	r3, r3, #7
 800b630:	2b00      	cmp	r3, #0
 800b632:	d115      	bne.n	800b660 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	68dc      	ldr	r4, [r3, #12]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	899b      	ldrh	r3, [r3, #12]
 800b63e:	b29d      	uxth	r5, r3
 800b640:	2001      	movs	r0, #1
 800b642:	f7fb f8d9 	bl	80067f8 <lwip_htons>
 800b646:	4603      	mov	r3, r0
 800b648:	432b      	orrs	r3, r5
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	8b5b      	ldrh	r3, [r3, #26]
 800b652:	f043 0320 	orr.w	r3, r3, #32
 800b656:	b29a      	uxth	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b65c:	2300      	movs	r3, #0
 800b65e:	e004      	b.n	800b66a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	2101      	movs	r1, #1
 800b664:	f000 f806 	bl	800b674 <tcp_enqueue_flags>
 800b668:	4603      	mov	r3, r0
 800b66a:	b25b      	sxtb	r3, r3
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bdb0      	pop	{r4, r5, r7, pc}

0800b674 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b674:	b590      	push	{r4, r7, lr}
 800b676:	b08b      	sub	sp, #44	; 0x2c
 800b678:	af02      	add	r7, sp, #8
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	460b      	mov	r3, r1
 800b67e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b680:	2300      	movs	r3, #0
 800b682:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b684:	2300      	movs	r3, #0
 800b686:	75fb      	strb	r3, [r7, #23]

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b688:	78fb      	ldrb	r3, [r7, #3]
 800b68a:	f003 0302 	and.w	r3, r3, #2
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d001      	beq.n	800b696 <tcp_enqueue_flags+0x22>
    optflags = TF_SEG_OPTS_MSS;
 800b692:	2301      	movs	r3, #1
 800b694:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b696:	7ffb      	ldrb	r3, [r7, #31]
 800b698:	f003 0301 	and.w	r3, r3, #1
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <tcp_enqueue_flags+0x30>
 800b6a0:	2304      	movs	r3, #4
 800b6a2:	e000      	b.n	800b6a6 <tcp_enqueue_flags+0x32>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b6a8:	7dfb      	ldrb	r3, [r7, #23]
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	2038      	movs	r0, #56	; 0x38
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b6b4:	f7fb ff14 	bl	80074e0 <pbuf_alloc>
 800b6b8:	6138      	str	r0, [r7, #16]
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d108      	bne.n	800b6d2 <tcp_enqueue_flags+0x5e>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	8b5b      	ldrh	r3, [r3, #26]
 800b6c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6c8:	b29a      	uxth	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b6ce:	23ff      	movs	r3, #255	; 0xff
 800b6d0:	e05b      	b.n	800b78a <tcp_enqueue_flags+0x116>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800b6d6:	78fa      	ldrb	r2, [r7, #3]
 800b6d8:	7ffb      	ldrb	r3, [r7, #31]
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	6939      	ldr	r1, [r7, #16]
 800b6e0:	4623      	mov	r3, r4
 800b6e2:	f7ff fe09 	bl	800b2f8 <tcp_create_segment>
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d108      	bne.n	800b700 <tcp_enqueue_flags+0x8c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	8b5b      	ldrh	r3, [r3, #26]
 800b6f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b6fc:	23ff      	movs	r3, #255	; 0xff
 800b6fe:	e044      	b.n	800b78a <tcp_enqueue_flags+0x116>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b704:	2b00      	cmp	r3, #0
 800b706:	d103      	bne.n	800b710 <tcp_enqueue_flags+0x9c>
    pcb->unsent = seg;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	66da      	str	r2, [r3, #108]	; 0x6c
 800b70e:	e00d      	b.n	800b72c <tcp_enqueue_flags+0xb8>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b714:	61bb      	str	r3, [r7, #24]
 800b716:	e002      	b.n	800b71e <tcp_enqueue_flags+0xaa>
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	61bb      	str	r3, [r7, #24]
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1f8      	bne.n	800b718 <tcp_enqueue_flags+0xa4>
    useg->next = seg;
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b734:	78fb      	ldrb	r3, [r7, #3]
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d104      	bne.n	800b748 <tcp_enqueue_flags+0xd4>
 800b73e:	78fb      	ldrb	r3, [r7, #3]
 800b740:	f003 0301 	and.w	r3, r3, #1
 800b744:	2b00      	cmp	r3, #0
 800b746:	d004      	beq.n	800b752 <tcp_enqueue_flags+0xde>
    pcb->snd_lbb++;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b74c:	1c5a      	adds	r2, r3, #1
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b752:	78fb      	ldrb	r3, [r7, #3]
 800b754:	f003 0301 	and.w	r3, r3, #1
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d006      	beq.n	800b76a <tcp_enqueue_flags+0xf6>
    tcp_set_flags(pcb, TF_FIN);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	8b5b      	ldrh	r3, [r3, #26]
 800b760:	f043 0320 	orr.w	r3, r3, #32
 800b764:	b29a      	uxth	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fc f918 	bl	80079a4 <pbuf_clen>
 800b774:	4603      	mov	r3, r0
 800b776:	461a      	mov	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b77e:	4413      	add	r3, r2
 800b780:	b29a      	uxth	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	b25b      	sxtb	r3, r3
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3724      	adds	r7, #36	; 0x24
 800b790:	46bd      	mov	sp, r7
 800b792:	bd90      	pop	{r4, r7, pc}

0800b794 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b794:	b5b0      	push	{r4, r5, r7, lr}
 800b796:	b08a      	sub	sp, #40	; 0x28
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b79c:	4ba0      	ldr	r3, [pc, #640]	; (800ba20 <tcp_output+0x28c>)
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d101      	bne.n	800b7aa <tcp_output+0x16>
    return ERR_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	e1a3      	b.n	800baf2 <tcp_output+0x35e>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	bf28      	it	cs
 800b7ba:	4613      	movcs	r3, r2
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7c4:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10b      	bne.n	800b7e4 <tcp_output+0x50>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	8b5b      	ldrh	r3, [r3, #26]
 800b7d0:	f003 0302 	and.w	r3, r3, #2
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d004      	beq.n	800b7e2 <tcp_output+0x4e>
      return tcp_send_empty_ack(pcb);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 fc87 	bl	800c0ec <tcp_send_empty_ack>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	e187      	b.n	800baf2 <tcp_output+0x35e>
    }
    /* nothing to send: shortcut out of here */
    goto output_done;
 800b7e2:	e17e      	b.n	800bae2 <tcp_output+0x34e>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	4611      	mov	r1, r2
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	f7ff fd66 	bl	800b2c0 <tcp_route>
 800b7f4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d101      	bne.n	800b800 <tcp_output+0x6c>
    return ERR_RTE;
 800b7fc:	23fc      	movs	r3, #252	; 0xfc
 800b7fe:	e178      	b.n	800baf2 <tcp_output+0x35e>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d003      	beq.n	800b80e <tcp_output+0x7a>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d110      	bne.n	800b830 <tcp_output+0x9c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d002      	beq.n	800b81a <tcp_output+0x86>
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	3304      	adds	r3, #4
 800b818:	e000      	b.n	800b81c <tcp_output+0x88>
 800b81a:	2300      	movs	r3, #0
 800b81c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <tcp_output+0x94>
      return ERR_RTE;
 800b824:	23fc      	movs	r3, #252	; 0xfc
 800b826:	e164      	b.n	800baf2 <tcp_output+0x35e>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	4618      	mov	r0, r3
 800b838:	f7fa fff4 	bl	8006824 <lwip_htonl>
 800b83c:	4602      	mov	r2, r0
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b842:	1ad3      	subs	r3, r2, r3
 800b844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b846:	8912      	ldrh	r2, [r2, #8]
 800b848:	441a      	add	r2, r3
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d927      	bls.n	800b8a0 <tcp_output+0x10c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b856:	461a      	mov	r2, r3
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d114      	bne.n	800b888 <tcp_output+0xf4>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b862:	2b00      	cmp	r3, #0
 800b864:	d110      	bne.n	800b888 <tcp_output+0xf4>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10b      	bne.n	800b888 <tcp_output+0xf4>
      pcb->persist_cnt = 0;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	8b5b      	ldrh	r3, [r3, #26]
 800b88c:	f003 0302 	and.w	r3, r3, #2
 800b890:	2b00      	cmp	r3, #0
 800b892:	d004      	beq.n	800b89e <tcp_output+0x10a>
      return tcp_send_empty_ack(pcb);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 fc29 	bl	800c0ec <tcp_send_empty_ack>
 800b89a:	4603      	mov	r3, r0
 800b89c:	e129      	b.n	800baf2 <tcp_output+0x35e>
    }
    goto output_done;
 800b89e:	e120      	b.n	800bae2 <tcp_output+0x34e>
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ac:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b8ae:	6a3b      	ldr	r3, [r7, #32]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d007      	beq.n	800b8c4 <tcp_output+0x130>
    for (; useg->next != NULL; useg = useg->next);
 800b8b4:	e002      	b.n	800b8bc <tcp_output+0x128>
 800b8b6:	6a3b      	ldr	r3, [r7, #32]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	623b      	str	r3, [r7, #32]
 800b8bc:	6a3b      	ldr	r3, [r7, #32]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d1f8      	bne.n	800b8b6 <tcp_output+0x122>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b8c4:	e0f1      	b.n	800baaa <tcp_output+0x316>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d01f      	beq.n	800b90e <tcp_output+0x17a>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	8b5b      	ldrh	r3, [r3, #26]
 800b8d2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d119      	bne.n	800b90e <tcp_output+0x17a>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00b      	beq.n	800b8fa <tcp_output+0x166>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d110      	bne.n	800b90e <tcp_output+0x17a>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8f0:	891a      	ldrh	r2, [r3, #8]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d209      	bcs.n	800b90e <tcp_output+0x17a>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b900:	2b00      	cmp	r3, #0
 800b902:	d004      	beq.n	800b90e <tcp_output+0x17a>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b90a:	2b07      	cmp	r3, #7
 800b90c:	d901      	bls.n	800b912 <tcp_output+0x17e>
 800b90e:	2301      	movs	r3, #1
 800b910:	e000      	b.n	800b914 <tcp_output+0x180>
 800b912:	2300      	movs	r3, #0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d106      	bne.n	800b926 <tcp_output+0x192>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	8b5b      	ldrh	r3, [r3, #26]
 800b91c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b920:	2b00      	cmp	r3, #0
 800b922:	d100      	bne.n	800b926 <tcp_output+0x192>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
      break;
 800b924:	e0d5      	b.n	800bad2 <tcp_output+0x33e>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	7d1b      	ldrb	r3, [r3, #20]
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d00c      	beq.n	800b948 <tcp_output+0x1b4>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b930:	68dc      	ldr	r4, [r3, #12]
 800b932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	899b      	ldrh	r3, [r3, #12]
 800b938:	b29d      	uxth	r5, r3
 800b93a:	2010      	movs	r0, #16
 800b93c:	f7fa ff5c 	bl	80067f8 <lwip_htons>
 800b940:	4603      	mov	r3, r0
 800b942:	432b      	orrs	r3, r5
 800b944:	b29b      	uxth	r3, r3
 800b946:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b94a:	6879      	ldr	r1, [r7, #4]
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	f000 f8e7 	bl	800bb20 <tcp_output_segment>
 800b952:	4603      	mov	r3, r0
 800b954:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d008      	beq.n	800b970 <tcp_output+0x1dc>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	8b5b      	ldrh	r3, [r3, #26]
 800b962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b966:	b29a      	uxth	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	835a      	strh	r2, [r3, #26]
      return err;
 800b96c:	7bfb      	ldrb	r3, [r7, #15]
 800b96e:	e0c0      	b.n	800baf2 <tcp_output+0x35e>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	7d1b      	ldrb	r3, [r3, #20]
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d006      	beq.n	800b98e <tcp_output+0x1fa>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	8b5b      	ldrh	r3, [r3, #26]
 800b984:	f023 0303 	bic.w	r3, r3, #3
 800b988:	b29a      	uxth	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	4618      	mov	r0, r3
 800b996:	f7fa ff45 	bl	8006824 <lwip_htonl>
 800b99a:	4604      	mov	r4, r0
 800b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99e:	891b      	ldrh	r3, [r3, #8]
 800b9a0:	461d      	mov	r5, r3
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	899b      	ldrh	r3, [r3, #12]
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fa ff24 	bl	80067f8 <lwip_htons>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f003 0303 	and.w	r3, r3, #3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d001      	beq.n	800b9c0 <tcp_output+0x22c>
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e000      	b.n	800b9c2 <tcp_output+0x22e>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	442b      	add	r3, r5
 800b9c4:	4423      	add	r3, r4
 800b9c6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	1ad3      	subs	r3, r2, r3
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	da02      	bge.n	800b9da <tcp_output+0x246>
      pcb->snd_nxt = snd_nxt;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	68ba      	ldr	r2, [r7, #8]
 800b9d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9dc:	891b      	ldrh	r3, [r3, #8]
 800b9de:	461c      	mov	r4, r3
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	899b      	ldrh	r3, [r3, #12]
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fa ff05 	bl	80067f8 <lwip_htons>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	f003 0303 	and.w	r3, r3, #3
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <tcp_output+0x26a>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e000      	b.n	800ba00 <tcp_output+0x26c>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	4423      	add	r3, r4
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d04b      	beq.n	800ba9e <tcp_output+0x30a>
      seg->next = NULL;
 800ba06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba08:	2200      	movs	r2, #0
 800ba0a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d107      	bne.n	800ba24 <tcp_output+0x290>
        pcb->unacked = seg;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba18:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1c:	623b      	str	r3, [r7, #32]
 800ba1e:	e041      	b.n	800baa4 <tcp_output+0x310>
 800ba20:	1ffeff6c 	.word	0x1ffeff6c
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ba24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fa fefa 	bl	8006824 <lwip_htonl>
 800ba30:	4604      	mov	r4, r0
 800ba32:	6a3b      	ldr	r3, [r7, #32]
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7fa fef3 	bl	8006824 <lwip_htonl>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	1ae3      	subs	r3, r4, r3
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	da24      	bge.n	800ba90 <tcp_output+0x2fc>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	3370      	adds	r3, #112	; 0x70
 800ba4a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ba4c:	e002      	b.n	800ba54 <tcp_output+0x2c0>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	61fb      	str	r3, [r7, #28]
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d011      	beq.n	800ba80 <tcp_output+0x2ec>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7fa fedd 	bl	8006824 <lwip_htonl>
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fa fed6 	bl	8006824 <lwip_htonl>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	1ae3      	subs	r3, r4, r3
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	dbe6      	blt.n	800ba4e <tcp_output+0x2ba>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba86:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	e009      	b.n	800baa4 <tcp_output+0x310>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ba90:	6a3b      	ldr	r3, [r7, #32]
 800ba92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba94:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ba96:	6a3b      	ldr	r3, [r7, #32]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	623b      	str	r3, [r7, #32]
 800ba9c:	e002      	b.n	800baa4 <tcp_output+0x310>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ba9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baa0:	f7fd f84c 	bl	8008b3c <tcp_seg_free>
    }
    seg = pcb->unsent;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baa8:	627b      	str	r3, [r7, #36]	; 0x24
  useg = pcb->unacked;
  if (useg != NULL) {
    for (; useg->next != NULL; useg = useg->next);
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	2b00      	cmp	r3, #0
 800baae:	d010      	beq.n	800bad2 <tcp_output+0x33e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7fa feb4 	bl	8006824 <lwip_htonl>
 800babc:	4602      	mov	r2, r0
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bac6:	8912      	ldrh	r2, [r2, #8]
 800bac8:	441a      	add	r2, r3
  useg = pcb->unacked;
  if (useg != NULL) {
    for (; useg->next != NULL; useg = useg->next);
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	429a      	cmp	r2, r3
 800bace:	f67f aefa 	bls.w	800b8c6 <tcp_output+0x132>
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d103      	bne.n	800bae2 <tcp_output+0x34e>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	8b5b      	ldrh	r3, [r3, #26]
 800bae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800baea:	b29a      	uxth	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	b25b      	sxtb	r3, r3
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3728      	adds	r7, #40	; 0x28
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bdb0      	pop	{r4, r5, r7, pc}

0800bafc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	7b9b      	ldrb	r3, [r3, #14]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d001      	beq.n	800bb12 <tcp_output_segment_busy+0x16>
    /* other reference found */
    return 1;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e000      	b.n	800bb14 <tcp_output_segment_busy+0x18>
  }
  /* no other references found */
  return 0;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bb20:	b590      	push	{r4, r7, lr}
 800bb22:	b08d      	sub	sp, #52	; 0x34
 800bb24:	af04      	add	r7, sp, #16
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);

  if (tcp_output_segment_busy(seg)) {
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	f7ff ffe5 	bl	800bafc <tcp_output_segment_busy>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d001      	beq.n	800bb3c <tcp_output_segment+0x1c>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	e08a      	b.n	800bc52 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	68dc      	ldr	r4, [r3, #12]
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fa fe6d 	bl	8006824 <lwip_htonl>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	68dc      	ldr	r4, [r3, #12]
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fa fe4e 	bl	80067f8 <lwip_htons>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bb68:	441a      	add	r2, r3
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	3314      	adds	r3, #20
 800bb74:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	7a9b      	ldrb	r3, [r3, #10]
 800bb7a:	f003 0301 	and.w	r3, r3, #1
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d015      	beq.n	800bbae <tcp_output_segment+0x8e>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	3304      	adds	r3, #4
 800bb86:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bb8a:	6879      	ldr	r1, [r7, #4]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	f7fd fa33 	bl	8008ff8 <tcp_eff_send_mss_netif>
 800bb92:	4603      	mov	r3, r0
 800bb94:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bb96:	8b7b      	ldrh	r3, [r7, #26]
 800bb98:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fa fe41 	bl	8006824 <lwip_htonl>
 800bba2:	4602      	mov	r2, r0
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bba8:	69fb      	ldr	r3, [r7, #28]
 800bbaa:	3304      	adds	r3, #4
 800bbac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800bbb2:	b21b      	sxth	r3, r3
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	da02      	bge.n	800bbbe <tcp_output_segment+0x9e>
    pcb->rtime = 0;
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10c      	bne.n	800bbe0 <tcp_output_segment+0xc0>
    pcb->rttest = tcp_ticks;
 800bbc6:	4b25      	ldr	r3, [pc, #148]	; (800bc5c <tcp_output_segment+0x13c>)
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7fa fe25 	bl	8006824 <lwip_htonl>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	6852      	ldr	r2, [r2, #4]
 800bbf8:	8951      	ldrh	r1, [r2, #10]
 800bbfa:	8b3a      	ldrh	r2, [r7, #24]
 800bbfc:	1a8a      	subs	r2, r1, r2
 800bbfe:	b292      	uxth	r2, r2
 800bc00:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	6852      	ldr	r2, [r2, #4]
 800bc0a:	8911      	ldrh	r1, [r2, #8]
 800bc0c:	8b3a      	ldrh	r2, [r7, #24]
 800bc0e:	1a8a      	subs	r2, r1, r2
 800bc10:	b292      	uxth	r2, r2
 800bc12:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	68d2      	ldr	r2, [r2, #12]
 800bc1c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	2200      	movs	r2, #0
 800bc24:	741a      	strb	r2, [r3, #16]
 800bc26:	2200      	movs	r2, #0
 800bc28:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6858      	ldr	r0, [r3, #4]
 800bc2e:	68b9      	ldr	r1, [r7, #8]
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	1d1a      	adds	r2, r3, #4
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	7adc      	ldrb	r4, [r3, #11]
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	7a9b      	ldrb	r3, [r3, #10]
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	2306      	movs	r3, #6
 800bc40:	9301      	str	r3, [sp, #4]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	9302      	str	r3, [sp, #8]
 800bc46:	4623      	mov	r3, r4
 800bc48:	f7fa fcec 	bl	8006624 <ip4_output_if>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bc50:	7dfb      	ldrb	r3, [r7, #23]
 800bc52:	b25b      	sxtb	r3, r3
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3724      	adds	r7, #36	; 0x24
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd90      	pop	{r4, r7, pc}
 800bc5c:	1ffeff5c 	.word	0x1ffeff5c

0800bc60 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bc60:	b5b0      	push	{r4, r5, r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);

  if (pcb->unacked == NULL) {
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d101      	bne.n	800bc74 <tcp_rexmit_rto_prepare+0x14>
    return ERR_VAL;
 800bc70:	23fa      	movs	r3, #250	; 0xfa
 800bc72:	e04e      	b.n	800bd12 <tcp_rexmit_rto_prepare+0xb2>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc78:	60fb      	str	r3, [r7, #12]
 800bc7a:	e00a      	b.n	800bc92 <tcp_rexmit_rto_prepare+0x32>
    if (tcp_output_segment_busy(seg)) {
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f7ff ff3d 	bl	800bafc <tcp_output_segment_busy>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <tcp_rexmit_rto_prepare+0x2c>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bc88:	23fa      	movs	r3, #250	; 0xfa
 800bc8a:	e042      	b.n	800bd12 <tcp_rexmit_rto_prepare+0xb2>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	60fb      	str	r3, [r7, #12]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1f0      	bne.n	800bc7c <tcp_rexmit_rto_prepare+0x1c>
    if (tcp_output_segment_busy(seg)) {
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f7ff ff2e 	bl	800bafc <tcp_output_segment_busy>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <tcp_rexmit_rto_prepare+0x4a>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bca6:	23fa      	movs	r3, #250	; 0xfa
 800bca8:	e033      	b.n	800bd12 <tcp_rexmit_rto_prepare+0xb2>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	8b5b      	ldrh	r3, [r3, #26]
 800bcc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fa fda5 	bl	8006824 <lwip_htonl>
 800bcda:	4604      	mov	r4, r0
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	891b      	ldrh	r3, [r3, #8]
 800bce0:	461d      	mov	r5, r3
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	899b      	ldrh	r3, [r3, #12]
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fa fd84 	bl	80067f8 <lwip_htons>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	f003 0303 	and.w	r3, r3, #3
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d001      	beq.n	800bd00 <tcp_rexmit_rto_prepare+0xa0>
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e000      	b.n	800bd02 <tcp_rexmit_rto_prepare+0xa2>
 800bd00:	2300      	movs	r3, #0
 800bd02:	442b      	add	r3, r5
 800bd04:	18e2      	adds	r2, r4, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800bd10:	2300      	movs	r3, #0
 800bd12:	b25b      	sxtb	r3, r3
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bdb0      	pop	{r4, r5, r7, pc}

0800bd1c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd2a:	2bff      	cmp	r3, #255	; 0xff
 800bd2c:	d007      	beq.n	800bd3e <tcp_rexmit_rto_commit+0x22>
    ++pcb->nrtx;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd34:	3301      	adds	r3, #1
 800bd36:	b2da      	uxtb	r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7ff fd28 	bl	800b794 <tcp_output>
}
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop

0800bd4c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f7ff ff83 	bl	800bc60 <tcp_rexmit_rto_prepare>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d102      	bne.n	800bd66 <tcp_rexmit_rto+0x1a>
    tcp_rexmit_rto_commit(pcb);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f7ff ffdb 	bl	800bd1c <tcp_rexmit_rto_commit>
  }
}
 800bd66:	3708      	adds	r7, #8
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bd6c:	b590      	push	{r4, r7, lr}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);

  if (pcb->unacked == NULL) {
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <tcp_rexmit+0x14>
    return ERR_VAL;
 800bd7c:	23fa      	movs	r3, #250	; 0xfa
 800bd7e:	e04b      	b.n	800be18 <tcp_rexmit+0xac>
  }

  seg = pcb->unacked;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd84:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bd86:	68b8      	ldr	r0, [r7, #8]
 800bd88:	f7ff feb8 	bl	800bafc <tcp_output_segment_busy>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <tcp_rexmit+0x2a>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bd92:	23fa      	movs	r3, #250	; 0xfa
 800bd94:	e040      	b.n	800be18 <tcp_rexmit+0xac>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	336c      	adds	r3, #108	; 0x6c
 800bda2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bda4:	e002      	b.n	800bdac <tcp_rexmit+0x40>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	60fb      	str	r3, [r7, #12]
  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d011      	beq.n	800bdd8 <tcp_rexmit+0x6c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7fa fd31 	bl	8006824 <lwip_htonl>
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fa fd2a 	bl	8006824 <lwip_htonl>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	1ae3      	subs	r3, r4, r3
  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	dbe6      	blt.n	800bda6 <tcp_rexmit+0x3a>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	68ba      	ldr	r2, [r7, #8]
 800bde4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d103      	bne.n	800bdf6 <tcp_rexmit+0x8a>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdfc:	2bff      	cmp	r3, #255	; 0xff
 800bdfe:	d007      	beq.n	800be10 <tcp_rexmit+0xa4>
    ++pcb->nrtx;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be06:	3301      	adds	r3, #1
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	b25b      	sxtb	r3, r3
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3714      	adds	r7, #20
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd90      	pop	{r4, r7, pc}
 800be22:	bf00      	nop

0800be24 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be30:	2b00      	cmp	r3, #0
 800be32:	d044      	beq.n	800bebe <tcp_rexmit_fast+0x9a>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	8b5b      	ldrh	r3, [r3, #26]
 800be38:	f003 0304 	and.w	r3, r3, #4
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d13e      	bne.n	800bebe <tcp_rexmit_fast+0x9a>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f7ff ff93 	bl	800bd6c <tcp_rexmit>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d138      	bne.n	800bebe <tcp_rexmit_fast+0x9a>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800be58:	4293      	cmp	r3, r2
 800be5a:	bf28      	it	cs
 800be5c:	4613      	movcs	r3, r2
 800be5e:	b29b      	uxth	r3, r3
 800be60:	0fda      	lsrs	r2, r3, #31
 800be62:	4413      	add	r3, r2
 800be64:	105b      	asrs	r3, r3, #1
 800be66:	b29a      	uxth	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800be74:	461a      	mov	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be7a:	005b      	lsls	r3, r3, #1
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d206      	bcs.n	800be8e <tcp_rexmit_fast+0x6a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	b29a      	uxth	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be98:	4619      	mov	r1, r3
 800be9a:	0049      	lsls	r1, r1, #1
 800be9c:	440b      	add	r3, r1
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	4413      	add	r3, r2
 800bea2:	b29a      	uxth	r2, r3
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	8b5b      	ldrh	r3, [r3, #26]
 800beae:	f043 0304 	orr.w	r3, r3, #4
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b086      	sub	sp, #24
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	607b      	str	r3, [r7, #4]
 800bece:	460b      	mov	r3, r1
 800bed0:	817b      	strh	r3, [r7, #10]
 800bed2:	4613      	mov	r3, r2
 800bed4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bed6:	897a      	ldrh	r2, [r7, #10]
 800bed8:	893b      	ldrh	r3, [r7, #8]
 800beda:	4413      	add	r3, r2
 800bedc:	b29b      	uxth	r3, r3
 800bede:	3314      	adds	r3, #20
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	2024      	movs	r0, #36	; 0x24
 800bee4:	4619      	mov	r1, r3
 800bee6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800beea:	f7fb faf9 	bl	80074e0 <pbuf_alloc>
 800beee:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d040      	beq.n	800bf78 <tcp_output_alloc_header_common+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800befc:	8c3b      	ldrh	r3, [r7, #32]
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fa fc7a 	bl	80067f8 <lwip_htons>
 800bf04:	4603      	mov	r3, r0
 800bf06:	461a      	mov	r2, r3
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800bf0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fa fc72 	bl	80067f8 <lwip_htons>
 800bf14:	4603      	mov	r3, r0
 800bf16:	461a      	mov	r2, r3
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	f7fa fc7e 	bl	8006824 <lwip_htonl>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800bf2e:	897b      	ldrh	r3, [r7, #10]
 800bf30:	089b      	lsrs	r3, r3, #2
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	3305      	adds	r3, #5
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	031b      	lsls	r3, r3, #12
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	4313      	orrs	r3, r2
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fa fc56 	bl	80067f8 <lwip_htons>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	461a      	mov	r2, r3
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800bf54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fa fc4e 	bl	80067f8 <lwip_htons>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	461a      	mov	r2, r3
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	2200      	movs	r2, #0
 800bf68:	741a      	strb	r2, [r3, #16]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	2200      	movs	r2, #0
 800bf72:	749a      	strb	r2, [r3, #18]
 800bf74:	2200      	movs	r2, #0
 800bf76:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800bf78:	697b      	ldr	r3, [r7, #20]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3718      	adds	r7, #24
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop

0800bf84 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800bf84:	b5b0      	push	{r4, r5, r7, lr}
 800bf86:	b08a      	sub	sp, #40	; 0x28
 800bf88:	af04      	add	r7, sp, #16
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	607b      	str	r3, [r7, #4]
 800bf8e:	460b      	mov	r3, r1
 800bf90:	817b      	strh	r3, [r7, #10]
 800bf92:	4613      	mov	r3, r2
 800bf94:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	8ad9      	ldrh	r1, [r3, #22]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	8b1a      	ldrh	r2, [r3, #24]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfa6:	897d      	ldrh	r5, [r7, #10]
 800bfa8:	893c      	ldrh	r4, [r7, #8]
 800bfaa:	9100      	str	r1, [sp, #0]
 800bfac:	9201      	str	r2, [sp, #4]
 800bfae:	2210      	movs	r2, #16
 800bfb0:	9202      	str	r2, [sp, #8]
 800bfb2:	9303      	str	r3, [sp, #12]
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	4622      	mov	r2, r4
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f7ff ff83 	bl	800bec4 <tcp_output_alloc_header_common>
 800bfbe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d006      	beq.n	800bfd4 <tcp_output_alloc_header+0x50>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bfce:	441a      	add	r2, r3
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800bfd4:	697b      	ldr	r3, [r7, #20]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bdb0      	pop	{r4, r5, r7, pc}
 800bfde:	bf00      	nop

0800bfe0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b089      	sub	sp, #36	; 0x24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	4611      	mov	r1, r2
 800bfec:	461a      	mov	r2, r3
 800bfee:	460b      	mov	r3, r1
 800bff0:	71fb      	strb	r3, [r7, #7]
 800bff2:	4613      	mov	r3, r2
 800bff4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800bff6:	2300      	movs	r3, #0
 800bff8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);

  tcphdr = (struct tcp_hdr *)p->payload;
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	3314      	adds	r3, #20
 800c004:	617b      	str	r3, [r7, #20]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c006:	3724      	adds	r7, #36	; 0x24
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c010:	b590      	push	{r4, r7, lr}
 800c012:	b08b      	sub	sp, #44	; 0x2c
 800c014:	af04      	add	r7, sp, #16
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	607a      	str	r2, [r7, #4]
 800c01c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);

  netif = tcp_route(pcb, src, dst);
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	6879      	ldr	r1, [r7, #4]
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	f7ff f94c 	bl	800b2c0 <tcp_route>
 800c028:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d102      	bne.n	800c036 <tcp_output_control_segment+0x26>
    err = ERR_RTE;
 800c030:	23fc      	movs	r3, #252	; 0xfc
 800c032:	75fb      	strb	r3, [r7, #23]
 800c034:	e01c      	b.n	800c070 <tcp_output_control_segment+0x60>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d006      	beq.n	800c04a <tcp_output_control_segment+0x3a>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	7adb      	ldrb	r3, [r3, #11]
 800c040:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	7a9b      	ldrb	r3, [r3, #10]
 800c046:	757b      	strb	r3, [r7, #21]
 800c048:	e003      	b.n	800c052 <tcp_output_control_segment+0x42>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c04a:	23ff      	movs	r3, #255	; 0xff
 800c04c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c04e:	2300      	movs	r3, #0
 800c050:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c052:	7dbc      	ldrb	r4, [r7, #22]
 800c054:	7d7b      	ldrb	r3, [r7, #21]
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	2306      	movs	r3, #6
 800c05a:	9301      	str	r3, [sp, #4]
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	9302      	str	r3, [sp, #8]
 800c060:	68b8      	ldr	r0, [r7, #8]
 800c062:	6879      	ldr	r1, [r7, #4]
 800c064:	683a      	ldr	r2, [r7, #0]
 800c066:	4623      	mov	r3, r4
 800c068:	f7fa fadc 	bl	8006624 <ip4_output_if>
 800c06c:	4603      	mov	r3, r0
 800c06e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c070:	68b8      	ldr	r0, [r7, #8]
 800c072:	f7fb fc51 	bl	8007918 <pbuf_free>
  return err;
 800c076:	7dfb      	ldrb	r3, [r7, #23]
 800c078:	b25b      	sxtb	r3, r3
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	371c      	adds	r7, #28
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd90      	pop	{r4, r7, pc}
 800c082:	bf00      	nop

0800c084 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c084:	b5b0      	push	{r4, r5, r7, lr}
 800c086:	b08a      	sub	sp, #40	; 0x28
 800c088:	af04      	add	r7, sp, #16
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
 800c090:	603b      	str	r3, [r7, #0]
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c092:	2300      	movs	r3, #0
 800c094:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c096:	f246 0308 	movw	r3, #24584	; 0x6008
 800c09a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c09c:	7dfb      	ldrb	r3, [r7, #23]
 800c09e:	b29c      	uxth	r4, r3
 800c0a0:	68b8      	ldr	r0, [r7, #8]
 800c0a2:	f7fa fbbf 	bl	8006824 <lwip_htonl>
 800c0a6:	4605      	mov	r5, r0
 800c0a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c0ae:	9301      	str	r3, [sp, #4]
 800c0b0:	2314      	movs	r3, #20
 800c0b2:	9302      	str	r3, [sp, #8]
 800c0b4:	8abb      	ldrh	r3, [r7, #20]
 800c0b6:	9303      	str	r3, [sp, #12]
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	4621      	mov	r1, r4
 800c0bc:	2200      	movs	r2, #0
 800c0be:	462b      	mov	r3, r5
 800c0c0:	f7ff ff00 	bl	800bec4 <tcp_output_alloc_header_common>
 800c0c4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d100      	bne.n	800c0ce <tcp_rst+0x4a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
 800c0cc:	e00b      	b.n	800c0e6 <tcp_rst+0x62>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	6939      	ldr	r1, [r7, #16]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f7ff ff83 	bl	800bfe0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c0da:	68f8      	ldr	r0, [r7, #12]
 800c0dc:	6939      	ldr	r1, [r7, #16]
 800c0de:	683a      	ldr	r2, [r7, #0]
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	f7ff ff95 	bl	800c010 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c0e6:	3718      	adds	r7, #24
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bdb0      	pop	{r4, r5, r7, pc}

0800c0ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c0ec:	b590      	push	{r4, r7, lr}
 800c0ee:	b087      	sub	sp, #28
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	75bb      	strb	r3, [r7, #22]
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c0fc:	7dfb      	ldrb	r3, [r7, #23]
 800c0fe:	f003 0301 	and.w	r3, r3, #1
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <tcp_send_empty_ack+0x1e>
 800c106:	2304      	movs	r3, #4
 800c108:	e000      	b.n	800c10c <tcp_send_empty_ack+0x20>
 800c10a:	2300      	movs	r3, #0
 800c10c:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c10e:	7d7b      	ldrb	r3, [r7, #21]
 800c110:	b29c      	uxth	r4, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c116:	4618      	mov	r0, r3
 800c118:	f7fa fb84 	bl	8006824 <lwip_htonl>
 800c11c:	4603      	mov	r3, r0
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	4621      	mov	r1, r4
 800c122:	2200      	movs	r2, #0
 800c124:	f7ff ff2e 	bl	800bf84 <tcp_output_alloc_header>
 800c128:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d108      	bne.n	800c142 <tcp_send_empty_ack+0x56>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	8b5b      	ldrh	r3, [r3, #26]
 800c134:	f043 0303 	orr.w	r3, r3, #3
 800c138:	b29a      	uxth	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c13e:	23fe      	movs	r3, #254	; 0xfe
 800c140:	e022      	b.n	800c188 <tcp_send_empty_ack+0x9c>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c142:	7dfa      	ldrb	r2, [r7, #23]
 800c144:	7dbb      	ldrb	r3, [r7, #22]
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	6939      	ldr	r1, [r7, #16]
 800c14a:	f7ff ff49 	bl	800bfe0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3304      	adds	r3, #4
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	6939      	ldr	r1, [r7, #16]
 800c158:	f7ff ff5a 	bl	800c010 <tcp_output_control_segment>
 800c15c:	4603      	mov	r3, r0
 800c15e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d007      	beq.n	800c178 <tcp_send_empty_ack+0x8c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	8b5b      	ldrh	r3, [r3, #26]
 800c16c:	f043 0303 	orr.w	r3, r3, #3
 800c170:	b29a      	uxth	r2, r3
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	835a      	strh	r2, [r3, #26]
 800c176:	e006      	b.n	800c186 <tcp_send_empty_ack+0x9a>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	8b5b      	ldrh	r3, [r3, #26]
 800c17c:	f023 0303 	bic.w	r3, r3, #3
 800c180:	b29a      	uxth	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c186:	7bfb      	ldrb	r3, [r7, #15]
 800c188:	b25b      	sxtb	r3, r3
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	371c      	adds	r7, #28
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd90      	pop	{r4, r7, pc}
 800c192:	bf00      	nop

0800c194 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c194:	b590      	push	{r4, r7, lr}
 800c196:	b087      	sub	sp, #28
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c19c:	2300      	movs	r3, #0
 800c19e:	75fb      	strb	r3, [r7, #23]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c1a0:	7dfb      	ldrb	r3, [r7, #23]
 800c1a2:	b29c      	uxth	r4, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fa fb3a 	bl	8006824 <lwip_htonl>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	4621      	mov	r1, r4
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f7ff fee4 	bl	800bf84 <tcp_output_alloc_header>
 800c1bc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d101      	bne.n	800c1c8 <tcp_keepalive+0x34>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c1c4:	23ff      	movs	r3, #255	; 0xff
 800c1c6:	e00f      	b.n	800c1e8 <tcp_keepalive+0x54>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c1c8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	6939      	ldr	r1, [r7, #16]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f7ff ff06 	bl	800bfe0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	3304      	adds	r3, #4
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	6939      	ldr	r1, [r7, #16]
 800c1de:	f7ff ff17 	bl	800c010 <tcp_output_control_segment>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c1e6:	7bfb      	ldrb	r3, [r7, #15]
 800c1e8:	b25b      	sxtb	r3, r3
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	371c      	adds	r7, #28
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd90      	pop	{r4, r7, pc}
 800c1f2:	bf00      	nop

0800c1f4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c1f4:	b590      	push	{r4, r7, lr}
 800c1f6:	b08b      	sub	sp, #44	; 0x2c
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c206:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c208:	6a3b      	ldr	r3, [r7, #32]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <tcp_zero_window_probe+0x1e>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c20e:	2300      	movs	r3, #0
 800c210:	e086      	b.n	800c320 <tcp_zero_window_probe+0x12c>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c218:	2bff      	cmp	r3, #255	; 0xff
 800c21a:	d007      	beq.n	800c22c <tcp_zero_window_probe+0x38>
    ++pcb->persist_probe;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c222:	3301      	adds	r3, #1
 800c224:	b2da      	uxtb	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c22c:	6a3b      	ldr	r3, [r7, #32]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	899b      	ldrh	r3, [r3, #12]
 800c232:	b29b      	uxth	r3, r3
 800c234:	4618      	mov	r0, r3
 800c236:	f7fa fadf 	bl	80067f8 <lwip_htons>
 800c23a:	4603      	mov	r3, r0
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	f003 0301 	and.w	r3, r3, #1
 800c242:	2b00      	cmp	r3, #0
 800c244:	d005      	beq.n	800c252 <tcp_zero_window_probe+0x5e>
 800c246:	6a3b      	ldr	r3, [r7, #32]
 800c248:	891b      	ldrh	r3, [r3, #8]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d101      	bne.n	800c252 <tcp_zero_window_probe+0x5e>
 800c24e:	2301      	movs	r3, #1
 800c250:	e000      	b.n	800c254 <tcp_zero_window_probe+0x60>
 800c252:	2300      	movs	r3, #0
 800c254:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c256:	7ffb      	ldrb	r3, [r7, #31]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	bf0c      	ite	eq
 800c25c:	2301      	moveq	r3, #1
 800c25e:	2300      	movne	r3, #0
 800c260:	b2db      	uxtb	r3, r3
 800c262:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c268:	b299      	uxth	r1, r3
 800c26a:	6a3b      	ldr	r3, [r7, #32]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	8bba      	ldrh	r2, [r7, #28]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7ff fe86 	bl	800bf84 <tcp_output_alloc_header>
 800c278:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d101      	bne.n	800c284 <tcp_zero_window_probe+0x90>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c280:	23ff      	movs	r3, #255	; 0xff
 800c282:	e04d      	b.n	800c320 <tcp_zero_window_probe+0x12c>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c28a:	7ffb      	ldrb	r3, [r7, #31]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d012      	beq.n	800c2b6 <tcp_zero_window_probe+0xc2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	899b      	ldrh	r3, [r3, #12]
 800c294:	b29b      	uxth	r3, r3
 800c296:	b29b      	uxth	r3, r3
 800c298:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c29c:	b29c      	uxth	r4, r3
 800c29e:	2011      	movs	r0, #17
 800c2a0:	f7fa faaa 	bl	80067f8 <lwip_htons>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	4622      	mov	r2, r4
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	819a      	strh	r2, [r3, #12]
 800c2b4:	e011      	b.n	800c2da <tcp_zero_window_probe+0xe6>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	3314      	adds	r3, #20
 800c2bc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c2be:	6a3b      	ldr	r3, [r7, #32]
 800c2c0:	6859      	ldr	r1, [r3, #4]
 800c2c2:	6a3b      	ldr	r3, [r7, #32]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	891a      	ldrh	r2, [r3, #8]
 800c2c8:	6a3b      	ldr	r3, [r7, #32]
 800c2ca:	891b      	ldrh	r3, [r3, #8]
 800c2cc:	1ad3      	subs	r3, r2, r3
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	4608      	mov	r0, r1
 800c2d2:	6939      	ldr	r1, [r7, #16]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	f7fb fc57 	bl	8007b88 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fa fa9f 	bl	8006824 <lwip_htonl>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	1ad3      	subs	r3, r2, r3
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	da02      	bge.n	800c2fe <tcp_zero_window_probe+0x10a>
    pcb->snd_nxt = snd_nxt;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c2fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	69b9      	ldr	r1, [r7, #24]
 800c306:	2200      	movs	r2, #0
 800c308:	f7ff fe6a 	bl	800bfe0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	3304      	adds	r3, #4
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	69b9      	ldr	r1, [r7, #24]
 800c316:	f7ff fe7b 	bl	800c010 <tcp_output_control_segment>
 800c31a:	4603      	mov	r3, r0
 800c31c:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c31e:	7afb      	ldrb	r3, [r7, #11]
 800c320:	b25b      	sxtb	r3, r3
}
 800c322:	4618      	mov	r0, r3
 800c324:	372c      	adds	r7, #44	; 0x2c
 800c326:	46bd      	mov	sp, r7
 800c328:	bd90      	pop	{r4, r7, pc}
 800c32a:	bf00      	nop

0800c32c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c334:	f7fb fdaa 	bl	8007e8c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c338:	4b09      	ldr	r3, [pc, #36]	; (800c360 <tcpip_tcp_timer+0x34>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d103      	bne.n	800c348 <tcpip_tcp_timer+0x1c>
 800c340:	4b08      	ldr	r3, [pc, #32]	; (800c364 <tcpip_tcp_timer+0x38>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d005      	beq.n	800c354 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c348:	20fa      	movs	r0, #250	; 0xfa
 800c34a:	4907      	ldr	r1, [pc, #28]	; (800c368 <tcpip_tcp_timer+0x3c>)
 800c34c:	2200      	movs	r2, #0
 800c34e:	f000 f8d3 	bl	800c4f8 <sys_timeout>
 800c352:	e002      	b.n	800c35a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c354:	4b05      	ldr	r3, [pc, #20]	; (800c36c <tcpip_tcp_timer+0x40>)
 800c356:	2200      	movs	r2, #0
 800c358:	601a      	str	r2, [r3, #0]
  }
}
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	1ffeff58 	.word	0x1ffeff58
 800c364:	1ffeff68 	.word	0x1ffeff68
 800c368:	0800c32d 	.word	0x0800c32d
 800c36c:	1ffe8b5c 	.word	0x1ffe8b5c

0800c370 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c374:	4b0a      	ldr	r3, [pc, #40]	; (800c3a0 <tcp_timer_needed+0x30>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10f      	bne.n	800c39c <tcp_timer_needed+0x2c>
 800c37c:	4b09      	ldr	r3, [pc, #36]	; (800c3a4 <tcp_timer_needed+0x34>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d103      	bne.n	800c38c <tcp_timer_needed+0x1c>
 800c384:	4b08      	ldr	r3, [pc, #32]	; (800c3a8 <tcp_timer_needed+0x38>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d007      	beq.n	800c39c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c38c:	4b04      	ldr	r3, [pc, #16]	; (800c3a0 <tcp_timer_needed+0x30>)
 800c38e:	2201      	movs	r2, #1
 800c390:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c392:	20fa      	movs	r0, #250	; 0xfa
 800c394:	4905      	ldr	r1, [pc, #20]	; (800c3ac <tcp_timer_needed+0x3c>)
 800c396:	2200      	movs	r2, #0
 800c398:	f000 f8ae 	bl	800c4f8 <sys_timeout>
  }
}
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	1ffe8b5c 	.word	0x1ffe8b5c
 800c3a4:	1ffeff58 	.word	0x1ffeff58
 800c3a8:	1ffeff68 	.word	0x1ffeff68
 800c3ac:	0800c32d 	.word	0x0800c32d

0800c3b0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c3bc:	2005      	movs	r0, #5
 800c3be:	f7fa fd67 	bl	8006e90 <memp_malloc>
 800c3c2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d100      	bne.n	800c3cc <sys_timeout_abs+0x1c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
 800c3ca:	e041      	b.n	800c450 <sys_timeout_abs+0xa0>
  }

  timeout->next = NULL;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	68ba      	ldr	r2, [r7, #8]
 800c3d6:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c3e4:	4b1c      	ldr	r3, [pc, #112]	; (800c458 <sys_timeout_abs+0xa8>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d103      	bne.n	800c3f4 <sys_timeout_abs+0x44>
    next_timeout = timeout;
 800c3ec:	4a1a      	ldr	r2, [pc, #104]	; (800c458 <sys_timeout_abs+0xa8>)
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	6013      	str	r3, [r2, #0]
    return;
 800c3f2:	e02d      	b.n	800c450 <sys_timeout_abs+0xa0>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	685a      	ldr	r2, [r3, #4]
 800c3f8:	4b17      	ldr	r3, [pc, #92]	; (800c458 <sys_timeout_abs+0xa8>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	1ad3      	subs	r3, r2, r3
 800c400:	2b00      	cmp	r3, #0
 800c402:	da07      	bge.n	800c414 <sys_timeout_abs+0x64>
    timeout->next = next_timeout;
 800c404:	4b14      	ldr	r3, [pc, #80]	; (800c458 <sys_timeout_abs+0xa8>)
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c40c:	4a12      	ldr	r2, [pc, #72]	; (800c458 <sys_timeout_abs+0xa8>)
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	6013      	str	r3, [r2, #0]
 800c412:	e01d      	b.n	800c450 <sys_timeout_abs+0xa0>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c414:	4b10      	ldr	r3, [pc, #64]	; (800c458 <sys_timeout_abs+0xa8>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	617b      	str	r3, [r7, #20]
 800c41a:	e016      	b.n	800c44a <sys_timeout_abs+0x9a>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d007      	beq.n	800c434 <sys_timeout_abs+0x84>
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	685a      	ldr	r2, [r3, #4]
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	2b00      	cmp	r3, #0
 800c432:	da07      	bge.n	800c444 <sys_timeout_abs+0x94>
        timeout->next = t->next;
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	693a      	ldr	r2, [r7, #16]
 800c440:	601a      	str	r2, [r3, #0]
        break;
 800c442:	e005      	b.n	800c450 <sys_timeout_abs+0xa0>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	617b      	str	r3, [r7, #20]
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1e5      	bne.n	800c41c <sys_timeout_abs+0x6c>
        t->next = timeout;
        break;
      }
    }
  }
}
 800c450:	3718      	adds	r7, #24
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	1ffe8b54 	.word	0x1ffe8b54

0800c45c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b086      	sub	sp, #24
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	4798      	blx	r3

  now = sys_now();
 800c46e:	f7f8 fedf 	bl	8005230 <sys_now>
 800c472:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	4b0d      	ldr	r3, [pc, #52]	; (800c4b0 <lwip_cyclic_timer+0x54>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4413      	add	r3, r2
 800c47e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	2b00      	cmp	r3, #0
 800c488:	da09      	bge.n	800c49e <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	4413      	add	r3, r2
 800c492:	4618      	mov	r0, r3
 800c494:	4907      	ldr	r1, [pc, #28]	; (800c4b4 <lwip_cyclic_timer+0x58>)
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	f7ff ff8a 	bl	800c3b0 <sys_timeout_abs>
 800c49c:	e004      	b.n	800c4a8 <lwip_cyclic_timer+0x4c>
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c49e:	68f8      	ldr	r0, [r7, #12]
 800c4a0:	4904      	ldr	r1, [pc, #16]	; (800c4b4 <lwip_cyclic_timer+0x58>)
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	f7ff ff84 	bl	800c3b0 <sys_timeout_abs>
#endif
  }
}
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	1ffe8b58 	.word	0x1ffe8b58
 800c4b4:	0800c45d 	.word	0x0800c45d

0800c4b8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c4be:	2301      	movs	r3, #1
 800c4c0:	607b      	str	r3, [r7, #4]
 800c4c2:	e00f      	b.n	800c4e4 <sys_timeouts_init+0x2c>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c4c4:	4a0a      	ldr	r2, [pc, #40]	; (800c4f0 <sys_timeouts_init+0x38>)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	00db      	lsls	r3, r3, #3
 800c4d0:	4a07      	ldr	r2, [pc, #28]	; (800c4f0 <sys_timeouts_init+0x38>)
 800c4d2:	4413      	add	r3, r2
 800c4d4:	4608      	mov	r0, r1
 800c4d6:	4907      	ldr	r1, [pc, #28]	; (800c4f4 <sys_timeouts_init+0x3c>)
 800c4d8:	461a      	mov	r2, r3
 800c4da:	f000 f80d 	bl	800c4f8 <sys_timeout>
/** Initialize this module */
void sys_timeouts_init(void)
{
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	607b      	str	r3, [r7, #4]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d9ec      	bls.n	800c4c4 <sys_timeouts_init+0xc>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
  }
}
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	0801167c 	.word	0x0801167c
 800c4f4:	0800c45d 	.word	0x0800c45d

0800c4f8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b086      	sub	sp, #24
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c504:	f7f8 fe94 	bl	8005230 <sys_now>
 800c508:	4602      	mov	r2, r0
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	4413      	add	r3, r2
 800c50e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c510:	6978      	ldr	r0, [r7, #20]
 800c512:	68b9      	ldr	r1, [r7, #8]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	f7ff ff4b 	bl	800c3b0 <sys_timeout_abs>
#endif
}
 800c51a:	3718      	adds	r7, #24
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c526:	f7f8 fe83 	bl	8005230 <sys_now>
 800c52a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c52c:	4b18      	ldr	r3, [pc, #96]	; (800c590 <sys_check_timeouts+0x70>)
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	b2db      	uxtb	r3, r3
 800c532:	2b00      	cmp	r3, #0
 800c534:	d001      	beq.n	800c53a <sys_check_timeouts+0x1a>
 800c536:	f7fa ff7d 	bl	8007434 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c53a:	4b16      	ldr	r3, [pc, #88]	; (800c594 <sys_check_timeouts+0x74>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d100      	bne.n	800c548 <sys_check_timeouts+0x28>
      return;
 800c546:	e01f      	b.n	800c588 <sys_check_timeouts+0x68>
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	2b00      	cmp	r3, #0
 800c552:	da00      	bge.n	800c556 <sys_check_timeouts+0x36>
      return;
 800c554:	e018      	b.n	800c588 <sys_check_timeouts+0x68>
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a0e      	ldr	r2, [pc, #56]	; (800c594 <sys_check_timeouts+0x74>)
 800c55c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	4a0a      	ldr	r2, [pc, #40]	; (800c598 <sys_check_timeouts+0x78>)
 800c570:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c572:	2005      	movs	r0, #5
 800c574:	68b9      	ldr	r1, [r7, #8]
 800c576:	f7fa fcbb 	bl	8006ef0 <memp_free>
    if (handler != NULL) {
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <sys_check_timeouts+0x66>
      handler(arg);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6838      	ldr	r0, [r7, #0]
 800c584:	4798      	blx	r3
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
 800c586:	e7d1      	b.n	800c52c <sys_check_timeouts+0xc>
}
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	1ffeff50 	.word	0x1ffeff50
 800c594:	1ffe8b54 	.word	0x1ffe8b54
 800c598:	1ffe8b58 	.word	0x1ffe8b58

0800c59c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c5a0:	f002 feac 	bl	800f2fc <rand>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	4b01      	ldr	r3, [pc, #4]	; (800c5bc <udp_init+0x20>)
 800c5b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	1ffe890c 	.word	0x1ffe890c

0800c5c0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c5ca:	4b18      	ldr	r3, [pc, #96]	; (800c62c <udp_new_port+0x6c>)
 800c5cc:	881b      	ldrh	r3, [r3, #0]
 800c5ce:	1c5a      	adds	r2, r3, #1
 800c5d0:	b291      	uxth	r1, r2
 800c5d2:	4a16      	ldr	r2, [pc, #88]	; (800c62c <udp_new_port+0x6c>)
 800c5d4:	8011      	strh	r1, [r2, #0]
 800c5d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d103      	bne.n	800c5e6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c5de:	4b13      	ldr	r3, [pc, #76]	; (800c62c <udp_new_port+0x6c>)
 800c5e0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c5e4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5e6:	4b12      	ldr	r3, [pc, #72]	; (800c630 <udp_new_port+0x70>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	603b      	str	r3, [r7, #0]
 800c5ec:	e012      	b.n	800c614 <udp_new_port+0x54>
    if (pcb->local_port == udp_port) {
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	8a5a      	ldrh	r2, [r3, #18]
 800c5f2:	4b0e      	ldr	r3, [pc, #56]	; (800c62c <udp_new_port+0x6c>)
 800c5f4:	881b      	ldrh	r3, [r3, #0]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d109      	bne.n	800c60e <udp_new_port+0x4e>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c5fa:	88fb      	ldrh	r3, [r7, #6]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	80fb      	strh	r3, [r7, #6]
 800c600:	88fb      	ldrh	r3, [r7, #6]
 800c602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c606:	d301      	bcc.n	800c60c <udp_new_port+0x4c>
        return 0;
 800c608:	2300      	movs	r3, #0
 800c60a:	e008      	b.n	800c61e <udp_new_port+0x5e>
      }
      goto again;
 800c60c:	e7dd      	b.n	800c5ca <udp_new_port+0xa>
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	603b      	str	r3, [r7, #0]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1e9      	bne.n	800c5ee <udp_new_port+0x2e>
        return 0;
      }
      goto again;
    }
  }
  return udp_port;
 800c61a:	4b04      	ldr	r3, [pc, #16]	; (800c62c <udp_new_port+0x6c>)
 800c61c:	881b      	ldrh	r3, [r3, #0]
}
 800c61e:	4618      	mov	r0, r3
 800c620:	370c      	adds	r7, #12
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	1ffe890c 	.word	0x1ffe890c
 800c630:	1ffeff70 	.word	0x1ffeff70

0800c634 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	4613      	mov	r3, r2
 800c640:	71fb      	strb	r3, [r7, #7]

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	7a1b      	ldrb	r3, [r3, #8]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00b      	beq.n	800c662 <udp_input_local_match+0x2e>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	7a1a      	ldrb	r2, [r3, #8]
 800c64e:	4b1e      	ldr	r3, [pc, #120]	; (800c6c8 <udp_input_local_match+0x94>)
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c656:	3301      	adds	r3, #1
 800c658:	b2db      	uxtb	r3, r3

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d001      	beq.n	800c662 <udp_input_local_match+0x2e>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
    return 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	e02b      	b.n	800c6ba <udp_input_local_match+0x86>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c662:	79fb      	ldrb	r3, [r7, #7]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d018      	beq.n	800c69a <udp_input_local_match+0x66>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d013      	beq.n	800c696 <udp_input_local_match+0x62>
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00f      	beq.n	800c696 <udp_input_local_match+0x62>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c676:	4b14      	ldr	r3, [pc, #80]	; (800c6c8 <udp_input_local_match+0x94>)
 800c678:	695b      	ldr	r3, [r3, #20]
    if (broadcast != 0) {
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c67e:	d00a      	beq.n	800c696 <udp_input_local_match+0x62>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	4b10      	ldr	r3, [pc, #64]	; (800c6c8 <udp_input_local_match+0x94>)
 800c686:	695b      	ldr	r3, [r3, #20]
 800c688:	405a      	eors	r2, r3
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	3308      	adds	r3, #8
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4013      	ands	r3, r2
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c692:	2b00      	cmp	r3, #0
 800c694:	d110      	bne.n	800c6b8 <udp_input_local_match+0x84>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
          return 1;
 800c696:	2301      	movs	r3, #1
 800c698:	e00f      	b.n	800c6ba <udp_input_local_match+0x86>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d009      	beq.n	800c6b4 <udp_input_local_match+0x80>
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d005      	beq.n	800c6b4 <udp_input_local_match+0x80>
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	4b06      	ldr	r3, [pc, #24]	; (800c6c8 <udp_input_local_match+0x94>)
 800c6ae:	695b      	ldr	r3, [r3, #20]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d101      	bne.n	800c6b8 <udp_input_local_match+0x84>
        return 1;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e000      	b.n	800c6ba <udp_input_local_match+0x86>
      }
  }

  return 0;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3714      	adds	r7, #20
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop
 800c6c8:	1ffe9100 	.word	0x1ffe9100

0800c6cc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c6cc:	b590      	push	{r4, r7, lr}
 800c6ce:	b08d      	sub	sp, #52	; 0x34
 800c6d0:	af02      	add	r7, sp, #8
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	895b      	ldrh	r3, [r3, #10]
 800c6de:	2b07      	cmp	r3, #7
 800c6e0:	d803      	bhi.n	800c6ea <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7fb f918 	bl	8007918 <pbuf_free>
    goto end;
 800c6e8:	e0d7      	b.n	800c89a <udp_input+0x1ce>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c6f0:	4b6c      	ldr	r3, [pc, #432]	; (800c8a4 <udp_input+0x1d8>)
 800c6f2:	695a      	ldr	r2, [r3, #20]
 800c6f4:	4b6b      	ldr	r3, [pc, #428]	; (800c8a4 <udp_input+0x1d8>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	f7fa f83a 	bl	8006774 <ip4_addr_isbroadcast_u32>
 800c700:	4603      	mov	r3, r0
 800c702:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	881b      	ldrh	r3, [r3, #0]
 800c708:	b29b      	uxth	r3, r3
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fa f874 	bl	80067f8 <lwip_htons>
 800c710:	4603      	mov	r3, r0
 800c712:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	885b      	ldrh	r3, [r3, #2]
 800c718:	b29b      	uxth	r3, r3
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fa f86c 	bl	80067f8 <lwip_htons>
 800c720:	4603      	mov	r3, r0
 800c722:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c724:	2300      	movs	r3, #0
 800c726:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c728:	2300      	movs	r3, #0
 800c72a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c72c:	2300      	movs	r3, #0
 800c72e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c730:	4b5d      	ldr	r3, [pc, #372]	; (800c8a8 <udp_input+0x1dc>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	627b      	str	r3, [r7, #36]	; 0x24
 800c736:	e054      	b.n	800c7e2 <udp_input+0x116>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73a:	8a5b      	ldrh	r3, [r3, #18]
 800c73c:	89fa      	ldrh	r2, [r7, #14]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d14a      	bne.n	800c7d8 <udp_input+0x10c>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c742:	7cfb      	ldrb	r3, [r7, #19]
 800c744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	461a      	mov	r2, r3
 800c74a:	f7ff ff73 	bl	800c634 <udp_input_local_match>
 800c74e:	4603      	mov	r3, r0
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c750:	2b00      	cmp	r3, #0
 800c752:	d041      	beq.n	800c7d8 <udp_input+0x10c>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c756:	7c1b      	ldrb	r3, [r3, #16]
 800c758:	f003 0304 	and.w	r3, r3, #4
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d11d      	bne.n	800c79c <udp_input+0xd0>
        if (uncon_pcb == NULL) {
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d102      	bne.n	800c76c <udp_input+0xa0>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c768:	61fb      	str	r3, [r7, #28]
 800c76a:	e017      	b.n	800c79c <udp_input+0xd0>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c76c:	7cfb      	ldrb	r3, [r7, #19]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d014      	beq.n	800c79c <udp_input+0xd0>
 800c772:	4b4c      	ldr	r3, [pc, #304]	; (800c8a4 <udp_input+0x1d8>)
 800c774:	695b      	ldr	r3, [r3, #20]
 800c776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c77a:	d10f      	bne.n	800c79c <udp_input+0xd0>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	3304      	adds	r3, #4
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	429a      	cmp	r2, r3
 800c788:	d008      	beq.n	800c79c <udp_input+0xd0>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	3304      	adds	r3, #4
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	429a      	cmp	r2, r3
 800c796:	d101      	bne.n	800c79c <udp_input+0xd0>
              /* better match */
              uncon_pcb = pcb;
 800c798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79e:	8a9b      	ldrh	r3, [r3, #20]
 800c7a0:	8a3a      	ldrh	r2, [r7, #16]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d118      	bne.n	800c7d8 <udp_input+0x10c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a8:	685b      	ldr	r3, [r3, #4]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d005      	beq.n	800c7ba <udp_input+0xee>
          (ip_addr_isany_val(pcb->remote_ip) ||
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b0:	685a      	ldr	r2, [r3, #4]
 800c7b2:	4b3c      	ldr	r3, [pc, #240]	; (800c8a4 <udp_input+0x1d8>)
 800c7b4:	691b      	ldr	r3, [r3, #16]
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d10e      	bne.n	800c7d8 <udp_input+0x10c>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d00a      	beq.n	800c7d6 <udp_input+0x10a>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c2:	68da      	ldr	r2, [r3, #12]
 800c7c4:	6a3b      	ldr	r3, [r7, #32]
 800c7c6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c7c8:	4b37      	ldr	r3, [pc, #220]	; (800c8a8 <udp_input+0x1dc>)
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ce:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c7d0:	4a35      	ldr	r2, [pc, #212]	; (800c8a8 <udp_input+0x1dc>)
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c7d6:	e007      	b.n	800c7e8 <udp_input+0x11c>
      }
    }

    prev = pcb;
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7da:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d1a7      	bne.n	800c738 <udp_input+0x6c>
    }

    prev = pcb;
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d101      	bne.n	800c7f2 <udp_input+0x126>
    pcb = uncon_pcb;
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d002      	beq.n	800c7fe <udp_input+0x132>
    for_us = 1;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	76fb      	strb	r3, [r7, #27]
 800c7fc:	e00a      	b.n	800c814 <udp_input+0x148>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	3304      	adds	r3, #4
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	4b27      	ldr	r3, [pc, #156]	; (800c8a4 <udp_input+0x1d8>)
 800c806:	695b      	ldr	r3, [r3, #20]
 800c808:	429a      	cmp	r2, r3
 800c80a:	bf0c      	ite	eq
 800c80c:	2301      	moveq	r3, #1
 800c80e:	2300      	movne	r3, #0
 800c810:	b2db      	uxtb	r3, r3
 800c812:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c814:	7efb      	ldrb	r3, [r7, #27]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d03c      	beq.n	800c894 <udp_input+0x1c8>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	2108      	movs	r1, #8
 800c81e:	f7fa fffb 	bl	8007818 <pbuf_remove_header>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d003      	beq.n	800c830 <udp_input+0x164>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7fb f875 	bl	8007918 <pbuf_free>
      goto end;
 800c82e:	e034      	b.n	800c89a <udp_input+0x1ce>
    }

    if (pcb != NULL) {
 800c830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c832:	2b00      	cmp	r3, #0
 800c834:	d013      	beq.n	800c85e <udp_input+0x192>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c838:	699b      	ldr	r3, [r3, #24]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00b      	beq.n	800c856 <udp_input+0x18a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	699c      	ldr	r4, [r3, #24]
 800c842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c844:	69da      	ldr	r2, [r3, #28]
 800c846:	8a3b      	ldrh	r3, [r7, #16]
 800c848:	9300      	str	r3, [sp, #0]
 800c84a:	4610      	mov	r0, r2
 800c84c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	4b16      	ldr	r3, [pc, #88]	; (800c8ac <udp_input+0x1e0>)
 800c852:	47a0      	blx	r4
 800c854:	e021      	b.n	800c89a <udp_input+0x1ce>
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7fb f85e 	bl	8007918 <pbuf_free>
        goto end;
 800c85c:	e01d      	b.n	800c89a <udp_input+0x1ce>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP || LWIP_ICMP6
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c85e:	7cfb      	ldrb	r3, [r7, #19]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d113      	bne.n	800c88c <udp_input+0x1c0>
 800c864:	4b0f      	ldr	r3, [pc, #60]	; (800c8a4 <udp_input+0x1d8>)
 800c866:	695b      	ldr	r3, [r3, #20]
 800c868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c86c:	2be0      	cmp	r3, #224	; 0xe0
 800c86e:	d00d      	beq.n	800c88c <udp_input+0x1c0>
        /* move payload pointer back to ip header */
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c870:	4b0c      	ldr	r3, [pc, #48]	; (800c8a4 <udp_input+0x1d8>)
 800c872:	899b      	ldrh	r3, [r3, #12]
 800c874:	3308      	adds	r3, #8
 800c876:	b29b      	uxth	r3, r3
 800c878:	b29b      	uxth	r3, r3
 800c87a:	b21b      	sxth	r3, r3
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	4619      	mov	r1, r3
 800c880:	f7fb f838 	bl	80078f4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	2103      	movs	r1, #3
 800c888:	f7f9 fca2 	bl	80061d0 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP || LWIP_ICMP6 */
      UDP_STATS_INC(udp.proterr);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpnoports);
      pbuf_free(p);
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7fb f843 	bl	8007918 <pbuf_free>
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c892:	e003      	b.n	800c89c <udp_input+0x1d0>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpnoports);
      pbuf_free(p);
    }
  } else {
    pbuf_free(p);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7fb f83f 	bl	8007918 <pbuf_free>
  }
end:
  PERF_STOP("udp_input");
  return;
 800c89a:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c89c:	372c      	adds	r7, #44	; 0x2c
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd90      	pop	{r4, r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	1ffe9100 	.word	0x1ffe9100
 800c8a8:	1ffeff70 	.word	0x1ffeff70
 800c8ac:	1ffe9110 	.word	0x1ffe9110

0800c8b0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c8b0:	b590      	push	{r4, r7, lr}
 800c8b2:	b089      	sub	sp, #36	; 0x24
 800c8b4:	af02      	add	r7, sp, #8
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
 800c8bc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d101      	bne.n	800c8c8 <udp_sendto+0x18>
 800c8c4:	23f0      	movs	r3, #240	; 0xf0
 800c8c6:	e027      	b.n	800c918 <udp_sendto+0x68>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d101      	bne.n	800c8d2 <udp_sendto+0x22>
 800c8ce:	23f0      	movs	r3, #240	; 0xf0
 800c8d0:	e022      	b.n	800c918 <udp_sendto+0x68>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d101      	bne.n	800c8dc <udp_sendto+0x2c>
 800c8d8:	23f0      	movs	r3, #240	; 0xf0
 800c8da:	e01d      	b.n	800c918 <udp_sendto+0x68>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	7a1b      	ldrb	r3, [r3, #8]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d006      	beq.n	800c8f2 <udp_sendto+0x42>
    netif = netif_get_by_index(pcb->netif_idx);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	7a1b      	ldrb	r3, [r3, #8]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7fa fd7d 	bl	80073e8 <netif_get_by_index>
 800c8ee:	6178      	str	r0, [r7, #20]
 800c8f0:	e003      	b.n	800c8fa <udp_sendto+0x4a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f7f9 fcd4 	bl	80062a0 <ip4_route>
 800c8f8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d101      	bne.n	800c904 <udp_sendto+0x54>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c900:	23fc      	movs	r3, #252	; 0xfc
 800c902:	e009      	b.n	800c918 <udp_sendto+0x68>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c904:	887c      	ldrh	r4, [r7, #2]
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	68b9      	ldr	r1, [r7, #8]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	4623      	mov	r3, r4
 800c912:	f000 f807 	bl	800c924 <udp_sendto_if>
 800c916:	4603      	mov	r3, r0
 800c918:	b25b      	sxtb	r3, r3
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	371c      	adds	r7, #28
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd90      	pop	{r4, r7, pc}
 800c922:	bf00      	nop

0800c924 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c924:	b590      	push	{r4, r7, lr}
 800c926:	b089      	sub	sp, #36	; 0x24
 800c928:	af02      	add	r7, sp, #8
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
 800c930:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d101      	bne.n	800c93c <udp_sendto_if+0x18>
 800c938:	23f0      	movs	r3, #240	; 0xf0
 800c93a:	e036      	b.n	800c9aa <udp_sendto_if+0x86>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d101      	bne.n	800c946 <udp_sendto_if+0x22>
 800c942:	23f0      	movs	r3, #240	; 0xf0
 800c944:	e031      	b.n	800c9aa <udp_sendto_if+0x86>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d101      	bne.n	800c950 <udp_sendto_if+0x2c>
 800c94c:	23f0      	movs	r3, #240	; 0xf0
 800c94e:	e02c      	b.n	800c9aa <udp_sendto_if+0x86>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	2b00      	cmp	r3, #0
 800c954:	d101      	bne.n	800c95a <udp_sendto_if+0x36>
 800c956:	23f0      	movs	r3, #240	; 0xf0
 800c958:	e027      	b.n	800c9aa <udp_sendto_if+0x86>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d009      	beq.n	800c974 <udp_sendto_if+0x50>
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d005      	beq.n	800c974 <udp_sendto_if+0x50>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c970:	2be0      	cmp	r3, #224	; 0xe0
 800c972:	d103      	bne.n	800c97c <udp_sendto_if+0x58>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c976:	3304      	adds	r3, #4
 800c978:	617b      	str	r3, [r7, #20]
 800c97a:	e00a      	b.n	800c992 <udp_sendto_if+0x6e>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c982:	3304      	adds	r3, #4
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	429a      	cmp	r2, r3
 800c988:	d001      	beq.n	800c98e <udp_sendto_if+0x6a>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c98a:	23fc      	movs	r3, #252	; 0xfc
 800c98c:	e00d      	b.n	800c9aa <udp_sendto_if+0x86>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c992:	887c      	ldrh	r4, [r7, #2]
 800c994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	9301      	str	r3, [sp, #4]
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	68b9      	ldr	r1, [r7, #8]
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	4623      	mov	r3, r4
 800c9a4:	f000 f806 	bl	800c9b4 <udp_sendto_if_src>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	b25b      	sxtb	r3, r3
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	371c      	adds	r7, #28
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd90      	pop	{r4, r7, pc}

0800c9b4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c9b4:	b590      	push	{r4, r7, lr}
 800c9b6:	b08d      	sub	sp, #52	; 0x34
 800c9b8:	af04      	add	r7, sp, #16
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
 800c9c0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d101      	bne.n	800c9cc <udp_sendto_if_src+0x18>
 800c9c8:	23f0      	movs	r3, #240	; 0xf0
 800c9ca:	e090      	b.n	800caee <udp_sendto_if_src+0x13a>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d101      	bne.n	800c9d6 <udp_sendto_if_src+0x22>
 800c9d2:	23f0      	movs	r3, #240	; 0xf0
 800c9d4:	e08b      	b.n	800caee <udp_sendto_if_src+0x13a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <udp_sendto_if_src+0x2c>
 800c9dc:	23f0      	movs	r3, #240	; 0xf0
 800c9de:	e086      	b.n	800caee <udp_sendto_if_src+0x13a>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d101      	bne.n	800c9ea <udp_sendto_if_src+0x36>
 800c9e6:	23f0      	movs	r3, #240	; 0xf0
 800c9e8:	e081      	b.n	800caee <udp_sendto_if_src+0x13a>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d101      	bne.n	800c9f4 <udp_sendto_if_src+0x40>
 800c9f0:	23f0      	movs	r3, #240	; 0xf0
 800c9f2:	e07c      	b.n	800caee <udp_sendto_if_src+0x13a>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	8a5b      	ldrh	r3, [r3, #18]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d10f      	bne.n	800ca1c <udp_sendto_if_src+0x68>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	8a5b      	ldrh	r3, [r3, #18]
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	4611      	mov	r1, r2
 800ca06:	461a      	mov	r2, r3
 800ca08:	f000 f876 	bl	800caf8 <udp_bind>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ca10:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <udp_sendto_if_src+0x68>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ca18:	7efb      	ldrb	r3, [r7, #27]
 800ca1a:	e068      	b.n	800caee <udp_sendto_if_src+0x13a>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	891b      	ldrh	r3, [r3, #8]
 800ca20:	3308      	adds	r3, #8
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	891b      	ldrh	r3, [r3, #8]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d201      	bcs.n	800ca30 <udp_sendto_if_src+0x7c>
    return ERR_MEM;
 800ca2c:	23ff      	movs	r3, #255	; 0xff
 800ca2e:	e05e      	b.n	800caee <udp_sendto_if_src+0x13a>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800ca30:	68b8      	ldr	r0, [r7, #8]
 800ca32:	2108      	movs	r1, #8
 800ca34:	f7fa fee0 	bl	80077f8 <pbuf_add_header>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d014      	beq.n	800ca68 <udp_sendto_if_src+0xb4>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ca3e:	2024      	movs	r0, #36	; 0x24
 800ca40:	2108      	movs	r1, #8
 800ca42:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ca46:	f7fa fd4b 	bl	80074e0 <pbuf_alloc>
 800ca4a:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d101      	bne.n	800ca56 <udp_sendto_if_src+0xa2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800ca52:	23ff      	movs	r3, #255	; 0xff
 800ca54:	e04b      	b.n	800caee <udp_sendto_if_src+0x13a>
    }
    if (p->tot_len != 0) {
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	891b      	ldrh	r3, [r3, #8]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d006      	beq.n	800ca6c <udp_sendto_if_src+0xb8>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800ca5e:	69f8      	ldr	r0, [r7, #28]
 800ca60:	68b9      	ldr	r1, [r7, #8]
 800ca62:	f7fa fff7 	bl	8007a54 <pbuf_chain>
 800ca66:	e001      	b.n	800ca6c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	8a5b      	ldrh	r3, [r3, #18]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7f9 febe 	bl	80067f8 <lwip_htons>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	461a      	mov	r2, r3
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ca84:	887b      	ldrh	r3, [r7, #2]
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7f9 feb6 	bl	80067f8 <lwip_htons>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	461a      	mov	r2, r3
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	2200      	movs	r2, #0
 800ca98:	719a      	strb	r2, [r3, #6]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800ca9e:	69fb      	ldr	r3, [r7, #28]
 800caa0:	891b      	ldrh	r3, [r3, #8]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7f9 fea8 	bl	80067f8 <lwip_htons>
 800caa8:	4603      	mov	r3, r0
 800caaa:	461a      	mov	r2, r3
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800cab0:	2311      	movs	r3, #17
 800cab2:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	7adb      	ldrb	r3, [r3, #11]
 800cab8:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	7a9b      	ldrb	r3, [r3, #10]
 800cabe:	7cbc      	ldrb	r4, [r7, #18]
 800cac0:	9300      	str	r3, [sp, #0]
 800cac2:	7cfb      	ldrb	r3, [r7, #19]
 800cac4:	9301      	str	r3, [sp, #4]
 800cac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac8:	9302      	str	r3, [sp, #8]
 800caca:	69f8      	ldr	r0, [r7, #28]
 800cacc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	4623      	mov	r3, r4
 800cad2:	f7f9 fdd1 	bl	8006678 <ip4_output_if_src>
 800cad6:	4603      	mov	r3, r0
 800cad8:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800cada:	69fa      	ldr	r2, [r7, #28]
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d004      	beq.n	800caec <udp_sendto_if_src+0x138>
    /* free the header pbuf */
    pbuf_free(q);
 800cae2:	69f8      	ldr	r0, [r7, #28]
 800cae4:	f7fa ff18 	bl	8007918 <pbuf_free>
    q = NULL;
 800cae8:	2300      	movs	r3, #0
 800caea:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800caec:	7efb      	ldrb	r3, [r7, #27]
 800caee:	b25b      	sxtb	r3, r3
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3724      	adds	r7, #36	; 0x24
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd90      	pop	{r4, r7, pc}

0800caf8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b086      	sub	sp, #24
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	4613      	mov	r3, r2
 800cb04:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d101      	bne.n	800cb10 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800cb0c:	4b35      	ldr	r3, [pc, #212]	; (800cbe4 <udp_bind+0xec>)
 800cb0e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d101      	bne.n	800cb1a <udp_bind+0x22>
 800cb16:	23f0      	movs	r3, #240	; 0xf0
 800cb18:	e05e      	b.n	800cbd8 <udp_bind+0xe0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cb1e:	4b32      	ldr	r3, [pc, #200]	; (800cbe8 <udp_bind+0xf0>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	617b      	str	r3, [r7, #20]
 800cb24:	e009      	b.n	800cb3a <udp_bind+0x42>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d102      	bne.n	800cb34 <udp_bind+0x3c>
      rebind = 1;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	74fb      	strb	r3, [r7, #19]
      break;
 800cb32:	e005      	b.n	800cb40 <udp_bind+0x48>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	617b      	str	r3, [r7, #20]
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d1f2      	bne.n	800cb26 <udp_bind+0x2e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800cb40:	88fb      	ldrh	r3, [r7, #6]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d108      	bne.n	800cb58 <udp_bind+0x60>
    port = udp_new_port();
 800cb46:	f7ff fd3b 	bl	800c5c0 <udp_new_port>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cb4e:	88fb      	ldrh	r3, [r7, #6]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d12a      	bne.n	800cbaa <udp_bind+0xb2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800cb54:	23f8      	movs	r3, #248	; 0xf8
 800cb56:	e03f      	b.n	800cbd8 <udp_bind+0xe0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cb58:	4b23      	ldr	r3, [pc, #140]	; (800cbe8 <udp_bind+0xf0>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	617b      	str	r3, [r7, #20]
 800cb5e:	e021      	b.n	800cba4 <udp_bind+0xac>
      if (pcb != ipcb) {
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d01a      	beq.n	800cb9e <udp_bind+0xa6>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	8a5b      	ldrh	r3, [r3, #18]
 800cb6c:	88fa      	ldrh	r2, [r7, #6]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d115      	bne.n	800cb9e <udp_bind+0xa6>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	681b      	ldr	r3, [r3, #0]
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d00d      	beq.n	800cb9a <udp_bind+0xa2>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00a      	beq.n	800cb9a <udp_bind+0xa2>
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d006      	beq.n	800cb9a <udp_bind+0xa2>
              ip_addr_isany(&ipcb->local_ip))) {
 800cb8c:	697b      	ldr	r3, [r7, #20]
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d003      	beq.n	800cb9a <udp_bind+0xa2>
              ip_addr_isany(&ipcb->local_ip))) {
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d101      	bne.n	800cb9e <udp_bind+0xa6>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800cb9a:	23f8      	movs	r3, #248	; 0xf8
 800cb9c:	e01c      	b.n	800cbd8 <udp_bind+0xe0>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	617b      	str	r3, [r7, #20]
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1da      	bne.n	800cb60 <udp_bind+0x68>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d002      	beq.n	800cbb6 <udp_bind+0xbe>
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	e000      	b.n	800cbb8 <udp_bind+0xc0>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	88fa      	ldrh	r2, [r7, #6]
 800cbc0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800cbc2:	7cfb      	ldrb	r3, [r7, #19]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d106      	bne.n	800cbd6 <udp_bind+0xde>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800cbc8:	4b07      	ldr	r3, [pc, #28]	; (800cbe8 <udp_bind+0xf0>)
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800cbd0:	4a05      	ldr	r2, [pc, #20]	; (800cbe8 <udp_bind+0xf0>)
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	b25b      	sxtb	r3, r3
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3718      	adds	r7, #24
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	080115c0 	.word	0x080115c0
 800cbe8:	1ffeff70 	.word	0x1ffeff70

0800cbec <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800cbf2:	2001      	movs	r0, #1
 800cbf4:	f7fa f94c 	bl	8006e90 <memp_malloc>
 800cbf8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d007      	beq.n	800cc10 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	2100      	movs	r1, #0
 800cc04:	2220      	movs	r2, #32
 800cc06:	f001 fef4 	bl	800e9f2 <memset>
    pcb->ttl = UDP_TTL;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	22ff      	movs	r2, #255	; 0xff
 800cc0e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800cc10:	687b      	ldr	r3, [r7, #4]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3708      	adds	r7, #8
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop

0800cc1c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d01e      	beq.n	800cc6a <udp_netif_ip_addr_changed+0x4e>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d01a      	beq.n	800cc6a <udp_netif_ip_addr_changed+0x4e>
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d017      	beq.n	800cc6a <udp_netif_ip_addr_changed+0x4e>
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d013      	beq.n	800cc6a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc42:	4b0c      	ldr	r3, [pc, #48]	; (800cc74 <udp_netif_ip_addr_changed+0x58>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	60fb      	str	r3, [r7, #12]
 800cc48:	e00c      	b.n	800cc64 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d103      	bne.n	800cc5e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	601a      	str	r2, [r3, #0]
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	60fb      	str	r3, [r7, #12]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1ef      	bne.n	800cc4a <udp_netif_ip_addr_changed+0x2e>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800cc6a:	3714      	adds	r7, #20
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr
 800cc74:	1ffeff70 	.word	0x1ffeff70

0800cc78 <ETH_LWIP_Init>:
  }
  return status;
}
#else
ETH_LWIP_STATUS_t ETH_LWIP_Init(ETH_LWIP_t* handle)
{
 800cc78:	b590      	push	{r4, r7, lr}
 800cc7a:	b08b      	sub	sp, #44	; 0x2c
 800cc7c:	af04      	add	r7, sp, #16
 800cc7e:	6078      	str	r0, [r7, #4]
  ETH_LWIP_STATUS_t status = ETH_LWIP_STATUS_SUCCESS;
 800cc80:	2300      	movs	r3, #0
 800cc82:	75fb      	strb	r3, [r7, #23]

  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;

  if (handle->initialized == false)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	7a1b      	ldrb	r3, [r3, #8]
 800cc88:	f083 0301 	eor.w	r3, r3, #1
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d029      	beq.n	800cce6 <ETH_LWIP_Init+0x6e>
#if ((LWIP_DHCP == 1) || (LWIP_AUTOIP == 1))
    ipaddr.addr = 0;
    netmask.addr = 0;
    gw.addr = 0;
#else
    IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 800cc92:	4b17      	ldr	r3, [pc, #92]	; (800ccf0 <ETH_LWIP_Init+0x78>)
 800cc94:	613b      	str	r3, [r7, #16]
    IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 800cc96:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800cc9a:	60fb      	str	r3, [r7, #12]
    IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800cc9c:	4b14      	ldr	r3, [pc, #80]	; (800ccf0 <ETH_LWIP_Init+0x78>)
 800cc9e:	60bb      	str	r3, [r7, #8]
#endif
    /*Initialize SYSTIMER APP*/
    status = (ETH_LWIP_STATUS_t)SYSTIMER_Init(&ETH_SYSTIMER_NAME);
 800cca0:	4814      	ldr	r0, [pc, #80]	; (800ccf4 <ETH_LWIP_Init+0x7c>)
 800cca2:	f7f6 fdf3 	bl	800388c <SYSTIMER_Init>
 800cca6:	4603      	mov	r3, r0
 800cca8:	75fb      	strb	r3, [r7, #23]

    lwip_init();
 800ccaa:	f7f9 fdd5 	bl	8006858 <lwip_init>

    /* Adds network interface to the netif_list */
    (void)netif_add(&xnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800ccae:	f107 0110 	add.w	r1, r7, #16
 800ccb2:	f107 020c 	add.w	r2, r7, #12
 800ccb6:	f107 0408 	add.w	r4, r7, #8
 800ccba:	2300      	movs	r3, #0
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	4b0e      	ldr	r3, [pc, #56]	; (800ccf8 <ETH_LWIP_Init+0x80>)
 800ccc0:	9301      	str	r3, [sp, #4]
 800ccc2:	4b0e      	ldr	r3, [pc, #56]	; (800ccfc <ETH_LWIP_Init+0x84>)
 800ccc4:	9302      	str	r3, [sp, #8]
 800ccc6:	480e      	ldr	r0, [pc, #56]	; (800cd00 <ETH_LWIP_Init+0x88>)
 800ccc8:	4623      	mov	r3, r4
 800ccca:	f7fa f933 	bl	8006f34 <netif_add>

    /*  Registers the default network interface.*/
    netif_set_default(&xnetif);
 800ccce:	480c      	ldr	r0, [pc, #48]	; (800cd00 <ETH_LWIP_Init+0x88>)
 800ccd0:	f7fa fa9c 	bl	800720c <netif_set_default>
#if LWIP_NETIF_STATUS_CALLBACK == 1
    /* Initialize interface status change callback */
    netif_set_status_callback(&xnetif, ETH_NETIF_STATUS_CB_FUNCTION);
#endif

    handle->initialized = true;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	721a      	strb	r2, [r3, #8]
    handle->eth_mac = &eth_mac;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4a09      	ldr	r2, [pc, #36]	; (800cd04 <ETH_LWIP_Init+0x8c>)
 800ccde:	601a      	str	r2, [r3, #0]
    handle->xnetif = &xnetif;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	4a07      	ldr	r2, [pc, #28]	; (800cd00 <ETH_LWIP_Init+0x88>)
 800cce4:	605a      	str	r2, [r3, #4]
  }
  return status;
 800cce6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	371c      	adds	r7, #28
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd90      	pop	{r4, r7, pc}
 800ccf0:	0a00a8c0 	.word	0x0a00a8c0
 800ccf4:	1ffe89dc 	.word	0x1ffe89dc
 800ccf8:	08005121 	.word	0x08005121
 800ccfc:	08005241 	.word	0x08005241
 800cd00:	1ffe88d0 	.word	0x1ffe88d0
 800cd04:	1ffe88a0 	.word	0x1ffe88a0

0800cd08 <XMC_ETH_PHY_IsDeviceIdValid>:
 * API IMPLEMENTATION
 *******************************************************************************/

 /* Check if the device identifier is valid */
static int32_t XMC_ETH_PHY_IsDeviceIdValid(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	460b      	mov	r3, r1
 800cd12:	70fb      	strb	r3, [r7, #3]
  uint16_t phy_id1;
  uint16_t phy_id2;
  XMC_ETH_PHY_STATUS_t status;

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
 800cd14:	78fa      	ldrb	r2, [r7, #3]
 800cd16:	f107 030c 	add.w	r3, r7, #12
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	4611      	mov	r1, r2
 800cd1e:	2202      	movs	r2, #2
 800cd20:	f7f5 f9fa 	bl	8002118 <XMC_ETH_MAC_ReadPhy>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d11b      	bne.n	800cd62 <XMC_ETH_PHY_IsDeviceIdValid+0x5a>
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
 800cd2a:	78fa      	ldrb	r2, [r7, #3]
 800cd2c:	f107 030a 	add.w	r3, r7, #10
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	4611      	mov	r1, r2
 800cd34:	2203      	movs	r2, #3
 800cd36:	f7f5 f9ef 	bl	8002118 <XMC_ETH_MAC_ReadPhy>
 800cd3a:	4603      	mov	r3, r0
  uint16_t phy_id1;
  uint16_t phy_id2;
  XMC_ETH_PHY_STATUS_t status;

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d110      	bne.n	800cd62 <XMC_ETH_PHY_IsDeviceIdValid+0x5a>
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 800cd40:	89bb      	ldrh	r3, [r7, #12]
 800cd42:	2b22      	cmp	r3, #34	; 0x22
 800cd44:	d10a      	bne.n	800cd5c <XMC_ETH_PHY_IsDeviceIdValid+0x54>
 800cd46:	897b      	ldrh	r3, [r7, #10]
 800cd48:	461a      	mov	r2, r3
 800cd4a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800cd4e:	4013      	ands	r3, r2
 800cd50:	f5b3 5fab 	cmp.w	r3, #5472	; 0x1560
 800cd54:	d102      	bne.n	800cd5c <XMC_ETH_PHY_IsDeviceIdValid+0x54>
    {
      status = XMC_ETH_PHY_STATUS_OK;
 800cd56:	2300      	movs	r3, #0
 800cd58:	73fb      	strb	r3, [r7, #15]

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 800cd5a:	e004      	b.n	800cd66 <XMC_ETH_PHY_IsDeviceIdValid+0x5e>
    {
      status = XMC_ETH_PHY_STATUS_OK;
    }
    else
    {
      status = XMC_ETH_PHY_STATUS_ERROR_DEVICE_ID;
 800cd5c:	2303      	movs	r3, #3
 800cd5e:	73fb      	strb	r3, [r7, #15]

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 800cd60:	e001      	b.n	800cd66 <XMC_ETH_PHY_IsDeviceIdValid+0x5e>
      status = XMC_ETH_PHY_STATUS_ERROR_DEVICE_ID;
    }
  }
  else
  {
    status = XMC_ETH_PHY_STATUS_ERROR_TIMEOUT;
 800cd62:	2304      	movs	r3, #4
 800cd64:	73fb      	strb	r3, [r7, #15]
  }

  return (int32_t)status;
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <XMC_ETH_PHY_Init>:

/* PHY initialize */
int32_t XMC_ETH_PHY_Init(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, const XMC_ETH_PHY_CONFIG_t *const config)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b088      	sub	sp, #32
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	460b      	mov	r3, r1
 800cd7a:	607a      	str	r2, [r7, #4]
 800cd7c:	72fb      	strb	r3, [r7, #11]
  uint32_t retries = 0xffffffffUL;
 800cd7e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd82:	61fb      	str	r3, [r7, #28]
  int32_t status;
  uint16_t reg_bmcr;

  while (((status = XMC_ETH_PHY_IsDeviceIdValid(eth_mac, phy_addr)) != XMC_ETH_PHY_STATUS_OK) && --retries);
 800cd84:	7afb      	ldrb	r3, [r7, #11]
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	4619      	mov	r1, r3
 800cd8a:	f7ff ffbd 	bl	800cd08 <XMC_ETH_PHY_IsDeviceIdValid>
 800cd8e:	61b8      	str	r0, [r7, #24]
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d005      	beq.n	800cda2 <XMC_ETH_PHY_Init+0x32>
 800cd96:	69fb      	ldr	r3, [r7, #28]
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	61fb      	str	r3, [r7, #28]
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1f0      	bne.n	800cd84 <XMC_ETH_PHY_Init+0x14>

  if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d135      	bne.n	800ce14 <XMC_ETH_PHY_Init+0xa4>
  {
    status = XMC_ETH_PHY_Reset(eth_mac, phy_addr);
 800cda8:	7afb      	ldrb	r3, [r7, #11]
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	4619      	mov	r1, r3
 800cdae:	f000 f837 	bl	800ce20 <XMC_ETH_PHY_Reset>
 800cdb2:	61b8      	str	r0, [r7, #24]
    
    if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d12c      	bne.n	800ce14 <XMC_ETH_PHY_Init+0xa4>
    {
      reg_bmcr = 0U;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	82fb      	strh	r3, [r7, #22]
      if (config->speed == XMC_ETH_LINK_SPEED_100M)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	885b      	ldrh	r3, [r3, #2]
 800cdc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdc6:	d103      	bne.n	800cdd0 <XMC_ETH_PHY_Init+0x60>
      {
        reg_bmcr |= BMCR_SPEED_SEL;
 800cdc8:	8afb      	ldrh	r3, [r7, #22]
 800cdca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cdce:	82fb      	strh	r3, [r7, #22]
      }

      if (config->duplex == XMC_ETH_LINK_DUPLEX_FULL)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	889b      	ldrh	r3, [r3, #4]
 800cdd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdd8:	d103      	bne.n	800cde2 <XMC_ETH_PHY_Init+0x72>
      {
        reg_bmcr |= BMCR_DUPLEX;
 800cdda:	8afb      	ldrh	r3, [r7, #22]
 800cddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cde0:	82fb      	strh	r3, [r7, #22]
      }

      if (config->enable_auto_negotiate == true)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	799b      	ldrb	r3, [r3, #6]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d003      	beq.n	800cdf2 <XMC_ETH_PHY_Init+0x82>
      {
        reg_bmcr |= BMCR_ANEG_EN;
 800cdea:	8afb      	ldrh	r3, [r7, #22]
 800cdec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cdf0:	82fb      	strh	r3, [r7, #22]
      }

      if (config->enable_loop_back == true)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	79db      	ldrb	r3, [r3, #7]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d003      	beq.n	800ce02 <XMC_ETH_PHY_Init+0x92>
      {
        reg_bmcr |= BMCR_LOOPBACK;
 800cdfa:	8afb      	ldrh	r3, [r7, #22]
 800cdfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce00:	82fb      	strh	r3, [r7, #22]
      }

      status = (int32_t)XMC_ETH_MAC_WritePhy(eth_mac, phy_addr, REG_BMCR, reg_bmcr);
 800ce02:	7afa      	ldrb	r2, [r7, #11]
 800ce04:	8afb      	ldrh	r3, [r7, #22]
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	4611      	mov	r1, r2
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f7f5 f9be 	bl	800218c <XMC_ETH_MAC_WritePhy>
 800ce10:	4603      	mov	r3, r0
 800ce12:	61bb      	str	r3, [r7, #24]
    }
  }

  return status;
 800ce14:	69bb      	ldr	r3, [r7, #24]
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3720      	adds	r7, #32
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop

0800ce20 <XMC_ETH_PHY_Reset>:

/* Reset */
int32_t XMC_ETH_PHY_Reset(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	460b      	mov	r3, r1
 800ce2a:	70fb      	strb	r3, [r7, #3]
  int32_t status;
  uint16_t reg_bmcr;

  /* Reset PHY*/
  status = (int32_t)XMC_ETH_MAC_WritePhy(eth_mac, phy_addr, REG_BMCR, BMCR_RESET);
 800ce2c:	78fb      	ldrb	r3, [r7, #3]
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	4619      	mov	r1, r3
 800ce32:	2200      	movs	r2, #0
 800ce34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce38:	f7f5 f9a8 	bl	800218c <XMC_ETH_MAC_WritePhy>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	60fb      	str	r3, [r7, #12]
  if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10e      	bne.n	800ce64 <XMC_ETH_PHY_Reset+0x44>
  {      
    /* Wait for the reset to complete */
    do 
    {
      status = XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMCR, &reg_bmcr);
 800ce46:	78fa      	ldrb	r2, [r7, #3]
 800ce48:	f107 030a 	add.w	r3, r7, #10
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	4611      	mov	r1, r2
 800ce50:	2200      	movs	r2, #0
 800ce52:	f7f5 f961 	bl	8002118 <XMC_ETH_MAC_ReadPhy>
 800ce56:	4603      	mov	r3, r0
 800ce58:	60fb      	str	r3, [r7, #12]
    } while ((reg_bmcr & BMCR_RESET) != 0);
 800ce5a:	897b      	ldrh	r3, [r7, #10]
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	b21b      	sxth	r3, r3
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	dbf0      	blt.n	800ce46 <XMC_ETH_PHY_Reset+0x26>
  }
    
  return status;
 800ce64:	68fb      	ldr	r3, [r7, #12]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop

0800ce70 <XMC_ETH_PHY_GetLinkStatus>:
  return status;
}

/* Get link status */
XMC_ETH_LINK_STATUS_t XMC_ETH_PHY_GetLinkStatus(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMSR, &val);
 800ce7c:	78fa      	ldrb	r2, [r7, #3]
 800ce7e:	f107 030e 	add.w	r3, r7, #14
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	4611      	mov	r1, r2
 800ce86:	2201      	movs	r2, #1
 800ce88:	f7f5 f946 	bl	8002118 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_STATUS_t)((val & BMSR_LINK_STAT) ? XMC_ETH_LINK_STATUS_UP : XMC_ETH_LINK_STATUS_DOWN);
 800ce8c:	89fb      	ldrh	r3, [r7, #14]
 800ce8e:	f003 0304 	and.w	r3, r3, #4
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d001      	beq.n	800ce9a <XMC_ETH_PHY_GetLinkStatus+0x2a>
 800ce96:	2301      	movs	r3, #1
 800ce98:	e000      	b.n	800ce9c <XMC_ETH_PHY_GetLinkStatus+0x2c>
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <XMC_ETH_PHY_GetLinkSpeed>:

/* Get link speed */
XMC_ETH_LINK_SPEED_t XMC_ETH_PHY_GetLinkSpeed(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	460b      	mov	r3, r1
 800ceae:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYCTRL1, &val);
 800ceb0:	78fa      	ldrb	r2, [r7, #3]
 800ceb2:	f107 030e 	add.w	r3, r7, #14
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	4611      	mov	r1, r2
 800ceba:	221e      	movs	r2, #30
 800cebc:	f7f5 f92c 	bl	8002118 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_SPEED_t)(((val & PHYCTRL1_OPMODE_SPEED) - 1U) ? XMC_ETH_LINK_SPEED_100M : XMC_ETH_LINK_SPEED_10M);
 800cec0:	89fb      	ldrh	r3, [r7, #14]
 800cec2:	f003 0303 	and.w	r3, r3, #3
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d002      	beq.n	800ced0 <XMC_ETH_PHY_GetLinkSpeed+0x2c>
 800ceca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cece:	e000      	b.n	800ced2 <XMC_ETH_PHY_GetLinkSpeed+0x2e>
 800ced0:	2300      	movs	r3, #0
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3710      	adds	r7, #16
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop

0800cedc <XMC_ETH_PHY_GetLinkDuplex>:

/* Get link duplex settings */
XMC_ETH_LINK_DUPLEX_t XMC_ETH_PHY_GetLinkDuplex(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	460b      	mov	r3, r1
 800cee6:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYCTRL1, &val);
 800cee8:	78fa      	ldrb	r2, [r7, #3]
 800ceea:	f107 030e 	add.w	r3, r7, #14
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	4611      	mov	r1, r2
 800cef2:	221e      	movs	r2, #30
 800cef4:	f7f5 f910 	bl	8002118 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_DUPLEX_t)((val & PHYCTRL1_OPMODE_DUPLEX) ? XMC_ETH_LINK_DUPLEX_FULL : XMC_ETH_LINK_DUPLEX_HALF);
 800cef8:	89fb      	ldrh	r3, [r7, #14]
 800cefa:	f003 0304 	and.w	r3, r3, #4
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d002      	beq.n	800cf08 <XMC_ETH_PHY_GetLinkDuplex+0x2c>
 800cf02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf06:	e000      	b.n	800cf0a <XMC_ETH_PHY_GetLinkDuplex+0x2e>
 800cf08:	2300      	movs	r3, #0
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop

0800cf14 <XMC_ETH_PHY_IsAutonegotiationCompleted>:

bool XMC_ETH_PHY_IsAutonegotiationCompleted(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMSR, &val);
 800cf20:	78fa      	ldrb	r2, [r7, #3]
 800cf22:	f107 030e 	add.w	r3, r7, #14
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	4611      	mov	r1, r2
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f7f5 f8f4 	bl	8002118 <XMC_ETH_MAC_ReadPhy>
  return ((val & BMSR_ANEG_COMPL) == BMSR_ANEG_COMPL);
 800cf30:	89fb      	ldrh	r3, [r7, #14]
 800cf32:	f003 0320 	and.w	r3, r3, #32
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	bf14      	ite	ne
 800cf3a:	2301      	movne	r3, #1
 800cf3c:	2300      	moveq	r3, #0
 800cf3e:	b2db      	uxtb	r3, r3
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3710      	adds	r7, #16
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b085      	sub	sp, #20
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f003 0307 	and.w	r3, r3, #7
 800cf56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cf58:	4b0c      	ldr	r3, [pc, #48]	; (800cf8c <__NVIC_SetPriorityGrouping+0x44>)
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cf5e:	68ba      	ldr	r2, [r7, #8]
 800cf60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cf64:	4013      	ands	r3, r2
 800cf66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800cf70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800cf74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf78:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800cf7a:	4a04      	ldr	r2, [pc, #16]	; (800cf8c <__NVIC_SetPriorityGrouping+0x44>)
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	60d3      	str	r3, [r2, #12]
}
 800cf80:	3714      	adds	r7, #20
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	e000ed00 	.word	0xe000ed00

0800cf90 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800cf96:	2001      	movs	r0, #1
 800cf98:	f7ff ffd6 	bl	800cf48 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800cf9c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800cf9e:	4b21      	ldr	r3, [pc, #132]	; (800d024 <SystemCoreSetup+0x94>)
 800cfa0:	4a21      	ldr	r2, [pc, #132]	; (800d028 <SystemCoreSetup+0x98>)
 800cfa2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cfa4:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800cfa8:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800cfaa:	4a1e      	ldr	r2, [pc, #120]	; (800d024 <SystemCoreSetup+0x94>)
 800cfac:	4b1d      	ldr	r3, [pc, #116]	; (800d024 <SystemCoreSetup+0x94>)
 800cfae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cfb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800cfba:	4b1c      	ldr	r3, [pc, #112]	; (800d02c <SystemCoreSetup+0x9c>)
 800cfbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfc0:	3314      	adds	r3, #20
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f023 030f 	bic.w	r3, r3, #15
 800cfcc:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f043 0304 	orr.w	r3, r3, #4
 800cfd4:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800cfd6:	4b15      	ldr	r3, [pc, #84]	; (800d02c <SystemCoreSetup+0x9c>)
 800cfd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfdc:	3314      	adds	r3, #20
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 800cfe2:	4a10      	ldr	r2, [pc, #64]	; (800d024 <SystemCoreSetup+0x94>)
 800cfe4:	4b0f      	ldr	r3, [pc, #60]	; (800d024 <SystemCoreSetup+0x94>)
 800cfe6:	695b      	ldr	r3, [r3, #20]
 800cfe8:	f023 0310 	bic.w	r3, r3, #16
 800cfec:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 800cfee:	4a0d      	ldr	r2, [pc, #52]	; (800d024 <SystemCoreSetup+0x94>)
 800cff0:	4b0c      	ldr	r3, [pc, #48]	; (800d024 <SystemCoreSetup+0x94>)
 800cff2:	695b      	ldr	r3, [r3, #20]
 800cff4:	f023 0308 	bic.w	r3, r3, #8
 800cff8:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800cffa:	4a0a      	ldr	r2, [pc, #40]	; (800d024 <SystemCoreSetup+0x94>)
 800cffc:	4b09      	ldr	r3, [pc, #36]	; (800d024 <SystemCoreSetup+0x94>)
 800cffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d004:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 800d006:	4a07      	ldr	r2, [pc, #28]	; (800d024 <SystemCoreSetup+0x94>)
 800d008:	4b06      	ldr	r3, [pc, #24]	; (800d024 <SystemCoreSetup+0x94>)
 800d00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d010:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 800d012:	4a04      	ldr	r2, [pc, #16]	; (800d024 <SystemCoreSetup+0x94>)
 800d014:	4b03      	ldr	r3, [pc, #12]	; (800d024 <SystemCoreSetup+0x94>)
 800d016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d01c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	e000ed00 	.word	0xe000ed00
 800d028:	08000000 	.word	0x08000000
 800d02c:	58001000 	.word	0x58001000

0800d030 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 800d038:	2300      	movs	r3, #0
 800d03a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2201      	movs	r2, #1
 800d040:	701a      	strb	r2, [r3, #0]

  return (status);
 800d042:	7bfb      	ldrb	r3, [r7, #15]
}
 800d044:	4618      	mov	r0, r3
 800d046:	3714      	adds	r7, #20
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 800d050:	b480      	push	{r7}
 800d052:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 800d054:	4b02      	ldr	r3, [pc, #8]	; (800d060 <OSCHP_GetFrequency+0x10>)
}
 800d056:	4618      	mov	r0, r3
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr
 800d060:	00b71b00 	.word	0x00b71b00

0800d064 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 800d06c:	4906      	ldr	r1, [pc, #24]	; (800d088 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 800d06e:	4b06      	ldr	r3, [pc, #24]	; (800d088 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 800d070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d072:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4313      	orrs	r3, r2
 800d07a:	638b      	str	r3, [r1, #56]	; 0x38
                      ((uint32_t)source);
}
 800d07c:	370c      	adds	r7, #12
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	50004600 	.word	0x50004600

0800d08c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800d08c:	b5b0      	push	{r4, r5, r7, lr}
 800d08e:	b086      	sub	sp, #24
 800d090:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 800d092:	4b15      	ldr	r3, [pc, #84]	; (800d0e8 <SystemCoreClockSetup+0x5c>)
 800d094:	1d3c      	adds	r4, r7, #4
 800d096:	461d      	mov	r5, r3
 800d098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d09a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d09c:	682b      	ldr	r3, [r5, #0]
 800d09e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 800d0a0:	1d3b      	adds	r3, r7, #4
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7f4 f8cc 	bl	8001240 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	f7f4 f9eb 	bl	8001484 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 800d0ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d0b2:	f7f4 f99f 	bl	80013f4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 800d0b6:	2006      	movs	r0, #6
 800d0b8:	f7f4 fa70 	bl	800159c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 800d0bc:	2003      	movs	r0, #3
 800d0be:	2164      	movs	r1, #100	; 0x64
 800d0c0:	f7f4 fb0c 	bl	80016dc <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	f7ff ffcd 	bl	800d064 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 800d0ca:	2002      	movs	r0, #2
 800d0cc:	f7f4 faa2 	bl	8001614 <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	f7f4 f9a3 	bl	800141c <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 800d0d6:	2001      	movs	r0, #1
 800d0d8:	f7f4 fa88 	bl	80015ec <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800d0dc:	2001      	movs	r0, #1
 800d0de:	f7f4 fa71 	bl	80015c4 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 800d0e2:	3718      	adds	r7, #24
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bdb0      	pop	{r4, r5, r7, pc}
 800d0e8:	0801168c 	.word	0x0801168c

0800d0ec <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800d0f6:	481d      	ldr	r0, [pc, #116]	; (800d16c <DAVE_Init+0x80>)
 800d0f8:	f7ff ff9a 	bl	800d030 <CLOCK_XMC4_Init>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800d100:	79fb      	ldrb	r3, [r7, #7]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d104      	bne.n	800d110 <DAVE_Init+0x24>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 800d106:	481a      	ldr	r0, [pc, #104]	; (800d170 <DAVE_Init+0x84>)
 800d108:	f7f5 fe2c 	bl	8002d64 <UART_Init>
 800d10c:	4603      	mov	r3, r0
 800d10e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800d110:	79fb      	ldrb	r3, [r7, #7]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d104      	bne.n	800d120 <DAVE_Init+0x34>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 800d116:	4817      	ldr	r0, [pc, #92]	; (800d174 <DAVE_Init+0x88>)
 800d118:	f7f7 fb22 	bl	8004760 <INTERRUPT_Init>
 800d11c:	4603      	mov	r3, r0
 800d11e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800d120:	79fb      	ldrb	r3, [r7, #7]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d104      	bne.n	800d130 <DAVE_Init+0x44>
  {
	 /**  Initialization of ETH_LWIP APP instance ETH_LWIP_0 */
	 init_status = (DAVE_STATUS_t)ETH_LWIP_Init(&ETH_LWIP_0); 
 800d126:	4814      	ldr	r0, [pc, #80]	; (800d178 <DAVE_Init+0x8c>)
 800d128:	f7ff fda6 	bl	800cc78 <ETH_LWIP_Init>
 800d12c:	4603      	mov	r3, r0
 800d12e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800d130:	79fb      	ldrb	r3, [r7, #7]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d104      	bne.n	800d140 <DAVE_Init+0x54>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_0 */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_0); 
 800d136:	4811      	ldr	r0, [pc, #68]	; (800d17c <DAVE_Init+0x90>)
 800d138:	f7f6 fce0 	bl	8003afc <SPI_MASTER_Init>
 800d13c:	4603      	mov	r3, r0
 800d13e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800d140:	79fb      	ldrb	r3, [r7, #7]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d104      	bne.n	800d150 <DAVE_Init+0x64>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 800d146:	480e      	ldr	r0, [pc, #56]	; (800d180 <DAVE_Init+0x94>)
 800d148:	f7f6 f8c0 	bl	80032cc <TIMER_Init>
 800d14c:	4603      	mov	r3, r0
 800d14e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800d150:	79fb      	ldrb	r3, [r7, #7]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d104      	bne.n	800d160 <DAVE_Init+0x74>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_1 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_1); 
 800d156:	480b      	ldr	r0, [pc, #44]	; (800d184 <DAVE_Init+0x98>)
 800d158:	f7f7 fb02 	bl	8004760 <INTERRUPT_Init>
 800d15c:	4603      	mov	r3, r0
 800d15e:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 800d160:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800d162:	4618      	mov	r0, r3
 800d164:	3708      	adds	r7, #8
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	1ffe8b6c 	.word	0x1ffe8b6c
 800d170:	1ffe8800 	.word	0x1ffe8800
 800d174:	080115a0 	.word	0x080115a0
 800d178:	1ffe8b60 	.word	0x1ffe8b60
 800d17c:	1ffe8880 	.word	0x1ffe8880
 800d180:	1ffe8814 	.word	0x1ffe8814
 800d184:	080115a4 	.word	0x080115a4

0800d188 <CCU43_1_IRQHandler>:





void gyroTimerInterrupt(){
 800d188:	b480      	push	{r7}
 800d18a:	af00      	add	r7, sp, #0
	gpsOutputready    = true;
 800d18c:	4b03      	ldr	r3, [pc, #12]	; (800d19c <CCU43_1_IRQHandler+0x14>)
 800d18e:	2201      	movs	r2, #1
 800d190:	701a      	strb	r2, [r3, #0]
}
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	1ffe8efc 	.word	0x1ffe8efc

0800d1a0 <main>:




int main(void)
{
 800d1a0:	b5b0      	push	{r4, r5, r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 800d1a6:	f7ff ffa1 	bl	800d0ec <DAVE_Init>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	70fb      	strb	r3, [r7, #3]


  initGPS();
 800d1ae:	f7f3 fd81 	bl	8000cb4 <initGPS>

  firstSentenceBuffer = receivedSentence;
 800d1b2:	4b6e      	ldr	r3, [pc, #440]	; (800d36c <main+0x1cc>)
 800d1b4:	4a6e      	ldr	r2, [pc, #440]	; (800d370 <main+0x1d0>)
 800d1b6:	601a      	str	r2, [r3, #0]
  secondSentenceBuffer = receivedSentence2;
 800d1b8:	4b6e      	ldr	r3, [pc, #440]	; (800d374 <main+0x1d4>)
 800d1ba:	4a6f      	ldr	r2, [pc, #444]	; (800d378 <main+0x1d8>)
 800d1bc:	601a      	str	r2, [r3, #0]


  outputBufferStart = firstSentenceBuffer;
 800d1be:	4b6b      	ldr	r3, [pc, #428]	; (800d36c <main+0x1cc>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4a6e      	ldr	r2, [pc, #440]	; (800d37c <main+0x1dc>)
 800d1c4:	6013      	str	r3, [r2, #0]
  outputBufferCurrent = firstSentenceBuffer;
 800d1c6:	4b69      	ldr	r3, [pc, #420]	; (800d36c <main+0x1cc>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a6d      	ldr	r2, [pc, #436]	; (800d380 <main+0x1e0>)
 800d1cc:	6013      	str	r3, [r2, #0]
  outputBufferEnd = firstSentenceBuffer+199;
 800d1ce:	4b67      	ldr	r3, [pc, #412]	; (800d36c <main+0x1cc>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	33c7      	adds	r3, #199	; 0xc7
 800d1d4:	4a6b      	ldr	r2, [pc, #428]	; (800d384 <main+0x1e4>)
 800d1d6:	6013      	str	r3, [r2, #0]

  secondOutputBufferStart = secondSentenceBuffer;
 800d1d8:	4b66      	ldr	r3, [pc, #408]	; (800d374 <main+0x1d4>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4a6a      	ldr	r2, [pc, #424]	; (800d388 <main+0x1e8>)
 800d1de:	6013      	str	r3, [r2, #0]
  secondOutputBufferCurrent = secondSentenceBuffer;
 800d1e0:	4b64      	ldr	r3, [pc, #400]	; (800d374 <main+0x1d4>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a69      	ldr	r2, [pc, #420]	; (800d38c <main+0x1ec>)
 800d1e6:	6013      	str	r3, [r2, #0]
  secondOutputBufferEnd = secondSentenceBuffer;
 800d1e8:	4b62      	ldr	r3, [pc, #392]	; (800d374 <main+0x1d4>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a68      	ldr	r2, [pc, #416]	; (800d390 <main+0x1f0>)
 800d1ee:	6013      	str	r3, [r2, #0]


  cycledelay((uint32_t)(100000 * 2));
 800d1f0:	4868      	ldr	r0, [pc, #416]	; (800d394 <main+0x1f4>)
 800d1f2:	f7f3 f92d 	bl	8000450 <cycledelay>

  udp_initialize();
 800d1f6:	f7f3 fdf5 	bl	8000de4 <udp_initialize>

  cycledelay(140000* 50);
 800d1fa:	4867      	ldr	r0, [pc, #412]	; (800d398 <main+0x1f8>)
 800d1fc:	f7f3 f928 	bl	8000450 <cycledelay>

  bmi055_start();
 800d200:	f7f3 fb02 	bl	8000808 <bmi055_start>

  if(status != DAVE_STATUS_SUCCESS)
 800d204:	78fb      	ldrb	r3, [r7, #3]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d000      	beq.n	800d20c <main+0x6c>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 800d20a:	e7fe      	b.n	800d20a <main+0x6a>
  }

  long polltime = 0;
 800d20c:	2300      	movs	r3, #0
 800d20e:	607b      	str	r3, [r7, #4]

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {

	  sys_check_timeouts();
 800d210:	f7ff f986 	bl	800c520 <sys_check_timeouts>
	  polltime++;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	3301      	adds	r3, #1
 800d218:	607b      	str	r3, [r7, #4]
	  if( polltime > 60000){//600000){
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f64e 2260 	movw	r2, #60000	; 0xea60
 800d220:	4293      	cmp	r3, r2
 800d222:	f340 8213 	ble.w	800d64c <main+0x4ac>
		  bmi055_poll_data();
 800d226:	f7f3 fb27 	bl	8000878 <bmi055_poll_data>
		  bmi055_apply_gyro_all_angles();
 800d22a:	f7f3 f94d 	bl	80004c8 <bmi055_apply_gyro_all_angles>
		  bmi055_apply_accel_all_angles();
 800d22e:	f7f3 f977 	bl	8000520 <bmi055_apply_accel_all_angles>


// ms berekenen

		  // min berekenen
				if(msMaxInitialized){
 800d232:	4b5a      	ldr	r3, [pc, #360]	; (800d39c <main+0x1fc>)
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d03f      	beq.n	800d2ba <main+0x11a>
					max_ms_xValue =  max(ms_xValue, max_ms_xValue);
 800d23a:	4b59      	ldr	r3, [pc, #356]	; (800d3a0 <main+0x200>)
 800d23c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d240:	4b58      	ldr	r3, [pc, #352]	; (800d3a4 <main+0x204>)
 800d242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d246:	f001 fb23 	bl	800e890 <__aeabi_dcmpgt>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d003      	beq.n	800d258 <main+0xb8>
 800d250:	4b53      	ldr	r3, [pc, #332]	; (800d3a0 <main+0x200>)
 800d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d256:	e002      	b.n	800d25e <main+0xbe>
 800d258:	4b52      	ldr	r3, [pc, #328]	; (800d3a4 <main+0x204>)
 800d25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25e:	4951      	ldr	r1, [pc, #324]	; (800d3a4 <main+0x204>)
 800d260:	e9c1 2300 	strd	r2, r3, [r1]
					max_ms_yValue =  max(ms_yValue, max_ms_yValue);
 800d264:	4b50      	ldr	r3, [pc, #320]	; (800d3a8 <main+0x208>)
 800d266:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d26a:	4b50      	ldr	r3, [pc, #320]	; (800d3ac <main+0x20c>)
 800d26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d270:	f001 fb0e 	bl	800e890 <__aeabi_dcmpgt>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d003      	beq.n	800d282 <main+0xe2>
 800d27a:	4b4b      	ldr	r3, [pc, #300]	; (800d3a8 <main+0x208>)
 800d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d280:	e002      	b.n	800d288 <main+0xe8>
 800d282:	4b4a      	ldr	r3, [pc, #296]	; (800d3ac <main+0x20c>)
 800d284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d288:	4948      	ldr	r1, [pc, #288]	; (800d3ac <main+0x20c>)
 800d28a:	e9c1 2300 	strd	r2, r3, [r1]
					max_ms_zValue =  max(ms_zValue, max_ms_zValue);
 800d28e:	4b48      	ldr	r3, [pc, #288]	; (800d3b0 <main+0x210>)
 800d290:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d294:	4b47      	ldr	r3, [pc, #284]	; (800d3b4 <main+0x214>)
 800d296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29a:	f001 faf9 	bl	800e890 <__aeabi_dcmpgt>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d003      	beq.n	800d2ac <main+0x10c>
 800d2a4:	4b42      	ldr	r3, [pc, #264]	; (800d3b0 <main+0x210>)
 800d2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2aa:	e002      	b.n	800d2b2 <main+0x112>
 800d2ac:	4b41      	ldr	r3, [pc, #260]	; (800d3b4 <main+0x214>)
 800d2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b2:	4940      	ldr	r1, [pc, #256]	; (800d3b4 <main+0x214>)
 800d2b4:	e9c1 2300 	strd	r2, r3, [r1]
 800d2b8:	e014      	b.n	800d2e4 <main+0x144>
				}
				else{
					  max_ms_xValue = ms_xValue;
 800d2ba:	4b39      	ldr	r3, [pc, #228]	; (800d3a0 <main+0x200>)
 800d2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c0:	4938      	ldr	r1, [pc, #224]	; (800d3a4 <main+0x204>)
 800d2c2:	e9c1 2300 	strd	r2, r3, [r1]
					  max_ms_yValue = ms_yValue;
 800d2c6:	4b38      	ldr	r3, [pc, #224]	; (800d3a8 <main+0x208>)
 800d2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2cc:	4937      	ldr	r1, [pc, #220]	; (800d3ac <main+0x20c>)
 800d2ce:	e9c1 2300 	strd	r2, r3, [r1]
					  max_ms_zValue = ms_zValue;
 800d2d2:	4b37      	ldr	r3, [pc, #220]	; (800d3b0 <main+0x210>)
 800d2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d8:	4936      	ldr	r1, [pc, #216]	; (800d3b4 <main+0x214>)
 800d2da:	e9c1 2300 	strd	r2, r3, [r1]
					  msMaxInitialized = true;
 800d2de:	4b2f      	ldr	r3, [pc, #188]	; (800d39c <main+0x1fc>)
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	701a      	strb	r2, [r3, #0]
				}

				//max berekenen

				if(msMinInitialized){
 800d2e4:	4b34      	ldr	r3, [pc, #208]	; (800d3b8 <main+0x218>)
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d06d      	beq.n	800d3c8 <main+0x228>
					min_ms_xValue =  min(ms_xValue, min_ms_xValue);
 800d2ec:	4b2c      	ldr	r3, [pc, #176]	; (800d3a0 <main+0x200>)
 800d2ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d2f2:	4b32      	ldr	r3, [pc, #200]	; (800d3bc <main+0x21c>)
 800d2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f8:	f001 faac 	bl	800e854 <__aeabi_dcmplt>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d003      	beq.n	800d30a <main+0x16a>
 800d302:	4b27      	ldr	r3, [pc, #156]	; (800d3a0 <main+0x200>)
 800d304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d308:	e002      	b.n	800d310 <main+0x170>
 800d30a:	4b2c      	ldr	r3, [pc, #176]	; (800d3bc <main+0x21c>)
 800d30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d310:	492a      	ldr	r1, [pc, #168]	; (800d3bc <main+0x21c>)
 800d312:	e9c1 2300 	strd	r2, r3, [r1]
					min_ms_yValue =  min(ms_yValue, min_ms_yValue);
 800d316:	4b24      	ldr	r3, [pc, #144]	; (800d3a8 <main+0x208>)
 800d318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d31c:	4b28      	ldr	r3, [pc, #160]	; (800d3c0 <main+0x220>)
 800d31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d322:	f001 fa97 	bl	800e854 <__aeabi_dcmplt>
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d003      	beq.n	800d334 <main+0x194>
 800d32c:	4b1e      	ldr	r3, [pc, #120]	; (800d3a8 <main+0x208>)
 800d32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d332:	e002      	b.n	800d33a <main+0x19a>
 800d334:	4b22      	ldr	r3, [pc, #136]	; (800d3c0 <main+0x220>)
 800d336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33a:	4921      	ldr	r1, [pc, #132]	; (800d3c0 <main+0x220>)
 800d33c:	e9c1 2300 	strd	r2, r3, [r1]
					min_ms_zValue =  min(ms_zValue, min_ms_zValue);
 800d340:	4b1b      	ldr	r3, [pc, #108]	; (800d3b0 <main+0x210>)
 800d342:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d346:	4b1f      	ldr	r3, [pc, #124]	; (800d3c4 <main+0x224>)
 800d348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34c:	f001 fa82 	bl	800e854 <__aeabi_dcmplt>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d003      	beq.n	800d35e <main+0x1be>
 800d356:	4b16      	ldr	r3, [pc, #88]	; (800d3b0 <main+0x210>)
 800d358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35c:	e002      	b.n	800d364 <main+0x1c4>
 800d35e:	4b19      	ldr	r3, [pc, #100]	; (800d3c4 <main+0x224>)
 800d360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d364:	4917      	ldr	r1, [pc, #92]	; (800d3c4 <main+0x224>)
 800d366:	e9c1 2300 	strd	r2, r3, [r1]
 800d36a:	e042      	b.n	800d3f2 <main+0x252>
 800d36c:	1ffe8f00 	.word	0x1ffe8f00
 800d370:	1ffe8f08 	.word	0x1ffe8f08
 800d374:	1ffe8ef4 	.word	0x1ffe8ef4
 800d378:	1ffe8e28 	.word	0x1ffe8e28
 800d37c:	1ffe8fd8 	.word	0x1ffe8fd8
 800d380:	1ffe8ef0 	.word	0x1ffe8ef0
 800d384:	1ffe8e20 	.word	0x1ffe8e20
 800d388:	1ffe8f04 	.word	0x1ffe8f04
 800d38c:	1ffe8e14 	.word	0x1ffe8e14
 800d390:	1ffe8e18 	.word	0x1ffe8e18
 800d394:	00030d40 	.word	0x00030d40
 800d398:	006acfc0 	.word	0x006acfc0
 800d39c:	1ffe8e1c 	.word	0x1ffe8e1c
 800d3a0:	1ffe8c00 	.word	0x1ffe8c00
 800d3a4:	1ffe8bf8 	.word	0x1ffe8bf8
 800d3a8:	1ffe8d20 	.word	0x1ffe8d20
 800d3ac:	1ffe8cf0 	.word	0x1ffe8cf0
 800d3b0:	1ffe8df8 	.word	0x1ffe8df8
 800d3b4:	1ffe8bf0 	.word	0x1ffe8bf0
 800d3b8:	1ffe8fdc 	.word	0x1ffe8fdc
 800d3bc:	1ffe8c80 	.word	0x1ffe8c80
 800d3c0:	1ffe8e08 	.word	0x1ffe8e08
 800d3c4:	1ffe8c60 	.word	0x1ffe8c60
				}
				else{
					  min_ms_xValue = ms_xValue;
 800d3c8:	4b6c      	ldr	r3, [pc, #432]	; (800d57c <main+0x3dc>)
 800d3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ce:	496c      	ldr	r1, [pc, #432]	; (800d580 <main+0x3e0>)
 800d3d0:	e9c1 2300 	strd	r2, r3, [r1]
					  min_ms_yValue = ms_yValue;
 800d3d4:	4b6b      	ldr	r3, [pc, #428]	; (800d584 <main+0x3e4>)
 800d3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3da:	496b      	ldr	r1, [pc, #428]	; (800d588 <main+0x3e8>)
 800d3dc:	e9c1 2300 	strd	r2, r3, [r1]
					  min_ms_zValue = ms_zValue;
 800d3e0:	4b6a      	ldr	r3, [pc, #424]	; (800d58c <main+0x3ec>)
 800d3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e6:	496a      	ldr	r1, [pc, #424]	; (800d590 <main+0x3f0>)
 800d3e8:	e9c1 2300 	strd	r2, r3, [r1]
					  msMinInitialized = true;
 800d3ec:	4b69      	ldr	r3, [pc, #420]	; (800d594 <main+0x3f4>)
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	701a      	strb	r2, [r3, #0]

				}

				avg_ms_xValue += ms_xValue;
 800d3f2:	4b69      	ldr	r3, [pc, #420]	; (800d598 <main+0x3f8>)
 800d3f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d3f8:	4b60      	ldr	r3, [pc, #384]	; (800d57c <main+0x3dc>)
 800d3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3fe:	f000 fe05 	bl	800e00c <__adddf3>
 800d402:	4602      	mov	r2, r0
 800d404:	460b      	mov	r3, r1
 800d406:	4964      	ldr	r1, [pc, #400]	; (800d598 <main+0x3f8>)
 800d408:	e9c1 2300 	strd	r2, r3, [r1]
				avg_ms_yValue += ms_yValue;
 800d40c:	4b63      	ldr	r3, [pc, #396]	; (800d59c <main+0x3fc>)
 800d40e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d412:	4b5c      	ldr	r3, [pc, #368]	; (800d584 <main+0x3e4>)
 800d414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d418:	f000 fdf8 	bl	800e00c <__adddf3>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	495e      	ldr	r1, [pc, #376]	; (800d59c <main+0x3fc>)
 800d422:	e9c1 2300 	strd	r2, r3, [r1]
				avg_ms_zValue += ms_zValue;
 800d426:	4b5e      	ldr	r3, [pc, #376]	; (800d5a0 <main+0x400>)
 800d428:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d42c:	4b57      	ldr	r3, [pc, #348]	; (800d58c <main+0x3ec>)
 800d42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d432:	f000 fdeb 	bl	800e00c <__adddf3>
 800d436:	4602      	mov	r2, r0
 800d438:	460b      	mov	r3, r1
 800d43a:	4959      	ldr	r1, [pc, #356]	; (800d5a0 <main+0x400>)
 800d43c:	e9c1 2300 	strd	r2, r3, [r1]

//~ ms berekenen


		  // min berekenen
		if(maxInitialized){
 800d440:	4b58      	ldr	r3, [pc, #352]	; (800d5a4 <main+0x404>)
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d03f      	beq.n	800d4c8 <main+0x328>
			  max_complement_xValue =  max(complement_xValue, max_complement_xValue);
 800d448:	4b57      	ldr	r3, [pc, #348]	; (800d5a8 <main+0x408>)
 800d44a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d44e:	4b57      	ldr	r3, [pc, #348]	; (800d5ac <main+0x40c>)
 800d450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d454:	f001 fa1c 	bl	800e890 <__aeabi_dcmpgt>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d003      	beq.n	800d466 <main+0x2c6>
 800d45e:	4b52      	ldr	r3, [pc, #328]	; (800d5a8 <main+0x408>)
 800d460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d464:	e002      	b.n	800d46c <main+0x2cc>
 800d466:	4b51      	ldr	r3, [pc, #324]	; (800d5ac <main+0x40c>)
 800d468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46c:	494f      	ldr	r1, [pc, #316]	; (800d5ac <main+0x40c>)
 800d46e:	e9c1 2300 	strd	r2, r3, [r1]
			  max_complement_yValue =  max(complement_yValue, max_complement_yValue);
 800d472:	4b4f      	ldr	r3, [pc, #316]	; (800d5b0 <main+0x410>)
 800d474:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d478:	4b4e      	ldr	r3, [pc, #312]	; (800d5b4 <main+0x414>)
 800d47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47e:	f001 fa07 	bl	800e890 <__aeabi_dcmpgt>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d003      	beq.n	800d490 <main+0x2f0>
 800d488:	4b49      	ldr	r3, [pc, #292]	; (800d5b0 <main+0x410>)
 800d48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48e:	e002      	b.n	800d496 <main+0x2f6>
 800d490:	4b48      	ldr	r3, [pc, #288]	; (800d5b4 <main+0x414>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	4947      	ldr	r1, [pc, #284]	; (800d5b4 <main+0x414>)
 800d498:	e9c1 2300 	strd	r2, r3, [r1]
			  max_complement_zValue =  max(complement_zValue, max_complement_zValue);
 800d49c:	4b46      	ldr	r3, [pc, #280]	; (800d5b8 <main+0x418>)
 800d49e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d4a2:	4b46      	ldr	r3, [pc, #280]	; (800d5bc <main+0x41c>)
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	f001 f9f2 	bl	800e890 <__aeabi_dcmpgt>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d003      	beq.n	800d4ba <main+0x31a>
 800d4b2:	4b41      	ldr	r3, [pc, #260]	; (800d5b8 <main+0x418>)
 800d4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b8:	e002      	b.n	800d4c0 <main+0x320>
 800d4ba:	4b40      	ldr	r3, [pc, #256]	; (800d5bc <main+0x41c>)
 800d4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c0:	493e      	ldr	r1, [pc, #248]	; (800d5bc <main+0x41c>)
 800d4c2:	e9c1 2300 	strd	r2, r3, [r1]
 800d4c6:	e014      	b.n	800d4f2 <main+0x352>
		}
		else{
			  max_complement_xValue = complement_xValue;
 800d4c8:	4b37      	ldr	r3, [pc, #220]	; (800d5a8 <main+0x408>)
 800d4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ce:	4937      	ldr	r1, [pc, #220]	; (800d5ac <main+0x40c>)
 800d4d0:	e9c1 2300 	strd	r2, r3, [r1]
			  max_complement_yValue = complement_yValue;
 800d4d4:	4b36      	ldr	r3, [pc, #216]	; (800d5b0 <main+0x410>)
 800d4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4da:	4936      	ldr	r1, [pc, #216]	; (800d5b4 <main+0x414>)
 800d4dc:	e9c1 2300 	strd	r2, r3, [r1]
			  max_complement_zValue = complement_zValue;
 800d4e0:	4b35      	ldr	r3, [pc, #212]	; (800d5b8 <main+0x418>)
 800d4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e6:	4935      	ldr	r1, [pc, #212]	; (800d5bc <main+0x41c>)
 800d4e8:	e9c1 2300 	strd	r2, r3, [r1]
			  maxInitialized = true;
 800d4ec:	4b2d      	ldr	r3, [pc, #180]	; (800d5a4 <main+0x404>)
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	701a      	strb	r2, [r3, #0]
//		  max_complement_yValue = max(gyro_y, max_gyro_yValue);
//		  max_complement_zValue = max(gyro_z, max_gyro_zValue);

		  //max berekenen

		if(minInitialized){
 800d4f2:	4b33      	ldr	r3, [pc, #204]	; (800d5c0 <main+0x420>)
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d06a      	beq.n	800d5d0 <main+0x430>
//				min_complement_xValue = min(gyro_x, min_gyro_xValue);
//				min_complement_yValue = min(gyro_y, min_gyro_yValue);
//				min_complement_zValue = min(gyro_z, min_gyro_zValue);

				min_complement_xValue =  min(complement_xValue, min_complement_xValue);
 800d4fa:	4b2b      	ldr	r3, [pc, #172]	; (800d5a8 <main+0x408>)
 800d4fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d500:	4b30      	ldr	r3, [pc, #192]	; (800d5c4 <main+0x424>)
 800d502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d506:	f001 f9a5 	bl	800e854 <__aeabi_dcmplt>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d003      	beq.n	800d518 <main+0x378>
 800d510:	4b25      	ldr	r3, [pc, #148]	; (800d5a8 <main+0x408>)
 800d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d516:	e002      	b.n	800d51e <main+0x37e>
 800d518:	4b2a      	ldr	r3, [pc, #168]	; (800d5c4 <main+0x424>)
 800d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51e:	4929      	ldr	r1, [pc, #164]	; (800d5c4 <main+0x424>)
 800d520:	e9c1 2300 	strd	r2, r3, [r1]
				min_complement_yValue =  min(complement_yValue, min_complement_yValue);
 800d524:	4b22      	ldr	r3, [pc, #136]	; (800d5b0 <main+0x410>)
 800d526:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d52a:	4b27      	ldr	r3, [pc, #156]	; (800d5c8 <main+0x428>)
 800d52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d530:	f001 f990 	bl	800e854 <__aeabi_dcmplt>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d003      	beq.n	800d542 <main+0x3a2>
 800d53a:	4b1d      	ldr	r3, [pc, #116]	; (800d5b0 <main+0x410>)
 800d53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d540:	e002      	b.n	800d548 <main+0x3a8>
 800d542:	4b21      	ldr	r3, [pc, #132]	; (800d5c8 <main+0x428>)
 800d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d548:	491f      	ldr	r1, [pc, #124]	; (800d5c8 <main+0x428>)
 800d54a:	e9c1 2300 	strd	r2, r3, [r1]
				min_complement_zValue =  min(complement_zValue, min_complement_zValue);
 800d54e:	4b1a      	ldr	r3, [pc, #104]	; (800d5b8 <main+0x418>)
 800d550:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d554:	4b1d      	ldr	r3, [pc, #116]	; (800d5cc <main+0x42c>)
 800d556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55a:	f001 f97b 	bl	800e854 <__aeabi_dcmplt>
 800d55e:	4603      	mov	r3, r0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d003      	beq.n	800d56c <main+0x3cc>
 800d564:	4b14      	ldr	r3, [pc, #80]	; (800d5b8 <main+0x418>)
 800d566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56a:	e002      	b.n	800d572 <main+0x3d2>
 800d56c:	4b17      	ldr	r3, [pc, #92]	; (800d5cc <main+0x42c>)
 800d56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d572:	4916      	ldr	r1, [pc, #88]	; (800d5cc <main+0x42c>)
 800d574:	e9c1 2300 	strd	r2, r3, [r1]
 800d578:	e03f      	b.n	800d5fa <main+0x45a>
 800d57a:	bf00      	nop
 800d57c:	1ffe8c00 	.word	0x1ffe8c00
 800d580:	1ffe8c80 	.word	0x1ffe8c80
 800d584:	1ffe8d20 	.word	0x1ffe8d20
 800d588:	1ffe8e08 	.word	0x1ffe8e08
 800d58c:	1ffe8df8 	.word	0x1ffe8df8
 800d590:	1ffe8c60 	.word	0x1ffe8c60
 800d594:	1ffe8fdc 	.word	0x1ffe8fdc
 800d598:	1ffe8b78 	.word	0x1ffe8b78
 800d59c:	1ffe8d80 	.word	0x1ffe8d80
 800d5a0:	1ffe8c50 	.word	0x1ffe8c50
 800d5a4:	1ffe8fd0 	.word	0x1ffe8fd0
 800d5a8:	1ffe8d28 	.word	0x1ffe8d28
 800d5ac:	1ffe8c30 	.word	0x1ffe8c30
 800d5b0:	1ffe8c68 	.word	0x1ffe8c68
 800d5b4:	1ffe8c78 	.word	0x1ffe8c78
 800d5b8:	1ffe8c70 	.word	0x1ffe8c70
 800d5bc:	1ffe8d00 	.word	0x1ffe8d00
 800d5c0:	1ffe8e24 	.word	0x1ffe8e24
 800d5c4:	1ffe8c10 	.word	0x1ffe8c10
 800d5c8:	1ffe8c58 	.word	0x1ffe8c58
 800d5cc:	1ffe8c40 	.word	0x1ffe8c40
		  }
		  else{
			  min_complement_xValue = complement_xValue;
 800d5d0:	4b95      	ldr	r3, [pc, #596]	; (800d828 <main+0x688>)
 800d5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d6:	4995      	ldr	r1, [pc, #596]	; (800d82c <main+0x68c>)
 800d5d8:	e9c1 2300 	strd	r2, r3, [r1]
			  min_complement_yValue = complement_yValue;
 800d5dc:	4b94      	ldr	r3, [pc, #592]	; (800d830 <main+0x690>)
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	4994      	ldr	r1, [pc, #592]	; (800d834 <main+0x694>)
 800d5e4:	e9c1 2300 	strd	r2, r3, [r1]
			  min_complement_zValue = complement_zValue;
 800d5e8:	4b93      	ldr	r3, [pc, #588]	; (800d838 <main+0x698>)
 800d5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ee:	4993      	ldr	r1, [pc, #588]	; (800d83c <main+0x69c>)
 800d5f0:	e9c1 2300 	strd	r2, r3, [r1]
			  minInitialized = true;
 800d5f4:	4b92      	ldr	r3, [pc, #584]	; (800d840 <main+0x6a0>)
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	701a      	strb	r2, [r3, #0]

		  }

		  //avg berekenen

		  avg_complement_xValue += complement_xValue;
 800d5fa:	4b92      	ldr	r3, [pc, #584]	; (800d844 <main+0x6a4>)
 800d5fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d600:	4b89      	ldr	r3, [pc, #548]	; (800d828 <main+0x688>)
 800d602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d606:	f000 fd01 	bl	800e00c <__adddf3>
 800d60a:	4602      	mov	r2, r0
 800d60c:	460b      	mov	r3, r1
 800d60e:	498d      	ldr	r1, [pc, #564]	; (800d844 <main+0x6a4>)
 800d610:	e9c1 2300 	strd	r2, r3, [r1]
		  avg_complement_yValue += complement_yValue;
 800d614:	4b8c      	ldr	r3, [pc, #560]	; (800d848 <main+0x6a8>)
 800d616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d61a:	4b85      	ldr	r3, [pc, #532]	; (800d830 <main+0x690>)
 800d61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d620:	f000 fcf4 	bl	800e00c <__adddf3>
 800d624:	4602      	mov	r2, r0
 800d626:	460b      	mov	r3, r1
 800d628:	4987      	ldr	r1, [pc, #540]	; (800d848 <main+0x6a8>)
 800d62a:	e9c1 2300 	strd	r2, r3, [r1]
		  avg_complement_zValue += complement_zValue;
 800d62e:	4b87      	ldr	r3, [pc, #540]	; (800d84c <main+0x6ac>)
 800d630:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d634:	4b80      	ldr	r3, [pc, #512]	; (800d838 <main+0x698>)
 800d636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63a:	f000 fce7 	bl	800e00c <__adddf3>
 800d63e:	4602      	mov	r2, r0
 800d640:	460b      	mov	r3, r1
 800d642:	4982      	ldr	r1, [pc, #520]	; (800d84c <main+0x6ac>)
 800d644:	e9c1 2300 	strd	r2, r3, [r1]
//		  char* c_v = &v;
//		  sprintf(sprintString,"gyro: %i, %i,  %i", gyro_xValue, gyro_yValue, gyro_zValue);
//		  udp_send_event(sprintString);
		 // udp_send_event2(c_v);
//		  __enable_irq();
		  polltime = 0;
 800d648:	2300      	movs	r3, #0
 800d64a:	607b      	str	r3, [r7, #4]
	  }
	  if(gpsOutputready){
 800d64c:	4b80      	ldr	r3, [pc, #512]	; (800d850 <main+0x6b0>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	f000 81af 	beq.w	800d9b4 <main+0x814>
		  avg_complement_xValue = avg_complement_xValue/num_of_samples;
 800d656:	4b7b      	ldr	r3, [pc, #492]	; (800d844 <main+0x6a4>)
 800d658:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d65c:	4b7d      	ldr	r3, [pc, #500]	; (800d854 <main+0x6b4>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4618      	mov	r0, r3
 800d662:	f000 fe1f 	bl	800e2a4 <__aeabi_i2d>
 800d666:	4602      	mov	r2, r0
 800d668:	460b      	mov	r3, r1
 800d66a:	4620      	mov	r0, r4
 800d66c:	4629      	mov	r1, r5
 800d66e:	f000 ffa9 	bl	800e5c4 <__aeabi_ddiv>
 800d672:	4602      	mov	r2, r0
 800d674:	460b      	mov	r3, r1
 800d676:	4973      	ldr	r1, [pc, #460]	; (800d844 <main+0x6a4>)
 800d678:	e9c1 2300 	strd	r2, r3, [r1]
		  avg_complement_yValue = avg_complement_yValue/num_of_samples;
 800d67c:	4b72      	ldr	r3, [pc, #456]	; (800d848 <main+0x6a8>)
 800d67e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d682:	4b74      	ldr	r3, [pc, #464]	; (800d854 <main+0x6b4>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4618      	mov	r0, r3
 800d688:	f000 fe0c 	bl	800e2a4 <__aeabi_i2d>
 800d68c:	4602      	mov	r2, r0
 800d68e:	460b      	mov	r3, r1
 800d690:	4620      	mov	r0, r4
 800d692:	4629      	mov	r1, r5
 800d694:	f000 ff96 	bl	800e5c4 <__aeabi_ddiv>
 800d698:	4602      	mov	r2, r0
 800d69a:	460b      	mov	r3, r1
 800d69c:	496a      	ldr	r1, [pc, #424]	; (800d848 <main+0x6a8>)
 800d69e:	e9c1 2300 	strd	r2, r3, [r1]
		  avg_complement_zValue = avg_complement_zValue/num_of_samples;
 800d6a2:	4b6a      	ldr	r3, [pc, #424]	; (800d84c <main+0x6ac>)
 800d6a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d6a8:	4b6a      	ldr	r3, [pc, #424]	; (800d854 <main+0x6b4>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f000 fdf9 	bl	800e2a4 <__aeabi_i2d>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	4629      	mov	r1, r5
 800d6ba:	f000 ff83 	bl	800e5c4 <__aeabi_ddiv>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	4962      	ldr	r1, [pc, #392]	; (800d84c <main+0x6ac>)
 800d6c4:	e9c1 2300 	strd	r2, r3, [r1]

		  avg_ms_xValue = avg_ms_xValue/num_of_samples;
 800d6c8:	4b63      	ldr	r3, [pc, #396]	; (800d858 <main+0x6b8>)
 800d6ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d6ce:	4b61      	ldr	r3, [pc, #388]	; (800d854 <main+0x6b4>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 fde6 	bl	800e2a4 <__aeabi_i2d>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	460b      	mov	r3, r1
 800d6dc:	4620      	mov	r0, r4
 800d6de:	4629      	mov	r1, r5
 800d6e0:	f000 ff70 	bl	800e5c4 <__aeabi_ddiv>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	495b      	ldr	r1, [pc, #364]	; (800d858 <main+0x6b8>)
 800d6ea:	e9c1 2300 	strd	r2, r3, [r1]
		  avg_ms_yValue = avg_ms_yValue/num_of_samples;
 800d6ee:	4b5b      	ldr	r3, [pc, #364]	; (800d85c <main+0x6bc>)
 800d6f0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d6f4:	4b57      	ldr	r3, [pc, #348]	; (800d854 <main+0x6b4>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f000 fdd3 	bl	800e2a4 <__aeabi_i2d>
 800d6fe:	4602      	mov	r2, r0
 800d700:	460b      	mov	r3, r1
 800d702:	4620      	mov	r0, r4
 800d704:	4629      	mov	r1, r5
 800d706:	f000 ff5d 	bl	800e5c4 <__aeabi_ddiv>
 800d70a:	4602      	mov	r2, r0
 800d70c:	460b      	mov	r3, r1
 800d70e:	4953      	ldr	r1, [pc, #332]	; (800d85c <main+0x6bc>)
 800d710:	e9c1 2300 	strd	r2, r3, [r1]
		  avg_ms_zValue = avg_ms_zValue/num_of_samples;
 800d714:	4b52      	ldr	r3, [pc, #328]	; (800d860 <main+0x6c0>)
 800d716:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d71a:	4b4e      	ldr	r3, [pc, #312]	; (800d854 <main+0x6b4>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4618      	mov	r0, r3
 800d720:	f000 fdc0 	bl	800e2a4 <__aeabi_i2d>
 800d724:	4602      	mov	r2, r0
 800d726:	460b      	mov	r3, r1
 800d728:	4620      	mov	r0, r4
 800d72a:	4629      	mov	r1, r5
 800d72c:	f000 ff4a 	bl	800e5c4 <__aeabi_ddiv>
 800d730:	4602      	mov	r2, r0
 800d732:	460b      	mov	r3, r1
 800d734:	494a      	ldr	r1, [pc, #296]	; (800d860 <main+0x6c0>)
 800d736:	e9c1 2300 	strd	r2, r3, [r1]
//		  bmi_gps_data.max_x = max_complement_xValue;
//		  bmi_gps_data.max_y = max_complement_yValue;
//		  bmi_gps_data.max_z = max_complement_zValue;


		  bmi_gps_data.avg_x = avg_complement_xValue;
 800d73a:	4b42      	ldr	r3, [pc, #264]	; (800d844 <main+0x6a4>)
 800d73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d740:	4948      	ldr	r1, [pc, #288]	; (800d864 <main+0x6c4>)
 800d742:	e9c1 2300 	strd	r2, r3, [r1]
		  bmi_gps_data.avg_y = avg_complement_yValue;
 800d746:	4b40      	ldr	r3, [pc, #256]	; (800d848 <main+0x6a8>)
 800d748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74c:	4945      	ldr	r1, [pc, #276]	; (800d864 <main+0x6c4>)
 800d74e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  bmi_gps_data.avg_z = avg_complement_zValue;
 800d752:	4b3e      	ldr	r3, [pc, #248]	; (800d84c <main+0x6ac>)
 800d754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d758:	4942      	ldr	r1, [pc, #264]	; (800d864 <main+0x6c4>)
 800d75a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  bmi_gps_data.min_x = min_complement_xValue;
 800d75e:	4b33      	ldr	r3, [pc, #204]	; (800d82c <main+0x68c>)
 800d760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d764:	493f      	ldr	r1, [pc, #252]	; (800d864 <main+0x6c4>)
 800d766:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  bmi_gps_data.min_y = min_complement_yValue;
 800d76a:	4b32      	ldr	r3, [pc, #200]	; (800d834 <main+0x694>)
 800d76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d770:	493c      	ldr	r1, [pc, #240]	; (800d864 <main+0x6c4>)
 800d772:	e9c1 2308 	strd	r2, r3, [r1, #32]
		  bmi_gps_data.min_z = min_complement_zValue;
 800d776:	4b31      	ldr	r3, [pc, #196]	; (800d83c <main+0x69c>)
 800d778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77c:	4939      	ldr	r1, [pc, #228]	; (800d864 <main+0x6c4>)
 800d77e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		  bmi_gps_data.max_x = max_complement_xValue;
 800d782:	4b39      	ldr	r3, [pc, #228]	; (800d868 <main+0x6c8>)
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	4936      	ldr	r1, [pc, #216]	; (800d864 <main+0x6c4>)
 800d78a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		  bmi_gps_data.max_y = max_complement_yValue;
 800d78e:	4b37      	ldr	r3, [pc, #220]	; (800d86c <main+0x6cc>)
 800d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d794:	4933      	ldr	r1, [pc, #204]	; (800d864 <main+0x6c4>)
 800d796:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		  bmi_gps_data.max_z = max_complement_zValue;
 800d79a:	4b35      	ldr	r3, [pc, #212]	; (800d870 <main+0x6d0>)
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	4930      	ldr	r1, [pc, #192]	; (800d864 <main+0x6c4>)
 800d7a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

		  bmi_ms_data.avg_x = avg_ms_xValue;
 800d7a6:	4b2c      	ldr	r3, [pc, #176]	; (800d858 <main+0x6b8>)
 800d7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ac:	4931      	ldr	r1, [pc, #196]	; (800d874 <main+0x6d4>)
 800d7ae:	e9c1 2300 	strd	r2, r3, [r1]
		  bmi_ms_data.avg_y = avg_ms_yValue;
 800d7b2:	4b2a      	ldr	r3, [pc, #168]	; (800d85c <main+0x6bc>)
 800d7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b8:	492e      	ldr	r1, [pc, #184]	; (800d874 <main+0x6d4>)
 800d7ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  bmi_ms_data.avg_z = avg_ms_zValue;
 800d7be:	4b28      	ldr	r3, [pc, #160]	; (800d860 <main+0x6c0>)
 800d7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c4:	492b      	ldr	r1, [pc, #172]	; (800d874 <main+0x6d4>)
 800d7c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  bmi_ms_data.min_x = min_ms_xValue;
 800d7ca:	4b2b      	ldr	r3, [pc, #172]	; (800d878 <main+0x6d8>)
 800d7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d0:	4928      	ldr	r1, [pc, #160]	; (800d874 <main+0x6d4>)
 800d7d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  bmi_ms_data.min_y = min_ms_yValue;
 800d7d6:	4b29      	ldr	r3, [pc, #164]	; (800d87c <main+0x6dc>)
 800d7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7dc:	4925      	ldr	r1, [pc, #148]	; (800d874 <main+0x6d4>)
 800d7de:	e9c1 2308 	strd	r2, r3, [r1, #32]
		  bmi_ms_data.min_z = min_ms_zValue;
 800d7e2:	4b27      	ldr	r3, [pc, #156]	; (800d880 <main+0x6e0>)
 800d7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e8:	4922      	ldr	r1, [pc, #136]	; (800d874 <main+0x6d4>)
 800d7ea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		  bmi_ms_data.max_x = max_ms_xValue;
 800d7ee:	4b25      	ldr	r3, [pc, #148]	; (800d884 <main+0x6e4>)
 800d7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f4:	491f      	ldr	r1, [pc, #124]	; (800d874 <main+0x6d4>)
 800d7f6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		  bmi_ms_data.max_y = max_ms_yValue;
 800d7fa:	4b23      	ldr	r3, [pc, #140]	; (800d888 <main+0x6e8>)
 800d7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d800:	491c      	ldr	r1, [pc, #112]	; (800d874 <main+0x6d4>)
 800d802:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		  bmi_ms_data.max_z = max_ms_zValue;
 800d806:	4b21      	ldr	r3, [pc, #132]	; (800d88c <main+0x6ec>)
 800d808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80c:	4919      	ldr	r1, [pc, #100]	; (800d874 <main+0x6d4>)
 800d80e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
//		  bmi_gps_data.min_z = 4;
//		  bmi_gps_data.max_x = 5;
//		  bmi_gps_data.max_y = 5;
//		  bmi_gps_data.max_z = 5;

		  udp_send_event_ms(&bmi_ms_data);
 800d812:	4818      	ldr	r0, [pc, #96]	; (800d874 <main+0x6d4>)
 800d814:	f7f3 fb6c 	bl	8000ef0 <udp_send_event_ms>
		  udp_send_event_r(&bmi_gps_data);
 800d818:	4812      	ldr	r0, [pc, #72]	; (800d864 <main+0x6c4>)
 800d81a:	f7f3 faf5 	bl	8000e08 <udp_send_event_r>

		  num_of_samples = 0;
 800d81e:	4b0d      	ldr	r3, [pc, #52]	; (800d854 <main+0x6b4>)
 800d820:	2200      	movs	r2, #0
 800d822:	601a      	str	r2, [r3, #0]
 800d824:	e034      	b.n	800d890 <main+0x6f0>
 800d826:	bf00      	nop
 800d828:	1ffe8d28 	.word	0x1ffe8d28
 800d82c:	1ffe8c10 	.word	0x1ffe8c10
 800d830:	1ffe8c68 	.word	0x1ffe8c68
 800d834:	1ffe8c58 	.word	0x1ffe8c58
 800d838:	1ffe8c70 	.word	0x1ffe8c70
 800d83c:	1ffe8c40 	.word	0x1ffe8c40
 800d840:	1ffe8e24 	.word	0x1ffe8e24
 800d844:	1ffe8d30 	.word	0x1ffe8d30
 800d848:	1ffe8d10 	.word	0x1ffe8d10
 800d84c:	1ffe8c90 	.word	0x1ffe8c90
 800d850:	1ffe8efc 	.word	0x1ffe8efc
 800d854:	1ffe8ce8 	.word	0x1ffe8ce8
 800d858:	1ffe8b78 	.word	0x1ffe8b78
 800d85c:	1ffe8d80 	.word	0x1ffe8d80
 800d860:	1ffe8c50 	.word	0x1ffe8c50
 800d864:	1ffe8ca0 	.word	0x1ffe8ca0
 800d868:	1ffe8c30 	.word	0x1ffe8c30
 800d86c:	1ffe8c78 	.word	0x1ffe8c78
 800d870:	1ffe8d00 	.word	0x1ffe8d00
 800d874:	1ffe8d38 	.word	0x1ffe8d38
 800d878:	1ffe8c80 	.word	0x1ffe8c80
 800d87c:	1ffe8e08 	.word	0x1ffe8e08
 800d880:	1ffe8c60 	.word	0x1ffe8c60
 800d884:	1ffe8bf8 	.word	0x1ffe8bf8
 800d888:	1ffe8cf0 	.word	0x1ffe8cf0
 800d88c:	1ffe8bf0 	.word	0x1ffe8bf0
		  max_complement_xValue = 0;
 800d890:	494c      	ldr	r1, [pc, #304]	; (800d9c4 <main+0x824>)
 800d892:	f04f 0200 	mov.w	r2, #0
 800d896:	f04f 0300 	mov.w	r3, #0
 800d89a:	e9c1 2300 	strd	r2, r3, [r1]
		  max_complement_yValue = 0;
 800d89e:	494a      	ldr	r1, [pc, #296]	; (800d9c8 <main+0x828>)
 800d8a0:	f04f 0200 	mov.w	r2, #0
 800d8a4:	f04f 0300 	mov.w	r3, #0
 800d8a8:	e9c1 2300 	strd	r2, r3, [r1]
		  max_complement_zValue = 0;
 800d8ac:	4947      	ldr	r1, [pc, #284]	; (800d9cc <main+0x82c>)
 800d8ae:	f04f 0200 	mov.w	r2, #0
 800d8b2:	f04f 0300 	mov.w	r3, #0
 800d8b6:	e9c1 2300 	strd	r2, r3, [r1]

		  minInitialized = false;
 800d8ba:	4b45      	ldr	r3, [pc, #276]	; (800d9d0 <main+0x830>)
 800d8bc:	2200      	movs	r2, #0
 800d8be:	701a      	strb	r2, [r3, #0]
		  maxInitialized = false;
 800d8c0:	4b44      	ldr	r3, [pc, #272]	; (800d9d4 <main+0x834>)
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	701a      	strb	r2, [r3, #0]

		  min_complement_xValue = 0;
 800d8c6:	4944      	ldr	r1, [pc, #272]	; (800d9d8 <main+0x838>)
 800d8c8:	f04f 0200 	mov.w	r2, #0
 800d8cc:	f04f 0300 	mov.w	r3, #0
 800d8d0:	e9c1 2300 	strd	r2, r3, [r1]
		  min_complement_yValue = 0;
 800d8d4:	4941      	ldr	r1, [pc, #260]	; (800d9dc <main+0x83c>)
 800d8d6:	f04f 0200 	mov.w	r2, #0
 800d8da:	f04f 0300 	mov.w	r3, #0
 800d8de:	e9c1 2300 	strd	r2, r3, [r1]
		  min_complement_zValue = 0;
 800d8e2:	493f      	ldr	r1, [pc, #252]	; (800d9e0 <main+0x840>)
 800d8e4:	f04f 0200 	mov.w	r2, #0
 800d8e8:	f04f 0300 	mov.w	r3, #0
 800d8ec:	e9c1 2300 	strd	r2, r3, [r1]

		  avg_complement_xValue = 0;
 800d8f0:	493c      	ldr	r1, [pc, #240]	; (800d9e4 <main+0x844>)
 800d8f2:	f04f 0200 	mov.w	r2, #0
 800d8f6:	f04f 0300 	mov.w	r3, #0
 800d8fa:	e9c1 2300 	strd	r2, r3, [r1]
		  avg_complement_yValue = 0;
 800d8fe:	493a      	ldr	r1, [pc, #232]	; (800d9e8 <main+0x848>)
 800d900:	f04f 0200 	mov.w	r2, #0
 800d904:	f04f 0300 	mov.w	r3, #0
 800d908:	e9c1 2300 	strd	r2, r3, [r1]
		  avg_complement_zValue = 0;
 800d90c:	4937      	ldr	r1, [pc, #220]	; (800d9ec <main+0x84c>)
 800d90e:	f04f 0200 	mov.w	r2, #0
 800d912:	f04f 0300 	mov.w	r3, #0
 800d916:	e9c1 2300 	strd	r2, r3, [r1]

		  max_ms_xValue = 0;
 800d91a:	4935      	ldr	r1, [pc, #212]	; (800d9f0 <main+0x850>)
 800d91c:	f04f 0200 	mov.w	r2, #0
 800d920:	f04f 0300 	mov.w	r3, #0
 800d924:	e9c1 2300 	strd	r2, r3, [r1]
		  max_ms_yValue = 0;
 800d928:	4932      	ldr	r1, [pc, #200]	; (800d9f4 <main+0x854>)
 800d92a:	f04f 0200 	mov.w	r2, #0
 800d92e:	f04f 0300 	mov.w	r3, #0
 800d932:	e9c1 2300 	strd	r2, r3, [r1]
		  max_ms_zValue = 0;
 800d936:	4930      	ldr	r1, [pc, #192]	; (800d9f8 <main+0x858>)
 800d938:	f04f 0200 	mov.w	r2, #0
 800d93c:	f04f 0300 	mov.w	r3, #0
 800d940:	e9c1 2300 	strd	r2, r3, [r1]

		  msMinInitialized = false;
 800d944:	4b2d      	ldr	r3, [pc, #180]	; (800d9fc <main+0x85c>)
 800d946:	2200      	movs	r2, #0
 800d948:	701a      	strb	r2, [r3, #0]
		  msMaxInitialized = false;
 800d94a:	4b2d      	ldr	r3, [pc, #180]	; (800da00 <main+0x860>)
 800d94c:	2200      	movs	r2, #0
 800d94e:	701a      	strb	r2, [r3, #0]

		  min_ms_xValue = 0;
 800d950:	492c      	ldr	r1, [pc, #176]	; (800da04 <main+0x864>)
 800d952:	f04f 0200 	mov.w	r2, #0
 800d956:	f04f 0300 	mov.w	r3, #0
 800d95a:	e9c1 2300 	strd	r2, r3, [r1]
		  min_ms_yValue = 0;
 800d95e:	492a      	ldr	r1, [pc, #168]	; (800da08 <main+0x868>)
 800d960:	f04f 0200 	mov.w	r2, #0
 800d964:	f04f 0300 	mov.w	r3, #0
 800d968:	e9c1 2300 	strd	r2, r3, [r1]
		  min_ms_zValue = 0;
 800d96c:	4927      	ldr	r1, [pc, #156]	; (800da0c <main+0x86c>)
 800d96e:	f04f 0200 	mov.w	r2, #0
 800d972:	f04f 0300 	mov.w	r3, #0
 800d976:	e9c1 2300 	strd	r2, r3, [r1]

		  avg_ms_xValue = 0;
 800d97a:	4925      	ldr	r1, [pc, #148]	; (800da10 <main+0x870>)
 800d97c:	f04f 0200 	mov.w	r2, #0
 800d980:	f04f 0300 	mov.w	r3, #0
 800d984:	e9c1 2300 	strd	r2, r3, [r1]
		  avg_ms_yValue = 0;
 800d988:	4922      	ldr	r1, [pc, #136]	; (800da14 <main+0x874>)
 800d98a:	f04f 0200 	mov.w	r2, #0
 800d98e:	f04f 0300 	mov.w	r3, #0
 800d992:	e9c1 2300 	strd	r2, r3, [r1]
		  avg_ms_zValue = 0;
 800d996:	4920      	ldr	r1, [pc, #128]	; (800da18 <main+0x878>)
 800d998:	f04f 0200 	mov.w	r2, #0
 800d99c:	f04f 0300 	mov.w	r3, #0
 800d9a0:	e9c1 2300 	strd	r2, r3, [r1]
//		  char* c_v = &bmi_gps_data;
//		  udp_send_event_ms(&c_v);
//		  udp_send_event_r(&c_v);


		  udp_send_event(secondOutputBufferStart);
 800d9a4:	4b1d      	ldr	r3, [pc, #116]	; (800da1c <main+0x87c>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7f3 fb15 	bl	8000fd8 <udp_send_event>
		  gpsOutputready = false;
 800d9ae:	4b1c      	ldr	r3, [pc, #112]	; (800da20 <main+0x880>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	701a      	strb	r2, [r3, #0]
		  //sprintf(sprintString,"gyro: %i, %i,  %i", gyro_xValue, gyro_yValue, gyro_zValue);
	  }
	  if(outputBufferReady){
 800d9b4:	4b1b      	ldr	r3, [pc, #108]	; (800da24 <main+0x884>)
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <main+0x822>
		 // udp_send_event(receivedSentence);
		  outputBufferReady = false;
 800d9bc:	4b19      	ldr	r3, [pc, #100]	; (800da24 <main+0x884>)
 800d9be:	2200      	movs	r2, #0
 800d9c0:	701a      	strb	r2, [r3, #0]


	//  printf("g");


  }
 800d9c2:	e425      	b.n	800d210 <main+0x70>
 800d9c4:	1ffe8c30 	.word	0x1ffe8c30
 800d9c8:	1ffe8c78 	.word	0x1ffe8c78
 800d9cc:	1ffe8d00 	.word	0x1ffe8d00
 800d9d0:	1ffe8e24 	.word	0x1ffe8e24
 800d9d4:	1ffe8fd0 	.word	0x1ffe8fd0
 800d9d8:	1ffe8c10 	.word	0x1ffe8c10
 800d9dc:	1ffe8c58 	.word	0x1ffe8c58
 800d9e0:	1ffe8c40 	.word	0x1ffe8c40
 800d9e4:	1ffe8d30 	.word	0x1ffe8d30
 800d9e8:	1ffe8d10 	.word	0x1ffe8d10
 800d9ec:	1ffe8c90 	.word	0x1ffe8c90
 800d9f0:	1ffe8bf8 	.word	0x1ffe8bf8
 800d9f4:	1ffe8cf0 	.word	0x1ffe8cf0
 800d9f8:	1ffe8bf0 	.word	0x1ffe8bf0
 800d9fc:	1ffe8fdc 	.word	0x1ffe8fdc
 800da00:	1ffe8e1c 	.word	0x1ffe8e1c
 800da04:	1ffe8c80 	.word	0x1ffe8c80
 800da08:	1ffe8e08 	.word	0x1ffe8e08
 800da0c:	1ffe8c60 	.word	0x1ffe8c60
 800da10:	1ffe8b78 	.word	0x1ffe8b78
 800da14:	1ffe8d80 	.word	0x1ffe8d80
 800da18:	1ffe8c50 	.word	0x1ffe8c50
 800da1c:	1ffe8f04 	.word	0x1ffe8f04
 800da20:	1ffe8efc 	.word	0x1ffe8efc
 800da24:	1ffe8e10 	.word	0x1ffe8e10

0800da28 <atan>:
 800da28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da2c:	4bc4      	ldr	r3, [pc, #784]	; (800dd40 <atan+0x318>)
 800da2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800da32:	429e      	cmp	r6, r3
 800da34:	4604      	mov	r4, r0
 800da36:	460d      	mov	r5, r1
 800da38:	468b      	mov	fp, r1
 800da3a:	dd0e      	ble.n	800da5a <atan+0x32>
 800da3c:	4bc1      	ldr	r3, [pc, #772]	; (800dd44 <atan+0x31c>)
 800da3e:	429e      	cmp	r6, r3
 800da40:	f300 80ac 	bgt.w	800db9c <atan+0x174>
 800da44:	f000 80a7 	beq.w	800db96 <atan+0x16e>
 800da48:	f1bb 0f00 	cmp.w	fp, #0
 800da4c:	f340 80e5 	ble.w	800dc1a <atan+0x1f2>
 800da50:	a19f      	add	r1, pc, #636	; (adr r1, 800dcd0 <atan+0x2a8>)
 800da52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da5a:	4bbb      	ldr	r3, [pc, #748]	; (800dd48 <atan+0x320>)
 800da5c:	429e      	cmp	r6, r3
 800da5e:	f300 80b5 	bgt.w	800dbcc <atan+0x1a4>
 800da62:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800da66:	429e      	cmp	r6, r3
 800da68:	f340 80a0 	ble.w	800dbac <atan+0x184>
 800da6c:	f04f 3aff 	mov.w	sl, #4294967295
 800da70:	4622      	mov	r2, r4
 800da72:	462b      	mov	r3, r5
 800da74:	4620      	mov	r0, r4
 800da76:	4629      	mov	r1, r5
 800da78:	f000 fc7a 	bl	800e370 <__aeabi_dmul>
 800da7c:	4602      	mov	r2, r0
 800da7e:	460b      	mov	r3, r1
 800da80:	4680      	mov	r8, r0
 800da82:	4689      	mov	r9, r1
 800da84:	f000 fc74 	bl	800e370 <__aeabi_dmul>
 800da88:	a393      	add	r3, pc, #588	; (adr r3, 800dcd8 <atan+0x2b0>)
 800da8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8e:	4606      	mov	r6, r0
 800da90:	460f      	mov	r7, r1
 800da92:	f000 fc6d 	bl	800e370 <__aeabi_dmul>
 800da96:	a392      	add	r3, pc, #584	; (adr r3, 800dce0 <atan+0x2b8>)
 800da98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9c:	f000 fab6 	bl	800e00c <__adddf3>
 800daa0:	4632      	mov	r2, r6
 800daa2:	463b      	mov	r3, r7
 800daa4:	f000 fc64 	bl	800e370 <__aeabi_dmul>
 800daa8:	a38f      	add	r3, pc, #572	; (adr r3, 800dce8 <atan+0x2c0>)
 800daaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daae:	f000 faad 	bl	800e00c <__adddf3>
 800dab2:	4632      	mov	r2, r6
 800dab4:	463b      	mov	r3, r7
 800dab6:	f000 fc5b 	bl	800e370 <__aeabi_dmul>
 800daba:	a38d      	add	r3, pc, #564	; (adr r3, 800dcf0 <atan+0x2c8>)
 800dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac0:	f000 faa4 	bl	800e00c <__adddf3>
 800dac4:	4632      	mov	r2, r6
 800dac6:	463b      	mov	r3, r7
 800dac8:	f000 fc52 	bl	800e370 <__aeabi_dmul>
 800dacc:	a38a      	add	r3, pc, #552	; (adr r3, 800dcf8 <atan+0x2d0>)
 800dace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad2:	f000 fa9b 	bl	800e00c <__adddf3>
 800dad6:	4632      	mov	r2, r6
 800dad8:	463b      	mov	r3, r7
 800dada:	f000 fc49 	bl	800e370 <__aeabi_dmul>
 800dade:	a388      	add	r3, pc, #544	; (adr r3, 800dd00 <atan+0x2d8>)
 800dae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae4:	f000 fa92 	bl	800e00c <__adddf3>
 800dae8:	4642      	mov	r2, r8
 800daea:	464b      	mov	r3, r9
 800daec:	f000 fc40 	bl	800e370 <__aeabi_dmul>
 800daf0:	a385      	add	r3, pc, #532	; (adr r3, 800dd08 <atan+0x2e0>)
 800daf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf6:	4680      	mov	r8, r0
 800daf8:	4689      	mov	r9, r1
 800dafa:	4630      	mov	r0, r6
 800dafc:	4639      	mov	r1, r7
 800dafe:	f000 fc37 	bl	800e370 <__aeabi_dmul>
 800db02:	a383      	add	r3, pc, #524	; (adr r3, 800dd10 <atan+0x2e8>)
 800db04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db08:	f000 fa7e 	bl	800e008 <__aeabi_dsub>
 800db0c:	4632      	mov	r2, r6
 800db0e:	463b      	mov	r3, r7
 800db10:	f000 fc2e 	bl	800e370 <__aeabi_dmul>
 800db14:	a380      	add	r3, pc, #512	; (adr r3, 800dd18 <atan+0x2f0>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	f000 fa75 	bl	800e008 <__aeabi_dsub>
 800db1e:	4632      	mov	r2, r6
 800db20:	463b      	mov	r3, r7
 800db22:	f000 fc25 	bl	800e370 <__aeabi_dmul>
 800db26:	a37e      	add	r3, pc, #504	; (adr r3, 800dd20 <atan+0x2f8>)
 800db28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2c:	f000 fa6c 	bl	800e008 <__aeabi_dsub>
 800db30:	4632      	mov	r2, r6
 800db32:	463b      	mov	r3, r7
 800db34:	f000 fc1c 	bl	800e370 <__aeabi_dmul>
 800db38:	a37b      	add	r3, pc, #492	; (adr r3, 800dd28 <atan+0x300>)
 800db3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3e:	f000 fa63 	bl	800e008 <__aeabi_dsub>
 800db42:	4632      	mov	r2, r6
 800db44:	463b      	mov	r3, r7
 800db46:	f000 fc13 	bl	800e370 <__aeabi_dmul>
 800db4a:	f1ba 3fff 	cmp.w	sl, #4294967295
 800db4e:	4602      	mov	r2, r0
 800db50:	460b      	mov	r3, r1
 800db52:	d06b      	beq.n	800dc2c <atan+0x204>
 800db54:	4640      	mov	r0, r8
 800db56:	4649      	mov	r1, r9
 800db58:	f000 fa58 	bl	800e00c <__adddf3>
 800db5c:	4622      	mov	r2, r4
 800db5e:	462b      	mov	r3, r5
 800db60:	f000 fc06 	bl	800e370 <__aeabi_dmul>
 800db64:	4e79      	ldr	r6, [pc, #484]	; (800dd4c <atan+0x324>)
 800db66:	4b7a      	ldr	r3, [pc, #488]	; (800dd50 <atan+0x328>)
 800db68:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800db6c:	4456      	add	r6, sl
 800db6e:	449a      	add	sl, r3
 800db70:	e9da 2300 	ldrd	r2, r3, [sl]
 800db74:	f000 fa48 	bl	800e008 <__aeabi_dsub>
 800db78:	4622      	mov	r2, r4
 800db7a:	462b      	mov	r3, r5
 800db7c:	f000 fa44 	bl	800e008 <__aeabi_dsub>
 800db80:	4602      	mov	r2, r0
 800db82:	460b      	mov	r3, r1
 800db84:	e9d6 0100 	ldrd	r0, r1, [r6]
 800db88:	f000 fa3e 	bl	800e008 <__aeabi_dsub>
 800db8c:	f1bb 0f00 	cmp.w	fp, #0
 800db90:	db48      	blt.n	800dc24 <atan+0x1fc>
 800db92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db96:	2800      	cmp	r0, #0
 800db98:	f43f af56 	beq.w	800da48 <atan+0x20>
 800db9c:	4620      	mov	r0, r4
 800db9e:	4629      	mov	r1, r5
 800dba0:	4622      	mov	r2, r4
 800dba2:	462b      	mov	r3, r5
 800dba4:	f000 fa32 	bl	800e00c <__adddf3>
 800dba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbac:	a360      	add	r3, pc, #384	; (adr r3, 800dd30 <atan+0x308>)
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	f000 fa2b 	bl	800e00c <__adddf3>
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	4b66      	ldr	r3, [pc, #408]	; (800dd54 <atan+0x32c>)
 800dbba:	f000 fe69 	bl	800e890 <__aeabi_dcmpgt>
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	f43f af54 	beq.w	800da6c <atan+0x44>
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbcc:	f000 f8cc 	bl	800dd68 <fabs>
 800dbd0:	4b61      	ldr	r3, [pc, #388]	; (800dd58 <atan+0x330>)
 800dbd2:	429e      	cmp	r6, r3
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	460d      	mov	r5, r1
 800dbd8:	dc38      	bgt.n	800dc4c <atan+0x224>
 800dbda:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800dbde:	429e      	cmp	r6, r3
 800dbe0:	dc5d      	bgt.n	800dc9e <atan+0x276>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	f000 fa11 	bl	800e00c <__adddf3>
 800dbea:	2200      	movs	r2, #0
 800dbec:	4b59      	ldr	r3, [pc, #356]	; (800dd54 <atan+0x32c>)
 800dbee:	f000 fa0b 	bl	800e008 <__aeabi_dsub>
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	4606      	mov	r6, r0
 800dbf6:	460f      	mov	r7, r1
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	4629      	mov	r1, r5
 800dbfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dc00:	f000 fa04 	bl	800e00c <__adddf3>
 800dc04:	4602      	mov	r2, r0
 800dc06:	460b      	mov	r3, r1
 800dc08:	4630      	mov	r0, r6
 800dc0a:	4639      	mov	r1, r7
 800dc0c:	f000 fcda 	bl	800e5c4 <__aeabi_ddiv>
 800dc10:	f04f 0a00 	mov.w	sl, #0
 800dc14:	4604      	mov	r4, r0
 800dc16:	460d      	mov	r5, r1
 800dc18:	e72a      	b.n	800da70 <atan+0x48>
 800dc1a:	a147      	add	r1, pc, #284	; (adr r1, 800dd38 <atan+0x310>)
 800dc1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc24:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800dc28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc2c:	4640      	mov	r0, r8
 800dc2e:	4649      	mov	r1, r9
 800dc30:	f000 f9ec 	bl	800e00c <__adddf3>
 800dc34:	4622      	mov	r2, r4
 800dc36:	462b      	mov	r3, r5
 800dc38:	f000 fb9a 	bl	800e370 <__aeabi_dmul>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	460b      	mov	r3, r1
 800dc40:	4620      	mov	r0, r4
 800dc42:	4629      	mov	r1, r5
 800dc44:	f000 f9e0 	bl	800e008 <__aeabi_dsub>
 800dc48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4c:	4b43      	ldr	r3, [pc, #268]	; (800dd5c <atan+0x334>)
 800dc4e:	429e      	cmp	r6, r3
 800dc50:	dc1a      	bgt.n	800dc88 <atan+0x260>
 800dc52:	2200      	movs	r2, #0
 800dc54:	4b42      	ldr	r3, [pc, #264]	; (800dd60 <atan+0x338>)
 800dc56:	f000 f9d7 	bl	800e008 <__aeabi_dsub>
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	460f      	mov	r7, r1
 800dc60:	4620      	mov	r0, r4
 800dc62:	4629      	mov	r1, r5
 800dc64:	4b3e      	ldr	r3, [pc, #248]	; (800dd60 <atan+0x338>)
 800dc66:	f000 fb83 	bl	800e370 <__aeabi_dmul>
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	4b39      	ldr	r3, [pc, #228]	; (800dd54 <atan+0x32c>)
 800dc6e:	f000 f9cd 	bl	800e00c <__adddf3>
 800dc72:	4602      	mov	r2, r0
 800dc74:	460b      	mov	r3, r1
 800dc76:	4630      	mov	r0, r6
 800dc78:	4639      	mov	r1, r7
 800dc7a:	f000 fca3 	bl	800e5c4 <__aeabi_ddiv>
 800dc7e:	f04f 0a02 	mov.w	sl, #2
 800dc82:	4604      	mov	r4, r0
 800dc84:	460d      	mov	r5, r1
 800dc86:	e6f3      	b.n	800da70 <atan+0x48>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	4935      	ldr	r1, [pc, #212]	; (800dd64 <atan+0x33c>)
 800dc90:	f000 fc98 	bl	800e5c4 <__aeabi_ddiv>
 800dc94:	f04f 0a03 	mov.w	sl, #3
 800dc98:	4604      	mov	r4, r0
 800dc9a:	460d      	mov	r5, r1
 800dc9c:	e6e8      	b.n	800da70 <atan+0x48>
 800dc9e:	2200      	movs	r2, #0
 800dca0:	4b2c      	ldr	r3, [pc, #176]	; (800dd54 <atan+0x32c>)
 800dca2:	f000 f9b1 	bl	800e008 <__aeabi_dsub>
 800dca6:	2200      	movs	r2, #0
 800dca8:	4606      	mov	r6, r0
 800dcaa:	460f      	mov	r7, r1
 800dcac:	4620      	mov	r0, r4
 800dcae:	4629      	mov	r1, r5
 800dcb0:	4b28      	ldr	r3, [pc, #160]	; (800dd54 <atan+0x32c>)
 800dcb2:	f000 f9ab 	bl	800e00c <__adddf3>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	460b      	mov	r3, r1
 800dcba:	4630      	mov	r0, r6
 800dcbc:	4639      	mov	r1, r7
 800dcbe:	f000 fc81 	bl	800e5c4 <__aeabi_ddiv>
 800dcc2:	f04f 0a01 	mov.w	sl, #1
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	460d      	mov	r5, r1
 800dcca:	e6d1      	b.n	800da70 <atan+0x48>
 800dccc:	f3af 8000 	nop.w
 800dcd0:	54442d18 	.word	0x54442d18
 800dcd4:	3ff921fb 	.word	0x3ff921fb
 800dcd8:	e322da11 	.word	0xe322da11
 800dcdc:	3f90ad3a 	.word	0x3f90ad3a
 800dce0:	24760deb 	.word	0x24760deb
 800dce4:	3fa97b4b 	.word	0x3fa97b4b
 800dce8:	a0d03d51 	.word	0xa0d03d51
 800dcec:	3fb10d66 	.word	0x3fb10d66
 800dcf0:	c54c206e 	.word	0xc54c206e
 800dcf4:	3fb745cd 	.word	0x3fb745cd
 800dcf8:	920083ff 	.word	0x920083ff
 800dcfc:	3fc24924 	.word	0x3fc24924
 800dd00:	5555550d 	.word	0x5555550d
 800dd04:	3fd55555 	.word	0x3fd55555
 800dd08:	2c6a6c2f 	.word	0x2c6a6c2f
 800dd0c:	bfa2b444 	.word	0xbfa2b444
 800dd10:	52defd9a 	.word	0x52defd9a
 800dd14:	3fadde2d 	.word	0x3fadde2d
 800dd18:	af749a6d 	.word	0xaf749a6d
 800dd1c:	3fb3b0f2 	.word	0x3fb3b0f2
 800dd20:	fe231671 	.word	0xfe231671
 800dd24:	3fbc71c6 	.word	0x3fbc71c6
 800dd28:	9998ebc4 	.word	0x9998ebc4
 800dd2c:	3fc99999 	.word	0x3fc99999
 800dd30:	8800759c 	.word	0x8800759c
 800dd34:	7e37e43c 	.word	0x7e37e43c
 800dd38:	54442d18 	.word	0x54442d18
 800dd3c:	bff921fb 	.word	0xbff921fb
 800dd40:	440fffff 	.word	0x440fffff
 800dd44:	7ff00000 	.word	0x7ff00000
 800dd48:	3fdbffff 	.word	0x3fdbffff
 800dd4c:	080116c0 	.word	0x080116c0
 800dd50:	080116a0 	.word	0x080116a0
 800dd54:	3ff00000 	.word	0x3ff00000
 800dd58:	3ff2ffff 	.word	0x3ff2ffff
 800dd5c:	40037fff 	.word	0x40037fff
 800dd60:	3ff80000 	.word	0x3ff80000
 800dd64:	bff00000 	.word	0xbff00000

0800dd68 <fabs>:
 800dd68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dd6c:	4770      	bx	lr
 800dd6e:	bf00      	nop

0800dd70 <sqrt>:
 800dd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd74:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 800de18 <sqrt+0xa8>
 800dd78:	b08a      	sub	sp, #40	; 0x28
 800dd7a:	4606      	mov	r6, r0
 800dd7c:	460f      	mov	r7, r1
 800dd7e:	f000 f84d 	bl	800de1c <__ieee754_sqrt>
 800dd82:	f99a 3000 	ldrsb.w	r3, [sl]
 800dd86:	3301      	adds	r3, #1
 800dd88:	4604      	mov	r4, r0
 800dd8a:	460d      	mov	r5, r1
 800dd8c:	d00f      	beq.n	800ddae <sqrt+0x3e>
 800dd8e:	4630      	mov	r0, r6
 800dd90:	4639      	mov	r1, r7
 800dd92:	f000 f907 	bl	800dfa4 <__fpclassifyd>
 800dd96:	b150      	cbz	r0, 800ddae <sqrt+0x3e>
 800dd98:	f04f 0800 	mov.w	r8, #0
 800dd9c:	f04f 0900 	mov.w	r9, #0
 800dda0:	4630      	mov	r0, r6
 800dda2:	4639      	mov	r1, r7
 800dda4:	4642      	mov	r2, r8
 800dda6:	464b      	mov	r3, r9
 800dda8:	f000 fd54 	bl	800e854 <__aeabi_dcmplt>
 800ddac:	b920      	cbnz	r0, 800ddb8 <sqrt+0x48>
 800ddae:	4620      	mov	r0, r4
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	b00a      	add	sp, #40	; 0x28
 800ddb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddb8:	4b16      	ldr	r3, [pc, #88]	; (800de14 <sqrt+0xa4>)
 800ddba:	f89a 4000 	ldrb.w	r4, [sl]
 800ddbe:	9301      	str	r3, [sp, #4]
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ddc8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ddcc:	9200      	str	r2, [sp, #0]
 800ddce:	9308      	str	r3, [sp, #32]
 800ddd0:	b964      	cbnz	r4, 800ddec <sqrt+0x7c>
 800ddd2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ddd6:	4668      	mov	r0, sp
 800ddd8:	f000 f910 	bl	800dffc <matherr>
 800dddc:	b180      	cbz	r0, 800de00 <sqrt+0x90>
 800ddde:	9b08      	ldr	r3, [sp, #32]
 800dde0:	b99b      	cbnz	r3, 800de0a <sqrt+0x9a>
 800dde2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dde6:	b00a      	add	sp, #40	; 0x28
 800dde8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddec:	4640      	mov	r0, r8
 800ddee:	4649      	mov	r1, r9
 800ddf0:	4642      	mov	r2, r8
 800ddf2:	464b      	mov	r3, r9
 800ddf4:	f000 fbe6 	bl	800e5c4 <__aeabi_ddiv>
 800ddf8:	2c02      	cmp	r4, #2
 800ddfa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ddfe:	d1ea      	bne.n	800ddd6 <sqrt+0x66>
 800de00:	f000 fda0 	bl	800e944 <__errno>
 800de04:	2321      	movs	r3, #33	; 0x21
 800de06:	6003      	str	r3, [r0, #0]
 800de08:	e7e9      	b.n	800ddde <sqrt+0x6e>
 800de0a:	f000 fd9b 	bl	800e944 <__errno>
 800de0e:	9b08      	ldr	r3, [sp, #32]
 800de10:	6003      	str	r3, [r0, #0]
 800de12:	e7e6      	b.n	800dde2 <sqrt+0x72>
 800de14:	080116e0 	.word	0x080116e0
 800de18:	1ffe890e 	.word	0x1ffe890e

0800de1c <__ieee754_sqrt>:
 800de1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de20:	4e5f      	ldr	r6, [pc, #380]	; (800dfa0 <__ieee754_sqrt+0x184>)
 800de22:	46b6      	mov	lr, r6
 800de24:	400e      	ands	r6, r1
 800de26:	4576      	cmp	r6, lr
 800de28:	4604      	mov	r4, r0
 800de2a:	460d      	mov	r5, r1
 800de2c:	460b      	mov	r3, r1
 800de2e:	f000 8095 	beq.w	800df5c <__ieee754_sqrt+0x140>
 800de32:	2900      	cmp	r1, #0
 800de34:	4602      	mov	r2, r0
 800de36:	dd74      	ble.n	800df22 <__ieee754_sqrt+0x106>
 800de38:	150f      	asrs	r7, r1, #20
 800de3a:	d07f      	beq.n	800df3c <__ieee754_sqrt+0x120>
 800de3c:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 800de40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de44:	07f8      	lsls	r0, r7, #31
 800de46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de4a:	d465      	bmi.n	800df18 <__ieee754_sqrt+0xfc>
 800de4c:	0fd1      	lsrs	r1, r2, #31
 800de4e:	2600      	movs	r6, #0
 800de50:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800de54:	107f      	asrs	r7, r7, #1
 800de56:	0052      	lsls	r2, r2, #1
 800de58:	46b6      	mov	lr, r6
 800de5a:	2016      	movs	r0, #22
 800de5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800de60:	eb0e 0401 	add.w	r4, lr, r1
 800de64:	429c      	cmp	r4, r3
 800de66:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 800de6a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800de6e:	dc03      	bgt.n	800de78 <__ieee754_sqrt+0x5c>
 800de70:	1b1b      	subs	r3, r3, r4
 800de72:	eb04 0e01 	add.w	lr, r4, r1
 800de76:	440e      	add	r6, r1
 800de78:	3801      	subs	r0, #1
 800de7a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800de7e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800de82:	d1ed      	bne.n	800de60 <__ieee754_sqrt+0x44>
 800de84:	4684      	mov	ip, r0
 800de86:	2520      	movs	r5, #32
 800de88:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800de8c:	e00a      	b.n	800dea4 <__ieee754_sqrt+0x88>
 800de8e:	4573      	cmp	r3, lr
 800de90:	d021      	beq.n	800ded6 <__ieee754_sqrt+0xba>
 800de92:	0fd4      	lsrs	r4, r2, #31
 800de94:	3d01      	subs	r5, #1
 800de96:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800de9a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800de9e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dea2:	d021      	beq.n	800dee8 <__ieee754_sqrt+0xcc>
 800dea4:	459e      	cmp	lr, r3
 800dea6:	eb0c 0401 	add.w	r4, ip, r1
 800deaa:	daf0      	bge.n	800de8e <__ieee754_sqrt+0x72>
 800deac:	2c00      	cmp	r4, #0
 800deae:	eb04 0c01 	add.w	ip, r4, r1
 800deb2:	db0a      	blt.n	800deca <__ieee754_sqrt+0xae>
 800deb4:	46f0      	mov	r8, lr
 800deb6:	ebce 0303 	rsb	r3, lr, r3
 800deba:	4294      	cmp	r4, r2
 800debc:	bf88      	it	hi
 800debe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dec2:	1b12      	subs	r2, r2, r4
 800dec4:	4408      	add	r0, r1
 800dec6:	46c6      	mov	lr, r8
 800dec8:	e7e3      	b.n	800de92 <__ieee754_sqrt+0x76>
 800deca:	f1bc 0f00 	cmp.w	ip, #0
 800dece:	dbf1      	blt.n	800deb4 <__ieee754_sqrt+0x98>
 800ded0:	f10e 0801 	add.w	r8, lr, #1
 800ded4:	e7ef      	b.n	800deb6 <__ieee754_sqrt+0x9a>
 800ded6:	4294      	cmp	r4, r2
 800ded8:	d81c      	bhi.n	800df14 <__ieee754_sqrt+0xf8>
 800deda:	2c00      	cmp	r4, #0
 800dedc:	eb04 0c01 	add.w	ip, r4, r1
 800dee0:	db48      	blt.n	800df74 <__ieee754_sqrt+0x158>
 800dee2:	4698      	mov	r8, r3
 800dee4:	2300      	movs	r3, #0
 800dee6:	e7ec      	b.n	800dec2 <__ieee754_sqrt+0xa6>
 800dee8:	4313      	orrs	r3, r2
 800deea:	d004      	beq.n	800def6 <__ieee754_sqrt+0xda>
 800deec:	1c41      	adds	r1, r0, #1
 800deee:	d047      	beq.n	800df80 <__ieee754_sqrt+0x164>
 800def0:	f000 0301 	and.w	r3, r0, #1
 800def4:	4418      	add	r0, r3
 800def6:	0845      	lsrs	r5, r0, #1
 800def8:	1073      	asrs	r3, r6, #1
 800defa:	07f2      	lsls	r2, r6, #31
 800defc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800df00:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800df04:	bf48      	it	mi
 800df06:	f045 4500 	orrmi.w	r5, r5, #2147483648	; 0x80000000
 800df0a:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800df0e:	4628      	mov	r0, r5
 800df10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df14:	469e      	mov	lr, r3
 800df16:	e7bc      	b.n	800de92 <__ieee754_sqrt+0x76>
 800df18:	0fd1      	lsrs	r1, r2, #31
 800df1a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800df1e:	0052      	lsls	r2, r2, #1
 800df20:	e794      	b.n	800de4c <__ieee754_sqrt+0x30>
 800df22:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800df26:	4306      	orrs	r6, r0
 800df28:	d022      	beq.n	800df70 <__ieee754_sqrt+0x154>
 800df2a:	bb79      	cbnz	r1, 800df8c <__ieee754_sqrt+0x170>
 800df2c:	460f      	mov	r7, r1
 800df2e:	0ad3      	lsrs	r3, r2, #11
 800df30:	3f15      	subs	r7, #21
 800df32:	0552      	lsls	r2, r2, #21
 800df34:	2b00      	cmp	r3, #0
 800df36:	d0fa      	beq.n	800df2e <__ieee754_sqrt+0x112>
 800df38:	02dd      	lsls	r5, r3, #11
 800df3a:	d423      	bmi.n	800df84 <__ieee754_sqrt+0x168>
 800df3c:	2100      	movs	r1, #0
 800df3e:	005b      	lsls	r3, r3, #1
 800df40:	02dc      	lsls	r4, r3, #11
 800df42:	f101 0101 	add.w	r1, r1, #1
 800df46:	d5fa      	bpl.n	800df3e <__ieee754_sqrt+0x122>
 800df48:	f1c1 0001 	rsb	r0, r1, #1
 800df4c:	f1c1 0420 	rsb	r4, r1, #32
 800df50:	fa22 f404 	lsr.w	r4, r2, r4
 800df54:	4323      	orrs	r3, r4
 800df56:	4407      	add	r7, r0
 800df58:	408a      	lsls	r2, r1
 800df5a:	e76f      	b.n	800de3c <__ieee754_sqrt+0x20>
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	f000 fa06 	bl	800e370 <__aeabi_dmul>
 800df64:	4622      	mov	r2, r4
 800df66:	462b      	mov	r3, r5
 800df68:	f000 f850 	bl	800e00c <__adddf3>
 800df6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df74:	f1bc 0f00 	cmp.w	ip, #0
 800df78:	daaa      	bge.n	800ded0 <__ieee754_sqrt+0xb4>
 800df7a:	46f0      	mov	r8, lr
 800df7c:	2300      	movs	r3, #0
 800df7e:	e7a0      	b.n	800dec2 <__ieee754_sqrt+0xa6>
 800df80:	3601      	adds	r6, #1
 800df82:	e7b9      	b.n	800def8 <__ieee754_sqrt+0xdc>
 800df84:	2420      	movs	r4, #32
 800df86:	2001      	movs	r0, #1
 800df88:	2100      	movs	r1, #0
 800df8a:	e7e1      	b.n	800df50 <__ieee754_sqrt+0x134>
 800df8c:	4602      	mov	r2, r0
 800df8e:	460b      	mov	r3, r1
 800df90:	f000 f83a 	bl	800e008 <__aeabi_dsub>
 800df94:	4602      	mov	r2, r0
 800df96:	460b      	mov	r3, r1
 800df98:	f000 fb14 	bl	800e5c4 <__aeabi_ddiv>
 800df9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa0:	7ff00000 	.word	0x7ff00000

0800dfa4 <__fpclassifyd>:
 800dfa4:	b410      	push	{r4}
 800dfa6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800dfaa:	460b      	mov	r3, r1
 800dfac:	d008      	beq.n	800dfc0 <__fpclassifyd+0x1c>
 800dfae:	4a11      	ldr	r2, [pc, #68]	; (800dff4 <__fpclassifyd+0x50>)
 800dfb0:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dfb4:	4291      	cmp	r1, r2
 800dfb6:	d808      	bhi.n	800dfca <__fpclassifyd+0x26>
 800dfb8:	2004      	movs	r0, #4
 800dfba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	b918      	cbnz	r0, 800dfca <__fpclassifyd+0x26>
 800dfc2:	2002      	movs	r0, #2
 800dfc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfc8:	4770      	bx	lr
 800dfca:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800dfce:	4a09      	ldr	r2, [pc, #36]	; (800dff4 <__fpclassifyd+0x50>)
 800dfd0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d9ef      	bls.n	800dfb8 <__fpclassifyd+0x14>
 800dfd8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800dfdc:	d201      	bcs.n	800dfe2 <__fpclassifyd+0x3e>
 800dfde:	2003      	movs	r0, #3
 800dfe0:	e7eb      	b.n	800dfba <__fpclassifyd+0x16>
 800dfe2:	4b05      	ldr	r3, [pc, #20]	; (800dff8 <__fpclassifyd+0x54>)
 800dfe4:	429c      	cmp	r4, r3
 800dfe6:	d001      	beq.n	800dfec <__fpclassifyd+0x48>
 800dfe8:	2000      	movs	r0, #0
 800dfea:	e7e6      	b.n	800dfba <__fpclassifyd+0x16>
 800dfec:	fab0 f080 	clz	r0, r0
 800dff0:	0940      	lsrs	r0, r0, #5
 800dff2:	e7e2      	b.n	800dfba <__fpclassifyd+0x16>
 800dff4:	7fdfffff 	.word	0x7fdfffff
 800dff8:	7ff00000 	.word	0x7ff00000

0800dffc <matherr>:
 800dffc:	2000      	movs	r0, #0
 800dffe:	4770      	bx	lr

0800e000 <__aeabi_drsub>:
 800e000:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800e004:	e002      	b.n	800e00c <__adddf3>
 800e006:	bf00      	nop

0800e008 <__aeabi_dsub>:
 800e008:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800e00c <__adddf3>:
 800e00c:	b530      	push	{r4, r5, lr}
 800e00e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800e012:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800e016:	ea94 0f05 	teq	r4, r5
 800e01a:	bf08      	it	eq
 800e01c:	ea90 0f02 	teqeq	r0, r2
 800e020:	bf1f      	itttt	ne
 800e022:	ea54 0c00 	orrsne.w	ip, r4, r0
 800e026:	ea55 0c02 	orrsne.w	ip, r5, r2
 800e02a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800e02e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e032:	f000 80e2 	beq.w	800e1fa <__adddf3+0x1ee>
 800e036:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800e03a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800e03e:	bfb8      	it	lt
 800e040:	426d      	neglt	r5, r5
 800e042:	dd0c      	ble.n	800e05e <__adddf3+0x52>
 800e044:	442c      	add	r4, r5
 800e046:	ea80 0202 	eor.w	r2, r0, r2
 800e04a:	ea81 0303 	eor.w	r3, r1, r3
 800e04e:	ea82 0000 	eor.w	r0, r2, r0
 800e052:	ea83 0101 	eor.w	r1, r3, r1
 800e056:	ea80 0202 	eor.w	r2, r0, r2
 800e05a:	ea81 0303 	eor.w	r3, r1, r3
 800e05e:	2d36      	cmp	r5, #54	; 0x36
 800e060:	bf88      	it	hi
 800e062:	bd30      	pophi	{r4, r5, pc}
 800e064:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800e068:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800e06c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800e070:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800e074:	d002      	beq.n	800e07c <__adddf3+0x70>
 800e076:	4240      	negs	r0, r0
 800e078:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e07c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800e080:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e084:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800e088:	d002      	beq.n	800e090 <__adddf3+0x84>
 800e08a:	4252      	negs	r2, r2
 800e08c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800e090:	ea94 0f05 	teq	r4, r5
 800e094:	f000 80a7 	beq.w	800e1e6 <__adddf3+0x1da>
 800e098:	f1a4 0401 	sub.w	r4, r4, #1
 800e09c:	f1d5 0e20 	rsbs	lr, r5, #32
 800e0a0:	db0d      	blt.n	800e0be <__adddf3+0xb2>
 800e0a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 800e0a6:	fa22 f205 	lsr.w	r2, r2, r5
 800e0aa:	1880      	adds	r0, r0, r2
 800e0ac:	f141 0100 	adc.w	r1, r1, #0
 800e0b0:	fa03 f20e 	lsl.w	r2, r3, lr
 800e0b4:	1880      	adds	r0, r0, r2
 800e0b6:	fa43 f305 	asr.w	r3, r3, r5
 800e0ba:	4159      	adcs	r1, r3
 800e0bc:	e00e      	b.n	800e0dc <__adddf3+0xd0>
 800e0be:	f1a5 0520 	sub.w	r5, r5, #32
 800e0c2:	f10e 0e20 	add.w	lr, lr, #32
 800e0c6:	2a01      	cmp	r2, #1
 800e0c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 800e0cc:	bf28      	it	cs
 800e0ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 800e0d2:	fa43 f305 	asr.w	r3, r3, r5
 800e0d6:	18c0      	adds	r0, r0, r3
 800e0d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800e0dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e0e0:	d507      	bpl.n	800e0f2 <__adddf3+0xe6>
 800e0e2:	f04f 0e00 	mov.w	lr, #0
 800e0e6:	f1dc 0c00 	rsbs	ip, ip, #0
 800e0ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 800e0ee:	eb6e 0101 	sbc.w	r1, lr, r1
 800e0f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e0f6:	d31b      	bcc.n	800e130 <__adddf3+0x124>
 800e0f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800e0fc:	d30c      	bcc.n	800e118 <__adddf3+0x10c>
 800e0fe:	0849      	lsrs	r1, r1, #1
 800e100:	ea5f 0030 	movs.w	r0, r0, rrx
 800e104:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800e108:	f104 0401 	add.w	r4, r4, #1
 800e10c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800e110:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800e114:	f080 809a 	bcs.w	800e24c <__adddf3+0x240>
 800e118:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800e11c:	bf08      	it	eq
 800e11e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800e122:	f150 0000 	adcs.w	r0, r0, #0
 800e126:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e12a:	ea41 0105 	orr.w	r1, r1, r5
 800e12e:	bd30      	pop	{r4, r5, pc}
 800e130:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800e134:	4140      	adcs	r0, r0
 800e136:	eb41 0101 	adc.w	r1, r1, r1
 800e13a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e13e:	f1a4 0401 	sub.w	r4, r4, #1
 800e142:	d1e9      	bne.n	800e118 <__adddf3+0x10c>
 800e144:	f091 0f00 	teq	r1, #0
 800e148:	bf04      	itt	eq
 800e14a:	4601      	moveq	r1, r0
 800e14c:	2000      	moveq	r0, #0
 800e14e:	fab1 f381 	clz	r3, r1
 800e152:	bf08      	it	eq
 800e154:	3320      	addeq	r3, #32
 800e156:	f1a3 030b 	sub.w	r3, r3, #11
 800e15a:	f1b3 0220 	subs.w	r2, r3, #32
 800e15e:	da0c      	bge.n	800e17a <__adddf3+0x16e>
 800e160:	320c      	adds	r2, #12
 800e162:	dd08      	ble.n	800e176 <__adddf3+0x16a>
 800e164:	f102 0c14 	add.w	ip, r2, #20
 800e168:	f1c2 020c 	rsb	r2, r2, #12
 800e16c:	fa01 f00c 	lsl.w	r0, r1, ip
 800e170:	fa21 f102 	lsr.w	r1, r1, r2
 800e174:	e00c      	b.n	800e190 <__adddf3+0x184>
 800e176:	f102 0214 	add.w	r2, r2, #20
 800e17a:	bfd8      	it	le
 800e17c:	f1c2 0c20 	rsble	ip, r2, #32
 800e180:	fa01 f102 	lsl.w	r1, r1, r2
 800e184:	fa20 fc0c 	lsr.w	ip, r0, ip
 800e188:	bfdc      	itt	le
 800e18a:	ea41 010c 	orrle.w	r1, r1, ip
 800e18e:	4090      	lslle	r0, r2
 800e190:	1ae4      	subs	r4, r4, r3
 800e192:	bfa2      	ittt	ge
 800e194:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800e198:	4329      	orrge	r1, r5
 800e19a:	bd30      	popge	{r4, r5, pc}
 800e19c:	ea6f 0404 	mvn.w	r4, r4
 800e1a0:	3c1f      	subs	r4, #31
 800e1a2:	da1c      	bge.n	800e1de <__adddf3+0x1d2>
 800e1a4:	340c      	adds	r4, #12
 800e1a6:	dc0e      	bgt.n	800e1c6 <__adddf3+0x1ba>
 800e1a8:	f104 0414 	add.w	r4, r4, #20
 800e1ac:	f1c4 0220 	rsb	r2, r4, #32
 800e1b0:	fa20 f004 	lsr.w	r0, r0, r4
 800e1b4:	fa01 f302 	lsl.w	r3, r1, r2
 800e1b8:	ea40 0003 	orr.w	r0, r0, r3
 800e1bc:	fa21 f304 	lsr.w	r3, r1, r4
 800e1c0:	ea45 0103 	orr.w	r1, r5, r3
 800e1c4:	bd30      	pop	{r4, r5, pc}
 800e1c6:	f1c4 040c 	rsb	r4, r4, #12
 800e1ca:	f1c4 0220 	rsb	r2, r4, #32
 800e1ce:	fa20 f002 	lsr.w	r0, r0, r2
 800e1d2:	fa01 f304 	lsl.w	r3, r1, r4
 800e1d6:	ea40 0003 	orr.w	r0, r0, r3
 800e1da:	4629      	mov	r1, r5
 800e1dc:	bd30      	pop	{r4, r5, pc}
 800e1de:	fa21 f004 	lsr.w	r0, r1, r4
 800e1e2:	4629      	mov	r1, r5
 800e1e4:	bd30      	pop	{r4, r5, pc}
 800e1e6:	f094 0f00 	teq	r4, #0
 800e1ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800e1ee:	bf06      	itte	eq
 800e1f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800e1f4:	3401      	addeq	r4, #1
 800e1f6:	3d01      	subne	r5, #1
 800e1f8:	e74e      	b.n	800e098 <__adddf3+0x8c>
 800e1fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800e1fe:	bf18      	it	ne
 800e200:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e204:	d029      	beq.n	800e25a <__adddf3+0x24e>
 800e206:	ea94 0f05 	teq	r4, r5
 800e20a:	bf08      	it	eq
 800e20c:	ea90 0f02 	teqeq	r0, r2
 800e210:	d005      	beq.n	800e21e <__adddf3+0x212>
 800e212:	ea54 0c00 	orrs.w	ip, r4, r0
 800e216:	bf04      	itt	eq
 800e218:	4619      	moveq	r1, r3
 800e21a:	4610      	moveq	r0, r2
 800e21c:	bd30      	pop	{r4, r5, pc}
 800e21e:	ea91 0f03 	teq	r1, r3
 800e222:	bf1e      	ittt	ne
 800e224:	2100      	movne	r1, #0
 800e226:	2000      	movne	r0, #0
 800e228:	bd30      	popne	{r4, r5, pc}
 800e22a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800e22e:	d105      	bne.n	800e23c <__adddf3+0x230>
 800e230:	0040      	lsls	r0, r0, #1
 800e232:	4149      	adcs	r1, r1
 800e234:	bf28      	it	cs
 800e236:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800e23a:	bd30      	pop	{r4, r5, pc}
 800e23c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800e240:	bf3c      	itt	cc
 800e242:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800e246:	bd30      	popcc	{r4, r5, pc}
 800e248:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e24c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800e250:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e254:	f04f 0000 	mov.w	r0, #0
 800e258:	bd30      	pop	{r4, r5, pc}
 800e25a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800e25e:	bf1a      	itte	ne
 800e260:	4619      	movne	r1, r3
 800e262:	4610      	movne	r0, r2
 800e264:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800e268:	bf1c      	itt	ne
 800e26a:	460b      	movne	r3, r1
 800e26c:	4602      	movne	r2, r0
 800e26e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800e272:	bf06      	itte	eq
 800e274:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800e278:	ea91 0f03 	teqeq	r1, r3
 800e27c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800e280:	bd30      	pop	{r4, r5, pc}
 800e282:	bf00      	nop

0800e284 <__aeabi_ui2d>:
 800e284:	f090 0f00 	teq	r0, #0
 800e288:	bf04      	itt	eq
 800e28a:	2100      	moveq	r1, #0
 800e28c:	4770      	bxeq	lr
 800e28e:	b530      	push	{r4, r5, lr}
 800e290:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e294:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e298:	f04f 0500 	mov.w	r5, #0
 800e29c:	f04f 0100 	mov.w	r1, #0
 800e2a0:	e750      	b.n	800e144 <__adddf3+0x138>
 800e2a2:	bf00      	nop

0800e2a4 <__aeabi_i2d>:
 800e2a4:	f090 0f00 	teq	r0, #0
 800e2a8:	bf04      	itt	eq
 800e2aa:	2100      	moveq	r1, #0
 800e2ac:	4770      	bxeq	lr
 800e2ae:	b530      	push	{r4, r5, lr}
 800e2b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e2b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e2b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800e2bc:	bf48      	it	mi
 800e2be:	4240      	negmi	r0, r0
 800e2c0:	f04f 0100 	mov.w	r1, #0
 800e2c4:	e73e      	b.n	800e144 <__adddf3+0x138>
 800e2c6:	bf00      	nop

0800e2c8 <__aeabi_f2d>:
 800e2c8:	0042      	lsls	r2, r0, #1
 800e2ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800e2ce:	ea4f 0131 	mov.w	r1, r1, rrx
 800e2d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800e2d6:	bf1f      	itttt	ne
 800e2d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800e2dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800e2e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800e2e4:	4770      	bxne	lr
 800e2e6:	f092 0f00 	teq	r2, #0
 800e2ea:	bf14      	ite	ne
 800e2ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800e2f0:	4770      	bxeq	lr
 800e2f2:	b530      	push	{r4, r5, lr}
 800e2f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 800e2f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e2fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e300:	e720      	b.n	800e144 <__adddf3+0x138>
 800e302:	bf00      	nop

0800e304 <__aeabi_ul2d>:
 800e304:	ea50 0201 	orrs.w	r2, r0, r1
 800e308:	bf08      	it	eq
 800e30a:	4770      	bxeq	lr
 800e30c:	b530      	push	{r4, r5, lr}
 800e30e:	f04f 0500 	mov.w	r5, #0
 800e312:	e00a      	b.n	800e32a <__aeabi_l2d+0x16>

0800e314 <__aeabi_l2d>:
 800e314:	ea50 0201 	orrs.w	r2, r0, r1
 800e318:	bf08      	it	eq
 800e31a:	4770      	bxeq	lr
 800e31c:	b530      	push	{r4, r5, lr}
 800e31e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800e322:	d502      	bpl.n	800e32a <__aeabi_l2d+0x16>
 800e324:	4240      	negs	r0, r0
 800e326:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e32a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e32e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e332:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800e336:	f43f aedc 	beq.w	800e0f2 <__adddf3+0xe6>
 800e33a:	f04f 0203 	mov.w	r2, #3
 800e33e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e342:	bf18      	it	ne
 800e344:	3203      	addne	r2, #3
 800e346:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e34a:	bf18      	it	ne
 800e34c:	3203      	addne	r2, #3
 800e34e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800e352:	f1c2 0320 	rsb	r3, r2, #32
 800e356:	fa00 fc03 	lsl.w	ip, r0, r3
 800e35a:	fa20 f002 	lsr.w	r0, r0, r2
 800e35e:	fa01 fe03 	lsl.w	lr, r1, r3
 800e362:	ea40 000e 	orr.w	r0, r0, lr
 800e366:	fa21 f102 	lsr.w	r1, r1, r2
 800e36a:	4414      	add	r4, r2
 800e36c:	e6c1      	b.n	800e0f2 <__adddf3+0xe6>
 800e36e:	bf00      	nop

0800e370 <__aeabi_dmul>:
 800e370:	b570      	push	{r4, r5, r6, lr}
 800e372:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800e376:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800e37a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800e37e:	bf1d      	ittte	ne
 800e380:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800e384:	ea94 0f0c 	teqne	r4, ip
 800e388:	ea95 0f0c 	teqne	r5, ip
 800e38c:	f000 f8de 	bleq	800e54c <__aeabi_dmul+0x1dc>
 800e390:	442c      	add	r4, r5
 800e392:	ea81 0603 	eor.w	r6, r1, r3
 800e396:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800e39a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800e39e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800e3a2:	bf18      	it	ne
 800e3a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800e3a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e3ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e3b0:	d038      	beq.n	800e424 <__aeabi_dmul+0xb4>
 800e3b2:	fba0 ce02 	umull	ip, lr, r0, r2
 800e3b6:	f04f 0500 	mov.w	r5, #0
 800e3ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 800e3be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800e3c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 800e3c6:	f04f 0600 	mov.w	r6, #0
 800e3ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 800e3ce:	f09c 0f00 	teq	ip, #0
 800e3d2:	bf18      	it	ne
 800e3d4:	f04e 0e01 	orrne.w	lr, lr, #1
 800e3d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800e3dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800e3e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800e3e4:	d204      	bcs.n	800e3f0 <__aeabi_dmul+0x80>
 800e3e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800e3ea:	416d      	adcs	r5, r5
 800e3ec:	eb46 0606 	adc.w	r6, r6, r6
 800e3f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800e3f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800e3f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800e3fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800e400:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800e404:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800e408:	bf88      	it	hi
 800e40a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800e40e:	d81e      	bhi.n	800e44e <__aeabi_dmul+0xde>
 800e410:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800e414:	bf08      	it	eq
 800e416:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800e41a:	f150 0000 	adcs.w	r0, r0, #0
 800e41e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e422:	bd70      	pop	{r4, r5, r6, pc}
 800e424:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800e428:	ea46 0101 	orr.w	r1, r6, r1
 800e42c:	ea40 0002 	orr.w	r0, r0, r2
 800e430:	ea81 0103 	eor.w	r1, r1, r3
 800e434:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800e438:	bfc2      	ittt	gt
 800e43a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800e43e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800e442:	bd70      	popgt	{r4, r5, r6, pc}
 800e444:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e448:	f04f 0e00 	mov.w	lr, #0
 800e44c:	3c01      	subs	r4, #1
 800e44e:	f300 80ab 	bgt.w	800e5a8 <__aeabi_dmul+0x238>
 800e452:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800e456:	bfde      	ittt	le
 800e458:	2000      	movle	r0, #0
 800e45a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800e45e:	bd70      	pople	{r4, r5, r6, pc}
 800e460:	f1c4 0400 	rsb	r4, r4, #0
 800e464:	3c20      	subs	r4, #32
 800e466:	da35      	bge.n	800e4d4 <__aeabi_dmul+0x164>
 800e468:	340c      	adds	r4, #12
 800e46a:	dc1b      	bgt.n	800e4a4 <__aeabi_dmul+0x134>
 800e46c:	f104 0414 	add.w	r4, r4, #20
 800e470:	f1c4 0520 	rsb	r5, r4, #32
 800e474:	fa00 f305 	lsl.w	r3, r0, r5
 800e478:	fa20 f004 	lsr.w	r0, r0, r4
 800e47c:	fa01 f205 	lsl.w	r2, r1, r5
 800e480:	ea40 0002 	orr.w	r0, r0, r2
 800e484:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800e488:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e48c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800e490:	fa21 f604 	lsr.w	r6, r1, r4
 800e494:	eb42 0106 	adc.w	r1, r2, r6
 800e498:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800e49c:	bf08      	it	eq
 800e49e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800e4a2:	bd70      	pop	{r4, r5, r6, pc}
 800e4a4:	f1c4 040c 	rsb	r4, r4, #12
 800e4a8:	f1c4 0520 	rsb	r5, r4, #32
 800e4ac:	fa00 f304 	lsl.w	r3, r0, r4
 800e4b0:	fa20 f005 	lsr.w	r0, r0, r5
 800e4b4:	fa01 f204 	lsl.w	r2, r1, r4
 800e4b8:	ea40 0002 	orr.w	r0, r0, r2
 800e4bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e4c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800e4c4:	f141 0100 	adc.w	r1, r1, #0
 800e4c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800e4cc:	bf08      	it	eq
 800e4ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800e4d2:	bd70      	pop	{r4, r5, r6, pc}
 800e4d4:	f1c4 0520 	rsb	r5, r4, #32
 800e4d8:	fa00 f205 	lsl.w	r2, r0, r5
 800e4dc:	ea4e 0e02 	orr.w	lr, lr, r2
 800e4e0:	fa20 f304 	lsr.w	r3, r0, r4
 800e4e4:	fa01 f205 	lsl.w	r2, r1, r5
 800e4e8:	ea43 0302 	orr.w	r3, r3, r2
 800e4ec:	fa21 f004 	lsr.w	r0, r1, r4
 800e4f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e4f4:	fa21 f204 	lsr.w	r2, r1, r4
 800e4f8:	ea20 0002 	bic.w	r0, r0, r2
 800e4fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800e500:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800e504:	bf08      	it	eq
 800e506:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800e50a:	bd70      	pop	{r4, r5, r6, pc}
 800e50c:	f094 0f00 	teq	r4, #0
 800e510:	d10f      	bne.n	800e532 <__aeabi_dmul+0x1c2>
 800e512:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800e516:	0040      	lsls	r0, r0, #1
 800e518:	eb41 0101 	adc.w	r1, r1, r1
 800e51c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e520:	bf08      	it	eq
 800e522:	3c01      	subeq	r4, #1
 800e524:	d0f7      	beq.n	800e516 <__aeabi_dmul+0x1a6>
 800e526:	ea41 0106 	orr.w	r1, r1, r6
 800e52a:	f095 0f00 	teq	r5, #0
 800e52e:	bf18      	it	ne
 800e530:	4770      	bxne	lr
 800e532:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800e536:	0052      	lsls	r2, r2, #1
 800e538:	eb43 0303 	adc.w	r3, r3, r3
 800e53c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800e540:	bf08      	it	eq
 800e542:	3d01      	subeq	r5, #1
 800e544:	d0f7      	beq.n	800e536 <__aeabi_dmul+0x1c6>
 800e546:	ea43 0306 	orr.w	r3, r3, r6
 800e54a:	4770      	bx	lr
 800e54c:	ea94 0f0c 	teq	r4, ip
 800e550:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800e554:	bf18      	it	ne
 800e556:	ea95 0f0c 	teqne	r5, ip
 800e55a:	d00c      	beq.n	800e576 <__aeabi_dmul+0x206>
 800e55c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800e560:	bf18      	it	ne
 800e562:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800e566:	d1d1      	bne.n	800e50c <__aeabi_dmul+0x19c>
 800e568:	ea81 0103 	eor.w	r1, r1, r3
 800e56c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e570:	f04f 0000 	mov.w	r0, #0
 800e574:	bd70      	pop	{r4, r5, r6, pc}
 800e576:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800e57a:	bf06      	itte	eq
 800e57c:	4610      	moveq	r0, r2
 800e57e:	4619      	moveq	r1, r3
 800e580:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800e584:	d019      	beq.n	800e5ba <__aeabi_dmul+0x24a>
 800e586:	ea94 0f0c 	teq	r4, ip
 800e58a:	d102      	bne.n	800e592 <__aeabi_dmul+0x222>
 800e58c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800e590:	d113      	bne.n	800e5ba <__aeabi_dmul+0x24a>
 800e592:	ea95 0f0c 	teq	r5, ip
 800e596:	d105      	bne.n	800e5a4 <__aeabi_dmul+0x234>
 800e598:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800e59c:	bf1c      	itt	ne
 800e59e:	4610      	movne	r0, r2
 800e5a0:	4619      	movne	r1, r3
 800e5a2:	d10a      	bne.n	800e5ba <__aeabi_dmul+0x24a>
 800e5a4:	ea81 0103 	eor.w	r1, r1, r3
 800e5a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e5ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800e5b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e5b4:	f04f 0000 	mov.w	r0, #0
 800e5b8:	bd70      	pop	{r4, r5, r6, pc}
 800e5ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800e5be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800e5c2:	bd70      	pop	{r4, r5, r6, pc}

0800e5c4 <__aeabi_ddiv>:
 800e5c4:	b570      	push	{r4, r5, r6, lr}
 800e5c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800e5ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800e5ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800e5d2:	bf1d      	ittte	ne
 800e5d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800e5d8:	ea94 0f0c 	teqne	r4, ip
 800e5dc:	ea95 0f0c 	teqne	r5, ip
 800e5e0:	f000 f8a7 	bleq	800e732 <__aeabi_ddiv+0x16e>
 800e5e4:	eba4 0405 	sub.w	r4, r4, r5
 800e5e8:	ea81 0e03 	eor.w	lr, r1, r3
 800e5ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800e5f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800e5f4:	f000 8088 	beq.w	800e708 <__aeabi_ddiv+0x144>
 800e5f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e5fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800e600:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800e604:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800e608:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e60c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800e610:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800e614:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800e618:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800e61c:	429d      	cmp	r5, r3
 800e61e:	bf08      	it	eq
 800e620:	4296      	cmpeq	r6, r2
 800e622:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800e626:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800e62a:	d202      	bcs.n	800e632 <__aeabi_ddiv+0x6e>
 800e62c:	085b      	lsrs	r3, r3, #1
 800e62e:	ea4f 0232 	mov.w	r2, r2, rrx
 800e632:	1ab6      	subs	r6, r6, r2
 800e634:	eb65 0503 	sbc.w	r5, r5, r3
 800e638:	085b      	lsrs	r3, r3, #1
 800e63a:	ea4f 0232 	mov.w	r2, r2, rrx
 800e63e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e642:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800e646:	ebb6 0e02 	subs.w	lr, r6, r2
 800e64a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e64e:	bf22      	ittt	cs
 800e650:	1ab6      	subcs	r6, r6, r2
 800e652:	4675      	movcs	r5, lr
 800e654:	ea40 000c 	orrcs.w	r0, r0, ip
 800e658:	085b      	lsrs	r3, r3, #1
 800e65a:	ea4f 0232 	mov.w	r2, r2, rrx
 800e65e:	ebb6 0e02 	subs.w	lr, r6, r2
 800e662:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e666:	bf22      	ittt	cs
 800e668:	1ab6      	subcs	r6, r6, r2
 800e66a:	4675      	movcs	r5, lr
 800e66c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800e670:	085b      	lsrs	r3, r3, #1
 800e672:	ea4f 0232 	mov.w	r2, r2, rrx
 800e676:	ebb6 0e02 	subs.w	lr, r6, r2
 800e67a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e67e:	bf22      	ittt	cs
 800e680:	1ab6      	subcs	r6, r6, r2
 800e682:	4675      	movcs	r5, lr
 800e684:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800e688:	085b      	lsrs	r3, r3, #1
 800e68a:	ea4f 0232 	mov.w	r2, r2, rrx
 800e68e:	ebb6 0e02 	subs.w	lr, r6, r2
 800e692:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e696:	bf22      	ittt	cs
 800e698:	1ab6      	subcs	r6, r6, r2
 800e69a:	4675      	movcs	r5, lr
 800e69c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800e6a0:	ea55 0e06 	orrs.w	lr, r5, r6
 800e6a4:	d018      	beq.n	800e6d8 <__aeabi_ddiv+0x114>
 800e6a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800e6aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800e6ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800e6b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800e6b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800e6ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800e6be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800e6c2:	d1c0      	bne.n	800e646 <__aeabi_ddiv+0x82>
 800e6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e6c8:	d10b      	bne.n	800e6e2 <__aeabi_ddiv+0x11e>
 800e6ca:	ea41 0100 	orr.w	r1, r1, r0
 800e6ce:	f04f 0000 	mov.w	r0, #0
 800e6d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800e6d6:	e7b6      	b.n	800e646 <__aeabi_ddiv+0x82>
 800e6d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e6dc:	bf04      	itt	eq
 800e6de:	4301      	orreq	r1, r0
 800e6e0:	2000      	moveq	r0, #0
 800e6e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800e6e6:	bf88      	it	hi
 800e6e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800e6ec:	f63f aeaf 	bhi.w	800e44e <__aeabi_dmul+0xde>
 800e6f0:	ebb5 0c03 	subs.w	ip, r5, r3
 800e6f4:	bf04      	itt	eq
 800e6f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 800e6fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800e6fe:	f150 0000 	adcs.w	r0, r0, #0
 800e702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e706:	bd70      	pop	{r4, r5, r6, pc}
 800e708:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800e70c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800e710:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800e714:	bfc2      	ittt	gt
 800e716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800e71a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800e71e:	bd70      	popgt	{r4, r5, r6, pc}
 800e720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e724:	f04f 0e00 	mov.w	lr, #0
 800e728:	3c01      	subs	r4, #1
 800e72a:	e690      	b.n	800e44e <__aeabi_dmul+0xde>
 800e72c:	ea45 0e06 	orr.w	lr, r5, r6
 800e730:	e68d      	b.n	800e44e <__aeabi_dmul+0xde>
 800e732:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800e736:	ea94 0f0c 	teq	r4, ip
 800e73a:	bf08      	it	eq
 800e73c:	ea95 0f0c 	teqeq	r5, ip
 800e740:	f43f af3b 	beq.w	800e5ba <__aeabi_dmul+0x24a>
 800e744:	ea94 0f0c 	teq	r4, ip
 800e748:	d10a      	bne.n	800e760 <__aeabi_ddiv+0x19c>
 800e74a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800e74e:	f47f af34 	bne.w	800e5ba <__aeabi_dmul+0x24a>
 800e752:	ea95 0f0c 	teq	r5, ip
 800e756:	f47f af25 	bne.w	800e5a4 <__aeabi_dmul+0x234>
 800e75a:	4610      	mov	r0, r2
 800e75c:	4619      	mov	r1, r3
 800e75e:	e72c      	b.n	800e5ba <__aeabi_dmul+0x24a>
 800e760:	ea95 0f0c 	teq	r5, ip
 800e764:	d106      	bne.n	800e774 <__aeabi_ddiv+0x1b0>
 800e766:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800e76a:	f43f aefd 	beq.w	800e568 <__aeabi_dmul+0x1f8>
 800e76e:	4610      	mov	r0, r2
 800e770:	4619      	mov	r1, r3
 800e772:	e722      	b.n	800e5ba <__aeabi_dmul+0x24a>
 800e774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800e778:	bf18      	it	ne
 800e77a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800e77e:	f47f aec5 	bne.w	800e50c <__aeabi_dmul+0x19c>
 800e782:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800e786:	f47f af0d 	bne.w	800e5a4 <__aeabi_dmul+0x234>
 800e78a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800e78e:	f47f aeeb 	bne.w	800e568 <__aeabi_dmul+0x1f8>
 800e792:	e712      	b.n	800e5ba <__aeabi_dmul+0x24a>

0800e794 <__gedf2>:
 800e794:	f04f 3cff 	mov.w	ip, #4294967295
 800e798:	e006      	b.n	800e7a8 <__cmpdf2+0x4>
 800e79a:	bf00      	nop

0800e79c <__ledf2>:
 800e79c:	f04f 0c01 	mov.w	ip, #1
 800e7a0:	e002      	b.n	800e7a8 <__cmpdf2+0x4>
 800e7a2:	bf00      	nop

0800e7a4 <__cmpdf2>:
 800e7a4:	f04f 0c01 	mov.w	ip, #1
 800e7a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 800e7ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800e7b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e7b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e7b8:	bf18      	it	ne
 800e7ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800e7be:	d01b      	beq.n	800e7f8 <__cmpdf2+0x54>
 800e7c0:	b001      	add	sp, #4
 800e7c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800e7c6:	bf0c      	ite	eq
 800e7c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800e7cc:	ea91 0f03 	teqne	r1, r3
 800e7d0:	bf02      	ittt	eq
 800e7d2:	ea90 0f02 	teqeq	r0, r2
 800e7d6:	2000      	moveq	r0, #0
 800e7d8:	4770      	bxeq	lr
 800e7da:	f110 0f00 	cmn.w	r0, #0
 800e7de:	ea91 0f03 	teq	r1, r3
 800e7e2:	bf58      	it	pl
 800e7e4:	4299      	cmppl	r1, r3
 800e7e6:	bf08      	it	eq
 800e7e8:	4290      	cmpeq	r0, r2
 800e7ea:	bf2c      	ite	cs
 800e7ec:	17d8      	asrcs	r0, r3, #31
 800e7ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800e7f2:	f040 0001 	orr.w	r0, r0, #1
 800e7f6:	4770      	bx	lr
 800e7f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800e7fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e800:	d102      	bne.n	800e808 <__cmpdf2+0x64>
 800e802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800e806:	d107      	bne.n	800e818 <__cmpdf2+0x74>
 800e808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e80c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e810:	d1d6      	bne.n	800e7c0 <__cmpdf2+0x1c>
 800e812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800e816:	d0d3      	beq.n	800e7c0 <__cmpdf2+0x1c>
 800e818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800e81c:	4770      	bx	lr
 800e81e:	bf00      	nop

0800e820 <__aeabi_cdrcmple>:
 800e820:	4684      	mov	ip, r0
 800e822:	4610      	mov	r0, r2
 800e824:	4662      	mov	r2, ip
 800e826:	468c      	mov	ip, r1
 800e828:	4619      	mov	r1, r3
 800e82a:	4663      	mov	r3, ip
 800e82c:	e000      	b.n	800e830 <__aeabi_cdcmpeq>
 800e82e:	bf00      	nop

0800e830 <__aeabi_cdcmpeq>:
 800e830:	b501      	push	{r0, lr}
 800e832:	f7ff ffb7 	bl	800e7a4 <__cmpdf2>
 800e836:	2800      	cmp	r0, #0
 800e838:	bf48      	it	mi
 800e83a:	f110 0f00 	cmnmi.w	r0, #0
 800e83e:	bd01      	pop	{r0, pc}

0800e840 <__aeabi_dcmpeq>:
 800e840:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e844:	f7ff fff4 	bl	800e830 <__aeabi_cdcmpeq>
 800e848:	bf0c      	ite	eq
 800e84a:	2001      	moveq	r0, #1
 800e84c:	2000      	movne	r0, #0
 800e84e:	f85d fb08 	ldr.w	pc, [sp], #8
 800e852:	bf00      	nop

0800e854 <__aeabi_dcmplt>:
 800e854:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e858:	f7ff ffea 	bl	800e830 <__aeabi_cdcmpeq>
 800e85c:	bf34      	ite	cc
 800e85e:	2001      	movcc	r0, #1
 800e860:	2000      	movcs	r0, #0
 800e862:	f85d fb08 	ldr.w	pc, [sp], #8
 800e866:	bf00      	nop

0800e868 <__aeabi_dcmple>:
 800e868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e86c:	f7ff ffe0 	bl	800e830 <__aeabi_cdcmpeq>
 800e870:	bf94      	ite	ls
 800e872:	2001      	movls	r0, #1
 800e874:	2000      	movhi	r0, #0
 800e876:	f85d fb08 	ldr.w	pc, [sp], #8
 800e87a:	bf00      	nop

0800e87c <__aeabi_dcmpge>:
 800e87c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e880:	f7ff ffce 	bl	800e820 <__aeabi_cdrcmple>
 800e884:	bf94      	ite	ls
 800e886:	2001      	movls	r0, #1
 800e888:	2000      	movhi	r0, #0
 800e88a:	f85d fb08 	ldr.w	pc, [sp], #8
 800e88e:	bf00      	nop

0800e890 <__aeabi_dcmpgt>:
 800e890:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e894:	f7ff ffc4 	bl	800e820 <__aeabi_cdrcmple>
 800e898:	bf34      	ite	cc
 800e89a:	2001      	movcc	r0, #1
 800e89c:	2000      	movcs	r0, #0
 800e89e:	f85d fb08 	ldr.w	pc, [sp], #8
 800e8a2:	bf00      	nop

0800e8a4 <__aeabi_d2f>:
 800e8a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800e8a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800e8ac:	bf24      	itt	cs
 800e8ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800e8b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800e8b6:	d90d      	bls.n	800e8d4 <__aeabi_d2f+0x30>
 800e8b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800e8bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800e8c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800e8c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800e8c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800e8cc:	bf08      	it	eq
 800e8ce:	f020 0001 	biceq.w	r0, r0, #1
 800e8d2:	4770      	bx	lr
 800e8d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800e8d8:	d121      	bne.n	800e91e <__aeabi_d2f+0x7a>
 800e8da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800e8de:	bfbc      	itt	lt
 800e8e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800e8e4:	4770      	bxlt	lr
 800e8e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e8ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800e8ee:	f1c2 0218 	rsb	r2, r2, #24
 800e8f2:	f1c2 0c20 	rsb	ip, r2, #32
 800e8f6:	fa10 f30c 	lsls.w	r3, r0, ip
 800e8fa:	fa20 f002 	lsr.w	r0, r0, r2
 800e8fe:	bf18      	it	ne
 800e900:	f040 0001 	orrne.w	r0, r0, #1
 800e904:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800e908:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800e90c:	fa03 fc0c 	lsl.w	ip, r3, ip
 800e910:	ea40 000c 	orr.w	r0, r0, ip
 800e914:	fa23 f302 	lsr.w	r3, r3, r2
 800e918:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e91c:	e7cc      	b.n	800e8b8 <__aeabi_d2f+0x14>
 800e91e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800e922:	d107      	bne.n	800e934 <__aeabi_d2f+0x90>
 800e924:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800e928:	bf1e      	ittt	ne
 800e92a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800e92e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800e932:	4770      	bxne	lr
 800e934:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800e938:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800e93c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e940:	4770      	bx	lr
 800e942:	bf00      	nop

0800e944 <__errno>:
 800e944:	4b01      	ldr	r3, [pc, #4]	; (800e94c <__errno+0x8>)
 800e946:	6818      	ldr	r0, [r3, #0]
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop
 800e94c:	1ffe8970 	.word	0x1ffe8970

0800e950 <__libc_init_array>:
 800e950:	b570      	push	{r4, r5, r6, lr}
 800e952:	4b0e      	ldr	r3, [pc, #56]	; (800e98c <__libc_init_array+0x3c>)
 800e954:	4c0e      	ldr	r4, [pc, #56]	; (800e990 <__libc_init_array+0x40>)
 800e956:	1ae4      	subs	r4, r4, r3
 800e958:	10a4      	asrs	r4, r4, #2
 800e95a:	2500      	movs	r5, #0
 800e95c:	461e      	mov	r6, r3
 800e95e:	42a5      	cmp	r5, r4
 800e960:	d004      	beq.n	800e96c <__libc_init_array+0x1c>
 800e962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e966:	4798      	blx	r3
 800e968:	3501      	adds	r5, #1
 800e96a:	e7f8      	b.n	800e95e <__libc_init_array+0xe>
 800e96c:	f7f4 f95a 	bl	8002c24 <_init>
 800e970:	4c08      	ldr	r4, [pc, #32]	; (800e994 <__libc_init_array+0x44>)
 800e972:	4b09      	ldr	r3, [pc, #36]	; (800e998 <__libc_init_array+0x48>)
 800e974:	1ae4      	subs	r4, r4, r3
 800e976:	10a4      	asrs	r4, r4, #2
 800e978:	2500      	movs	r5, #0
 800e97a:	461e      	mov	r6, r3
 800e97c:	42a5      	cmp	r5, r4
 800e97e:	d004      	beq.n	800e98a <__libc_init_array+0x3a>
 800e980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e984:	4798      	blx	r3
 800e986:	3501      	adds	r5, #1
 800e988:	e7f8      	b.n	800e97c <__libc_init_array+0x2c>
 800e98a:	bd70      	pop	{r4, r5, r6, pc}
 800e98c:	1ffe89ac 	.word	0x1ffe89ac
 800e990:	1ffe89ac 	.word	0x1ffe89ac
 800e994:	1ffe89ac 	.word	0x1ffe89ac
 800e998:	1ffe89ac 	.word	0x1ffe89ac

0800e99c <memcmp>:
 800e99c:	b510      	push	{r4, lr}
 800e99e:	440a      	add	r2, r1
 800e9a0:	1e44      	subs	r4, r0, #1
 800e9a2:	4291      	cmp	r1, r2
 800e9a4:	d008      	beq.n	800e9b8 <memcmp+0x1c>
 800e9a6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e9aa:	7808      	ldrb	r0, [r1, #0]
 800e9ac:	4283      	cmp	r3, r0
 800e9ae:	d001      	beq.n	800e9b4 <memcmp+0x18>
 800e9b0:	1a18      	subs	r0, r3, r0
 800e9b2:	bd10      	pop	{r4, pc}
 800e9b4:	3101      	adds	r1, #1
 800e9b6:	e7f4      	b.n	800e9a2 <memcmp+0x6>
 800e9b8:	2000      	movs	r0, #0
 800e9ba:	bd10      	pop	{r4, pc}

0800e9bc <memmove>:
 800e9bc:	4281      	cmp	r1, r0
 800e9be:	b510      	push	{r4, lr}
 800e9c0:	eb01 0302 	add.w	r3, r1, r2
 800e9c4:	d301      	bcc.n	800e9ca <memmove+0xe>
 800e9c6:	1e42      	subs	r2, r0, #1
 800e9c8:	e00b      	b.n	800e9e2 <memmove+0x26>
 800e9ca:	4298      	cmp	r0, r3
 800e9cc:	d2fb      	bcs.n	800e9c6 <memmove+0xa>
 800e9ce:	1881      	adds	r1, r0, r2
 800e9d0:	1ad2      	subs	r2, r2, r3
 800e9d2:	42d3      	cmn	r3, r2
 800e9d4:	d004      	beq.n	800e9e0 <memmove+0x24>
 800e9d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9da:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e9de:	e7f8      	b.n	800e9d2 <memmove+0x16>
 800e9e0:	bd10      	pop	{r4, pc}
 800e9e2:	4299      	cmp	r1, r3
 800e9e4:	d004      	beq.n	800e9f0 <memmove+0x34>
 800e9e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e9ee:	e7f8      	b.n	800e9e2 <memmove+0x26>
 800e9f0:	bd10      	pop	{r4, pc}

0800e9f2 <memset>:
 800e9f2:	4402      	add	r2, r0
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d002      	beq.n	800ea00 <memset+0xe>
 800e9fa:	f803 1b01 	strb.w	r1, [r3], #1
 800e9fe:	e7fa      	b.n	800e9f6 <memset+0x4>
 800ea00:	4770      	bx	lr

0800ea02 <__cvt>:
 800ea02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea06:	b088      	sub	sp, #32
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ea0c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ea0e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800ea10:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ea14:	461d      	mov	r5, r3
 800ea16:	bfb8      	it	lt
 800ea18:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ea1c:	f027 0720 	bic.w	r7, r7, #32
 800ea20:	bfb6      	itet	lt
 800ea22:	461d      	movlt	r5, r3
 800ea24:	2300      	movge	r3, #0
 800ea26:	232d      	movlt	r3, #45	; 0x2d
 800ea28:	4614      	mov	r4, r2
 800ea2a:	bfb8      	it	lt
 800ea2c:	4614      	movlt	r4, r2
 800ea2e:	2f46      	cmp	r7, #70	; 0x46
 800ea30:	700b      	strb	r3, [r1, #0]
 800ea32:	d003      	beq.n	800ea3c <__cvt+0x3a>
 800ea34:	2f45      	cmp	r7, #69	; 0x45
 800ea36:	d103      	bne.n	800ea40 <__cvt+0x3e>
 800ea38:	3601      	adds	r6, #1
 800ea3a:	e001      	b.n	800ea40 <__cvt+0x3e>
 800ea3c:	2303      	movs	r3, #3
 800ea3e:	e000      	b.n	800ea42 <__cvt+0x40>
 800ea40:	2302      	movs	r3, #2
 800ea42:	e88d 0448 	stmia.w	sp, {r3, r6, sl}
 800ea46:	ab06      	add	r3, sp, #24
 800ea48:	9303      	str	r3, [sp, #12]
 800ea4a:	ab07      	add	r3, sp, #28
 800ea4c:	9304      	str	r3, [sp, #16]
 800ea4e:	4622      	mov	r2, r4
 800ea50:	462b      	mov	r3, r5
 800ea52:	f000 fd49 	bl	800f4e8 <_dtoa_r>
 800ea56:	2f47      	cmp	r7, #71	; 0x47
 800ea58:	4680      	mov	r8, r0
 800ea5a:	d102      	bne.n	800ea62 <__cvt+0x60>
 800ea5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea5e:	07db      	lsls	r3, r3, #31
 800ea60:	d526      	bpl.n	800eab0 <__cvt+0xae>
 800ea62:	2f46      	cmp	r7, #70	; 0x46
 800ea64:	eb08 0906 	add.w	r9, r8, r6
 800ea68:	d111      	bne.n	800ea8e <__cvt+0x8c>
 800ea6a:	f898 3000 	ldrb.w	r3, [r8]
 800ea6e:	2b30      	cmp	r3, #48	; 0x30
 800ea70:	d10a      	bne.n	800ea88 <__cvt+0x86>
 800ea72:	4620      	mov	r0, r4
 800ea74:	4629      	mov	r1, r5
 800ea76:	2200      	movs	r2, #0
 800ea78:	2300      	movs	r3, #0
 800ea7a:	f7ff fee1 	bl	800e840 <__aeabi_dcmpeq>
 800ea7e:	b918      	cbnz	r0, 800ea88 <__cvt+0x86>
 800ea80:	f1c6 0601 	rsb	r6, r6, #1
 800ea84:	f8ca 6000 	str.w	r6, [sl]
 800ea88:	f8da 3000 	ldr.w	r3, [sl]
 800ea8c:	4499      	add	r9, r3
 800ea8e:	4620      	mov	r0, r4
 800ea90:	4629      	mov	r1, r5
 800ea92:	2200      	movs	r2, #0
 800ea94:	2300      	movs	r3, #0
 800ea96:	f7ff fed3 	bl	800e840 <__aeabi_dcmpeq>
 800ea9a:	b108      	cbz	r0, 800eaa0 <__cvt+0x9e>
 800ea9c:	f8cd 901c 	str.w	r9, [sp, #28]
 800eaa0:	9b07      	ldr	r3, [sp, #28]
 800eaa2:	454b      	cmp	r3, r9
 800eaa4:	d204      	bcs.n	800eab0 <__cvt+0xae>
 800eaa6:	1c5a      	adds	r2, r3, #1
 800eaa8:	9207      	str	r2, [sp, #28]
 800eaaa:	2230      	movs	r2, #48	; 0x30
 800eaac:	701a      	strb	r2, [r3, #0]
 800eaae:	e7f7      	b.n	800eaa0 <__cvt+0x9e>
 800eab0:	9b07      	ldr	r3, [sp, #28]
 800eab2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800eab4:	ebc8 0303 	rsb	r3, r8, r3
 800eab8:	4640      	mov	r0, r8
 800eaba:	6013      	str	r3, [r2, #0]
 800eabc:	b008      	add	sp, #32
 800eabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800eac2 <__exponent>:
 800eac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eac4:	4603      	mov	r3, r0
 800eac6:	2900      	cmp	r1, #0
 800eac8:	bfb8      	it	lt
 800eaca:	4249      	neglt	r1, r1
 800eacc:	f803 2b02 	strb.w	r2, [r3], #2
 800ead0:	bfb4      	ite	lt
 800ead2:	222d      	movlt	r2, #45	; 0x2d
 800ead4:	222b      	movge	r2, #43	; 0x2b
 800ead6:	2909      	cmp	r1, #9
 800ead8:	7042      	strb	r2, [r0, #1]
 800eada:	dd19      	ble.n	800eb10 <__exponent+0x4e>
 800eadc:	f10d 0407 	add.w	r4, sp, #7
 800eae0:	4626      	mov	r6, r4
 800eae2:	220a      	movs	r2, #10
 800eae4:	fb91 f5f2 	sdiv	r5, r1, r2
 800eae8:	fb02 1115 	mls	r1, r2, r5, r1
 800eaec:	3130      	adds	r1, #48	; 0x30
 800eaee:	2d09      	cmp	r5, #9
 800eaf0:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800eaf4:	4629      	mov	r1, r5
 800eaf6:	dcf4      	bgt.n	800eae2 <__exponent+0x20>
 800eaf8:	3130      	adds	r1, #48	; 0x30
 800eafa:	1e65      	subs	r5, r4, #1
 800eafc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800eb00:	42b5      	cmp	r5, r6
 800eb02:	461a      	mov	r2, r3
 800eb04:	d20a      	bcs.n	800eb1c <__exponent+0x5a>
 800eb06:	f815 2b01 	ldrb.w	r2, [r5], #1
 800eb0a:	f803 2b01 	strb.w	r2, [r3], #1
 800eb0e:	e7f7      	b.n	800eb00 <__exponent+0x3e>
 800eb10:	2430      	movs	r4, #48	; 0x30
 800eb12:	461a      	mov	r2, r3
 800eb14:	4421      	add	r1, r4
 800eb16:	f802 4b02 	strb.w	r4, [r2], #2
 800eb1a:	7059      	strb	r1, [r3, #1]
 800eb1c:	1a10      	subs	r0, r2, r0
 800eb1e:	b002      	add	sp, #8
 800eb20:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eb24 <_printf_float>:
 800eb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb28:	b091      	sub	sp, #68	; 0x44
 800eb2a:	468b      	mov	fp, r1
 800eb2c:	4615      	mov	r5, r2
 800eb2e:	461e      	mov	r6, r3
 800eb30:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800eb32:	4604      	mov	r4, r0
 800eb34:	f001 fb64 	bl	8010200 <_localeconv_r>
 800eb38:	f8d0 a000 	ldr.w	sl, [r0]
 800eb3c:	4650      	mov	r0, sl
 800eb3e:	f000 fc3b 	bl	800f3b8 <strlen>
 800eb42:	2300      	movs	r3, #0
 800eb44:	930e      	str	r3, [sp, #56]	; 0x38
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	9009      	str	r0, [sp, #36]	; 0x24
 800eb4a:	3307      	adds	r3, #7
 800eb4c:	f023 0307 	bic.w	r3, r3, #7
 800eb50:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb54:	f103 0208 	add.w	r2, r3, #8
 800eb58:	f89b 8018 	ldrb.w	r8, [fp, #24]
 800eb5c:	603a      	str	r2, [r7, #0]
 800eb5e:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 800eb62:	f7ff fa1f 	bl	800dfa4 <__fpclassifyd>
 800eb66:	2801      	cmp	r0, #1
 800eb68:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800eb6c:	d119      	bne.n	800eba2 <_printf_float+0x7e>
 800eb6e:	2200      	movs	r2, #0
 800eb70:	2300      	movs	r3, #0
 800eb72:	f7ff fe6f 	bl	800e854 <__aeabi_dcmplt>
 800eb76:	b110      	cbz	r0, 800eb7e <_printf_float+0x5a>
 800eb78:	232d      	movs	r3, #45	; 0x2d
 800eb7a:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 800eb7e:	4ba0      	ldr	r3, [pc, #640]	; (800ee00 <_printf_float+0x2dc>)
 800eb80:	4fa0      	ldr	r7, [pc, #640]	; (800ee04 <_printf_float+0x2e0>)
 800eb82:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800eb86:	bf88      	it	hi
 800eb88:	461f      	movhi	r7, r3
 800eb8a:	2303      	movs	r3, #3
 800eb8c:	f8cb 3010 	str.w	r3, [fp, #16]
 800eb90:	f8db 3000 	ldr.w	r3, [fp]
 800eb94:	f023 0304 	bic.w	r3, r3, #4
 800eb98:	f8cb 3000 	str.w	r3, [fp]
 800eb9c:	f04f 0900 	mov.w	r9, #0
 800eba0:	e0a1      	b.n	800ece6 <_printf_float+0x1c2>
 800eba2:	f7ff f9ff 	bl	800dfa4 <__fpclassifyd>
 800eba6:	f8db 3000 	ldr.w	r3, [fp]
 800ebaa:	b948      	cbnz	r0, 800ebc0 <_printf_float+0x9c>
 800ebac:	4a96      	ldr	r2, [pc, #600]	; (800ee08 <_printf_float+0x2e4>)
 800ebae:	4f97      	ldr	r7, [pc, #604]	; (800ee0c <_printf_float+0x2e8>)
 800ebb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ebb4:	bf88      	it	hi
 800ebb6:	4617      	movhi	r7, r2
 800ebb8:	2203      	movs	r2, #3
 800ebba:	f8cb 2010 	str.w	r2, [fp, #16]
 800ebbe:	e7e9      	b.n	800eb94 <_printf_float+0x70>
 800ebc0:	f8db 2004 	ldr.w	r2, [fp, #4]
 800ebc4:	ed9b 7b12 	vldr	d7, [fp, #72]	; 0x48
 800ebc8:	1c57      	adds	r7, r2, #1
 800ebca:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ebce:	d101      	bne.n	800ebd4 <_printf_float+0xb0>
 800ebd0:	2206      	movs	r2, #6
 800ebd2:	e009      	b.n	800ebe8 <_printf_float+0xc4>
 800ebd4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800ebd8:	d002      	beq.n	800ebe0 <_printf_float+0xbc>
 800ebda:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ebde:	d105      	bne.n	800ebec <_printf_float+0xc8>
 800ebe0:	2a00      	cmp	r2, #0
 800ebe2:	f040 81c7 	bne.w	800ef74 <_printf_float+0x450>
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	f8cb 2004 	str.w	r2, [fp, #4]
 800ebec:	f8db 2004 	ldr.w	r2, [fp, #4]
 800ebf0:	f8cd 8010 	str.w	r8, [sp, #16]
 800ebf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ebf8:	e88d 000c 	stmia.w	sp, {r2, r3}
 800ebfc:	f8cb 3000 	str.w	r3, [fp]
 800ec00:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800ec04:	9302      	str	r3, [sp, #8]
 800ec06:	ab0d      	add	r3, sp, #52	; 0x34
 800ec08:	9303      	str	r3, [sp, #12]
 800ec0a:	ab0e      	add	r3, sp, #56	; 0x38
 800ec0c:	9305      	str	r3, [sp, #20]
 800ec0e:	2300      	movs	r3, #0
 800ec10:	9306      	str	r3, [sp, #24]
 800ec12:	4620      	mov	r0, r4
 800ec14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ec18:	f7ff fef3 	bl	800ea02 <__cvt>
 800ec1c:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800ec20:	2b47      	cmp	r3, #71	; 0x47
 800ec22:	4607      	mov	r7, r0
 800ec24:	d10a      	bne.n	800ec3c <_printf_float+0x118>
 800ec26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec28:	1cd8      	adds	r0, r3, #3
 800ec2a:	db03      	blt.n	800ec34 <_printf_float+0x110>
 800ec2c:	f8db 2004 	ldr.w	r2, [fp, #4]
 800ec30:	4293      	cmp	r3, r2
 800ec32:	dd37      	ble.n	800eca4 <_printf_float+0x180>
 800ec34:	f1a8 0802 	sub.w	r8, r8, #2
 800ec38:	fa5f f888 	uxtb.w	r8, r8
 800ec3c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800ec40:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ec42:	d815      	bhi.n	800ec70 <_printf_float+0x14c>
 800ec44:	3901      	subs	r1, #1
 800ec46:	4642      	mov	r2, r8
 800ec48:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 800ec4c:	910d      	str	r1, [sp, #52]	; 0x34
 800ec4e:	f7ff ff38 	bl	800eac2 <__exponent>
 800ec52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec54:	1883      	adds	r3, r0, r2
 800ec56:	2a01      	cmp	r2, #1
 800ec58:	4681      	mov	r9, r0
 800ec5a:	f8cb 3010 	str.w	r3, [fp, #16]
 800ec5e:	dc03      	bgt.n	800ec68 <_printf_float+0x144>
 800ec60:	f8db 2000 	ldr.w	r2, [fp]
 800ec64:	07d1      	lsls	r1, r2, #31
 800ec66:	d538      	bpl.n	800ecda <_printf_float+0x1b6>
 800ec68:	3301      	adds	r3, #1
 800ec6a:	f8cb 3010 	str.w	r3, [fp, #16]
 800ec6e:	e034      	b.n	800ecda <_printf_float+0x1b6>
 800ec70:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800ec74:	d118      	bne.n	800eca8 <_printf_float+0x184>
 800ec76:	2900      	cmp	r1, #0
 800ec78:	f8db 3004 	ldr.w	r3, [fp, #4]
 800ec7c:	dd09      	ble.n	800ec92 <_printf_float+0x16e>
 800ec7e:	f8cb 1010 	str.w	r1, [fp, #16]
 800ec82:	b91b      	cbnz	r3, 800ec8c <_printf_float+0x168>
 800ec84:	f8db 2000 	ldr.w	r2, [fp]
 800ec88:	07d2      	lsls	r2, r2, #31
 800ec8a:	d521      	bpl.n	800ecd0 <_printf_float+0x1ac>
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	440b      	add	r3, r1
 800ec90:	e01c      	b.n	800eccc <_printf_float+0x1a8>
 800ec92:	b91b      	cbnz	r3, 800ec9c <_printf_float+0x178>
 800ec94:	f8db 2000 	ldr.w	r2, [fp]
 800ec98:	07d0      	lsls	r0, r2, #31
 800ec9a:	d501      	bpl.n	800eca0 <_printf_float+0x17c>
 800ec9c:	3302      	adds	r3, #2
 800ec9e:	e015      	b.n	800eccc <_printf_float+0x1a8>
 800eca0:	2301      	movs	r3, #1
 800eca2:	e013      	b.n	800eccc <_printf_float+0x1a8>
 800eca4:	f04f 0867 	mov.w	r8, #103	; 0x67
 800eca8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecac:	4293      	cmp	r3, r2
 800ecae:	db07      	blt.n	800ecc0 <_printf_float+0x19c>
 800ecb0:	f8db 2000 	ldr.w	r2, [fp]
 800ecb4:	f8cb 3010 	str.w	r3, [fp, #16]
 800ecb8:	07d1      	lsls	r1, r2, #31
 800ecba:	d509      	bpl.n	800ecd0 <_printf_float+0x1ac>
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	e005      	b.n	800eccc <_printf_float+0x1a8>
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	bfd4      	ite	le
 800ecc4:	f1c3 0302 	rsble	r3, r3, #2
 800ecc8:	2301      	movgt	r3, #1
 800ecca:	4413      	add	r3, r2
 800eccc:	f8cb 3010 	str.w	r3, [fp, #16]
 800ecd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecd2:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800ecd6:	f04f 0900 	mov.w	r9, #0
 800ecda:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ecde:	b113      	cbz	r3, 800ece6 <_printf_float+0x1c2>
 800ece0:	232d      	movs	r3, #45	; 0x2d
 800ece2:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 800ece6:	9600      	str	r6, [sp, #0]
 800ece8:	4620      	mov	r0, r4
 800ecea:	4659      	mov	r1, fp
 800ecec:	aa0f      	add	r2, sp, #60	; 0x3c
 800ecee:	462b      	mov	r3, r5
 800ecf0:	f000 f95c 	bl	800efac <_printf_common>
 800ecf4:	3001      	adds	r0, #1
 800ecf6:	d102      	bne.n	800ecfe <_printf_float+0x1da>
 800ecf8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecfc:	e152      	b.n	800efa4 <_printf_float+0x480>
 800ecfe:	f8db 3000 	ldr.w	r3, [fp]
 800ed02:	055a      	lsls	r2, r3, #21
 800ed04:	d405      	bmi.n	800ed12 <_printf_float+0x1ee>
 800ed06:	4620      	mov	r0, r4
 800ed08:	4629      	mov	r1, r5
 800ed0a:	463a      	mov	r2, r7
 800ed0c:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ed10:	e108      	b.n	800ef24 <_printf_float+0x400>
 800ed12:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800ed16:	f240 80d0 	bls.w	800eeba <_printf_float+0x396>
 800ed1a:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800ed1e:	2200      	movs	r2, #0
 800ed20:	2300      	movs	r3, #0
 800ed22:	f7ff fd8d 	bl	800e840 <__aeabi_dcmpeq>
 800ed26:	b350      	cbz	r0, 800ed7e <_printf_float+0x25a>
 800ed28:	4620      	mov	r0, r4
 800ed2a:	4629      	mov	r1, r5
 800ed2c:	4a38      	ldr	r2, [pc, #224]	; (800ee10 <_printf_float+0x2ec>)
 800ed2e:	2301      	movs	r3, #1
 800ed30:	47b0      	blx	r6
 800ed32:	3001      	adds	r0, #1
 800ed34:	d0e0      	beq.n	800ecf8 <_printf_float+0x1d4>
 800ed36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	db09      	blt.n	800ed52 <_printf_float+0x22e>
 800ed3e:	f8db 3000 	ldr.w	r3, [fp]
 800ed42:	07d8      	lsls	r0, r3, #31
 800ed44:	d405      	bmi.n	800ed52 <_printf_float+0x22e>
 800ed46:	f8db 3000 	ldr.w	r3, [fp]
 800ed4a:	079f      	lsls	r7, r3, #30
 800ed4c:	f100 8110 	bmi.w	800ef70 <_printf_float+0x44c>
 800ed50:	e107      	b.n	800ef62 <_printf_float+0x43e>
 800ed52:	4620      	mov	r0, r4
 800ed54:	4629      	mov	r1, r5
 800ed56:	4652      	mov	r2, sl
 800ed58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed5a:	47b0      	blx	r6
 800ed5c:	3001      	adds	r0, #1
 800ed5e:	d0cb      	beq.n	800ecf8 <_printf_float+0x1d4>
 800ed60:	2700      	movs	r7, #0
 800ed62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed64:	3b01      	subs	r3, #1
 800ed66:	429f      	cmp	r7, r3
 800ed68:	daed      	bge.n	800ed46 <_printf_float+0x222>
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	4629      	mov	r1, r5
 800ed6e:	f10b 021a 	add.w	r2, fp, #26
 800ed72:	2301      	movs	r3, #1
 800ed74:	47b0      	blx	r6
 800ed76:	3001      	adds	r0, #1
 800ed78:	d0be      	beq.n	800ecf8 <_printf_float+0x1d4>
 800ed7a:	3701      	adds	r7, #1
 800ed7c:	e7f1      	b.n	800ed62 <_printf_float+0x23e>
 800ed7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	dc29      	bgt.n	800edd8 <_printf_float+0x2b4>
 800ed84:	4620      	mov	r0, r4
 800ed86:	4629      	mov	r1, r5
 800ed88:	4a21      	ldr	r2, [pc, #132]	; (800ee10 <_printf_float+0x2ec>)
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	47b0      	blx	r6
 800ed8e:	3001      	adds	r0, #1
 800ed90:	d0b2      	beq.n	800ecf8 <_printf_float+0x1d4>
 800ed92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed94:	b92b      	cbnz	r3, 800eda2 <_printf_float+0x27e>
 800ed96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed98:	b91b      	cbnz	r3, 800eda2 <_printf_float+0x27e>
 800ed9a:	f8db 3000 	ldr.w	r3, [fp]
 800ed9e:	07d9      	lsls	r1, r3, #31
 800eda0:	d5d1      	bpl.n	800ed46 <_printf_float+0x222>
 800eda2:	4620      	mov	r0, r4
 800eda4:	4629      	mov	r1, r5
 800eda6:	4652      	mov	r2, sl
 800eda8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edaa:	47b0      	blx	r6
 800edac:	3001      	adds	r0, #1
 800edae:	d0a3      	beq.n	800ecf8 <_printf_float+0x1d4>
 800edb0:	f04f 0800 	mov.w	r8, #0
 800edb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edb6:	425b      	negs	r3, r3
 800edb8:	4598      	cmp	r8, r3
 800edba:	4620      	mov	r0, r4
 800edbc:	4629      	mov	r1, r5
 800edbe:	da08      	bge.n	800edd2 <_printf_float+0x2ae>
 800edc0:	f10b 021a 	add.w	r2, fp, #26
 800edc4:	2301      	movs	r3, #1
 800edc6:	47b0      	blx	r6
 800edc8:	3001      	adds	r0, #1
 800edca:	d095      	beq.n	800ecf8 <_printf_float+0x1d4>
 800edcc:	f108 0801 	add.w	r8, r8, #1
 800edd0:	e7f0      	b.n	800edb4 <_printf_float+0x290>
 800edd2:	463a      	mov	r2, r7
 800edd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edd6:	e0a5      	b.n	800ef24 <_printf_float+0x400>
 800edd8:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 800eddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edde:	429a      	cmp	r2, r3
 800ede0:	bfa8      	it	ge
 800ede2:	461a      	movge	r2, r3
 800ede4:	2a00      	cmp	r2, #0
 800ede6:	4691      	mov	r9, r2
 800ede8:	dc02      	bgt.n	800edf0 <_printf_float+0x2cc>
 800edea:	f04f 0800 	mov.w	r8, #0
 800edee:	e01c      	b.n	800ee2a <_printf_float+0x306>
 800edf0:	4620      	mov	r0, r4
 800edf2:	4629      	mov	r1, r5
 800edf4:	463a      	mov	r2, r7
 800edf6:	464b      	mov	r3, r9
 800edf8:	47b0      	blx	r6
 800edfa:	3001      	adds	r0, #1
 800edfc:	d1f5      	bne.n	800edea <_printf_float+0x2c6>
 800edfe:	e77b      	b.n	800ecf8 <_printf_float+0x1d4>
 800ee00:	080116f4 	.word	0x080116f4
 800ee04:	080116f0 	.word	0x080116f0
 800ee08:	080116fc 	.word	0x080116fc
 800ee0c:	080116f8 	.word	0x080116f8
 800ee10:	08011700 	.word	0x08011700
 800ee14:	4620      	mov	r0, r4
 800ee16:	4629      	mov	r1, r5
 800ee18:	f10b 021a 	add.w	r2, fp, #26
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	47b0      	blx	r6
 800ee20:	3001      	adds	r0, #1
 800ee22:	f43f af69 	beq.w	800ecf8 <_printf_float+0x1d4>
 800ee26:	f108 0801 	add.w	r8, r8, #1
 800ee2a:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800ee2e:	f1b9 0f00 	cmp.w	r9, #0
 800ee32:	bfac      	ite	ge
 800ee34:	ebc9 0203 	rsbge	r2, r9, r3
 800ee38:	461a      	movlt	r2, r3
 800ee3a:	4590      	cmp	r8, r2
 800ee3c:	dbea      	blt.n	800ee14 <_printf_float+0x2f0>
 800ee3e:	eb07 0803 	add.w	r8, r7, r3
 800ee42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee46:	429a      	cmp	r2, r3
 800ee48:	db10      	blt.n	800ee6c <_printf_float+0x348>
 800ee4a:	f8db 3000 	ldr.w	r3, [fp]
 800ee4e:	07da      	lsls	r2, r3, #31
 800ee50:	d40c      	bmi.n	800ee6c <_printf_float+0x348>
 800ee52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee54:	4417      	add	r7, r2
 800ee56:	ebc8 0307 	rsb	r3, r8, r7
 800ee5a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ee5c:	1bd2      	subs	r2, r2, r7
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	bfa8      	it	ge
 800ee62:	4613      	movge	r3, r2
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	461f      	mov	r7, r3
 800ee68:	dc08      	bgt.n	800ee7c <_printf_float+0x358>
 800ee6a:	e00e      	b.n	800ee8a <_printf_float+0x366>
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	4629      	mov	r1, r5
 800ee70:	4652      	mov	r2, sl
 800ee72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee74:	47b0      	blx	r6
 800ee76:	3001      	adds	r0, #1
 800ee78:	d1eb      	bne.n	800ee52 <_printf_float+0x32e>
 800ee7a:	e73d      	b.n	800ecf8 <_printf_float+0x1d4>
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	4629      	mov	r1, r5
 800ee80:	4642      	mov	r2, r8
 800ee82:	47b0      	blx	r6
 800ee84:	3001      	adds	r0, #1
 800ee86:	f43f af37 	beq.w	800ecf8 <_printf_float+0x1d4>
 800ee8a:	f04f 0800 	mov.w	r8, #0
 800ee8e:	e00a      	b.n	800eea6 <_printf_float+0x382>
 800ee90:	4620      	mov	r0, r4
 800ee92:	4629      	mov	r1, r5
 800ee94:	f10b 021a 	add.w	r2, fp, #26
 800ee98:	2301      	movs	r3, #1
 800ee9a:	47b0      	blx	r6
 800ee9c:	3001      	adds	r0, #1
 800ee9e:	f43f af2b 	beq.w	800ecf8 <_printf_float+0x1d4>
 800eea2:	f108 0801 	add.w	r8, r8, #1
 800eea6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eeaa:	2f00      	cmp	r7, #0
 800eeac:	eba3 0302 	sub.w	r3, r3, r2
 800eeb0:	bfa8      	it	ge
 800eeb2:	1bdb      	subge	r3, r3, r7
 800eeb4:	4598      	cmp	r8, r3
 800eeb6:	dbeb      	blt.n	800ee90 <_printf_float+0x36c>
 800eeb8:	e745      	b.n	800ed46 <_printf_float+0x222>
 800eeba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eebc:	2a01      	cmp	r2, #1
 800eebe:	dc01      	bgt.n	800eec4 <_printf_float+0x3a0>
 800eec0:	07db      	lsls	r3, r3, #31
 800eec2:	d536      	bpl.n	800ef32 <_printf_float+0x40e>
 800eec4:	4620      	mov	r0, r4
 800eec6:	4629      	mov	r1, r5
 800eec8:	463a      	mov	r2, r7
 800eeca:	2301      	movs	r3, #1
 800eecc:	47b0      	blx	r6
 800eece:	3001      	adds	r0, #1
 800eed0:	f43f af12 	beq.w	800ecf8 <_printf_float+0x1d4>
 800eed4:	4620      	mov	r0, r4
 800eed6:	4629      	mov	r1, r5
 800eed8:	4652      	mov	r2, sl
 800eeda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eedc:	47b0      	blx	r6
 800eede:	3001      	adds	r0, #1
 800eee0:	f43f af0a 	beq.w	800ecf8 <_printf_float+0x1d4>
 800eee4:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800eee8:	2200      	movs	r2, #0
 800eeea:	2300      	movs	r3, #0
 800eeec:	f7ff fca8 	bl	800e840 <__aeabi_dcmpeq>
 800eef0:	b9e8      	cbnz	r0, 800ef2e <_printf_float+0x40a>
 800eef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eef4:	4620      	mov	r0, r4
 800eef6:	4629      	mov	r1, r5
 800eef8:	1c7a      	adds	r2, r7, #1
 800eefa:	3b01      	subs	r3, #1
 800eefc:	e01d      	b.n	800ef3a <_printf_float+0x416>
 800eefe:	4620      	mov	r0, r4
 800ef00:	4629      	mov	r1, r5
 800ef02:	f10b 021a 	add.w	r2, fp, #26
 800ef06:	2301      	movs	r3, #1
 800ef08:	47b0      	blx	r6
 800ef0a:	3001      	adds	r0, #1
 800ef0c:	f43f aef4 	beq.w	800ecf8 <_printf_float+0x1d4>
 800ef10:	3701      	adds	r7, #1
 800ef12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef14:	3b01      	subs	r3, #1
 800ef16:	429f      	cmp	r7, r3
 800ef18:	dbf1      	blt.n	800eefe <_printf_float+0x3da>
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	4629      	mov	r1, r5
 800ef1e:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 800ef22:	464b      	mov	r3, r9
 800ef24:	47b0      	blx	r6
 800ef26:	3001      	adds	r0, #1
 800ef28:	f47f af0d 	bne.w	800ed46 <_printf_float+0x222>
 800ef2c:	e6e4      	b.n	800ecf8 <_printf_float+0x1d4>
 800ef2e:	2700      	movs	r7, #0
 800ef30:	e7ef      	b.n	800ef12 <_printf_float+0x3ee>
 800ef32:	4620      	mov	r0, r4
 800ef34:	4629      	mov	r1, r5
 800ef36:	463a      	mov	r2, r7
 800ef38:	2301      	movs	r3, #1
 800ef3a:	47b0      	blx	r6
 800ef3c:	3001      	adds	r0, #1
 800ef3e:	d1ec      	bne.n	800ef1a <_printf_float+0x3f6>
 800ef40:	e6da      	b.n	800ecf8 <_printf_float+0x1d4>
 800ef42:	4620      	mov	r0, r4
 800ef44:	4629      	mov	r1, r5
 800ef46:	f10b 0219 	add.w	r2, fp, #25
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	47b0      	blx	r6
 800ef4e:	3001      	adds	r0, #1
 800ef50:	f43f aed2 	beq.w	800ecf8 <_printf_float+0x1d4>
 800ef54:	3701      	adds	r7, #1
 800ef56:	f8db 300c 	ldr.w	r3, [fp, #12]
 800ef5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef5c:	1a9b      	subs	r3, r3, r2
 800ef5e:	429f      	cmp	r7, r3
 800ef60:	dbef      	blt.n	800ef42 <_printf_float+0x41e>
 800ef62:	f8db 000c 	ldr.w	r0, [fp, #12]
 800ef66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef68:	4298      	cmp	r0, r3
 800ef6a:	bfb8      	it	lt
 800ef6c:	4618      	movlt	r0, r3
 800ef6e:	e019      	b.n	800efa4 <_printf_float+0x480>
 800ef70:	2700      	movs	r7, #0
 800ef72:	e7f0      	b.n	800ef56 <_printf_float+0x432>
 800ef74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ef78:	e88d 000c 	stmia.w	sp, {r2, r3}
 800ef7c:	f8cb 3000 	str.w	r3, [fp]
 800ef80:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800ef84:	9302      	str	r3, [sp, #8]
 800ef86:	ab0d      	add	r3, sp, #52	; 0x34
 800ef88:	9303      	str	r3, [sp, #12]
 800ef8a:	ab0e      	add	r3, sp, #56	; 0x38
 800ef8c:	9305      	str	r3, [sp, #20]
 800ef8e:	2300      	movs	r3, #0
 800ef90:	9306      	str	r3, [sp, #24]
 800ef92:	f8cd 8010 	str.w	r8, [sp, #16]
 800ef96:	4620      	mov	r0, r4
 800ef98:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ef9c:	f7ff fd31 	bl	800ea02 <__cvt>
 800efa0:	4607      	mov	r7, r0
 800efa2:	e640      	b.n	800ec26 <_printf_float+0x102>
 800efa4:	b011      	add	sp, #68	; 0x44
 800efa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efaa:	bf00      	nop

0800efac <_printf_common>:
 800efac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efb0:	4691      	mov	r9, r2
 800efb2:	461f      	mov	r7, r3
 800efb4:	688a      	ldr	r2, [r1, #8]
 800efb6:	690b      	ldr	r3, [r1, #16]
 800efb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efbc:	4293      	cmp	r3, r2
 800efbe:	bfb8      	it	lt
 800efc0:	4613      	movlt	r3, r2
 800efc2:	f8c9 3000 	str.w	r3, [r9]
 800efc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efca:	4606      	mov	r6, r0
 800efcc:	460c      	mov	r4, r1
 800efce:	b112      	cbz	r2, 800efd6 <_printf_common+0x2a>
 800efd0:	3301      	adds	r3, #1
 800efd2:	f8c9 3000 	str.w	r3, [r9]
 800efd6:	6823      	ldr	r3, [r4, #0]
 800efd8:	0699      	lsls	r1, r3, #26
 800efda:	bf42      	ittt	mi
 800efdc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800efe0:	3302      	addmi	r3, #2
 800efe2:	f8c9 3000 	strmi.w	r3, [r9]
 800efe6:	6825      	ldr	r5, [r4, #0]
 800efe8:	f015 0506 	ands.w	r5, r5, #6
 800efec:	d01c      	beq.n	800f028 <_printf_common+0x7c>
 800efee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800eff2:	6822      	ldr	r2, [r4, #0]
 800eff4:	3300      	adds	r3, #0
 800eff6:	bf18      	it	ne
 800eff8:	2301      	movne	r3, #1
 800effa:	0692      	lsls	r2, r2, #26
 800effc:	d51f      	bpl.n	800f03e <_printf_common+0x92>
 800effe:	18e1      	adds	r1, r4, r3
 800f000:	1c5a      	adds	r2, r3, #1
 800f002:	2030      	movs	r0, #48	; 0x30
 800f004:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f008:	4422      	add	r2, r4
 800f00a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f00e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f012:	3302      	adds	r3, #2
 800f014:	e013      	b.n	800f03e <_printf_common+0x92>
 800f016:	4630      	mov	r0, r6
 800f018:	4639      	mov	r1, r7
 800f01a:	f104 0219 	add.w	r2, r4, #25
 800f01e:	2301      	movs	r3, #1
 800f020:	47c0      	blx	r8
 800f022:	3001      	adds	r0, #1
 800f024:	d007      	beq.n	800f036 <_printf_common+0x8a>
 800f026:	3501      	adds	r5, #1
 800f028:	68e3      	ldr	r3, [r4, #12]
 800f02a:	f8d9 2000 	ldr.w	r2, [r9]
 800f02e:	1a9b      	subs	r3, r3, r2
 800f030:	429d      	cmp	r5, r3
 800f032:	dbf0      	blt.n	800f016 <_printf_common+0x6a>
 800f034:	e7db      	b.n	800efee <_printf_common+0x42>
 800f036:	f04f 30ff 	mov.w	r0, #4294967295
 800f03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f03e:	4630      	mov	r0, r6
 800f040:	4639      	mov	r1, r7
 800f042:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f046:	47c0      	blx	r8
 800f048:	3001      	adds	r0, #1
 800f04a:	d0f4      	beq.n	800f036 <_printf_common+0x8a>
 800f04c:	6822      	ldr	r2, [r4, #0]
 800f04e:	f8d9 5000 	ldr.w	r5, [r9]
 800f052:	68e3      	ldr	r3, [r4, #12]
 800f054:	f002 0206 	and.w	r2, r2, #6
 800f058:	2a04      	cmp	r2, #4
 800f05a:	bf08      	it	eq
 800f05c:	1b5d      	subeq	r5, r3, r5
 800f05e:	6922      	ldr	r2, [r4, #16]
 800f060:	68a3      	ldr	r3, [r4, #8]
 800f062:	bf0c      	ite	eq
 800f064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f068:	2500      	movne	r5, #0
 800f06a:	4293      	cmp	r3, r2
 800f06c:	bfc4      	itt	gt
 800f06e:	1a9b      	subgt	r3, r3, r2
 800f070:	18ed      	addgt	r5, r5, r3
 800f072:	f04f 0900 	mov.w	r9, #0
 800f076:	45a9      	cmp	r9, r5
 800f078:	da0a      	bge.n	800f090 <_printf_common+0xe4>
 800f07a:	4630      	mov	r0, r6
 800f07c:	4639      	mov	r1, r7
 800f07e:	f104 021a 	add.w	r2, r4, #26
 800f082:	2301      	movs	r3, #1
 800f084:	47c0      	blx	r8
 800f086:	3001      	adds	r0, #1
 800f088:	d0d5      	beq.n	800f036 <_printf_common+0x8a>
 800f08a:	f109 0901 	add.w	r9, r9, #1
 800f08e:	e7f2      	b.n	800f076 <_printf_common+0xca>
 800f090:	2000      	movs	r0, #0
 800f092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800f098 <_printf_i>:
 800f098:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f09c:	460c      	mov	r4, r1
 800f09e:	4617      	mov	r7, r2
 800f0a0:	7e22      	ldrb	r2, [r4, #24]
 800f0a2:	2a6e      	cmp	r2, #110	; 0x6e
 800f0a4:	4698      	mov	r8, r3
 800f0a6:	4606      	mov	r6, r0
 800f0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0aa:	f101 0143 	add.w	r1, r1, #67	; 0x43
 800f0ae:	f000 80a9 	beq.w	800f204 <_printf_i+0x16c>
 800f0b2:	d812      	bhi.n	800f0da <_printf_i+0x42>
 800f0b4:	2a63      	cmp	r2, #99	; 0x63
 800f0b6:	d023      	beq.n	800f100 <_printf_i+0x68>
 800f0b8:	d80a      	bhi.n	800f0d0 <_printf_i+0x38>
 800f0ba:	2a00      	cmp	r2, #0
 800f0bc:	f000 80b6 	beq.w	800f22c <_printf_i+0x194>
 800f0c0:	2a58      	cmp	r2, #88	; 0x58
 800f0c2:	f040 80c5 	bne.w	800f250 <_printf_i+0x1b8>
 800f0c6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800f0ca:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 800f2c4 <_printf_i+0x22c>
 800f0ce:	e051      	b.n	800f174 <_printf_i+0xdc>
 800f0d0:	2a64      	cmp	r2, #100	; 0x64
 800f0d2:	d01e      	beq.n	800f112 <_printf_i+0x7a>
 800f0d4:	2a69      	cmp	r2, #105	; 0x69
 800f0d6:	d01c      	beq.n	800f112 <_printf_i+0x7a>
 800f0d8:	e0ba      	b.n	800f250 <_printf_i+0x1b8>
 800f0da:	2a73      	cmp	r2, #115	; 0x73
 800f0dc:	f000 80aa 	beq.w	800f234 <_printf_i+0x19c>
 800f0e0:	d809      	bhi.n	800f0f6 <_printf_i+0x5e>
 800f0e2:	2a6f      	cmp	r2, #111	; 0x6f
 800f0e4:	d02b      	beq.n	800f13e <_printf_i+0xa6>
 800f0e6:	2a70      	cmp	r2, #112	; 0x70
 800f0e8:	f040 80b2 	bne.w	800f250 <_printf_i+0x1b8>
 800f0ec:	6822      	ldr	r2, [r4, #0]
 800f0ee:	f042 0220 	orr.w	r2, r2, #32
 800f0f2:	6022      	str	r2, [r4, #0]
 800f0f4:	e039      	b.n	800f16a <_printf_i+0xd2>
 800f0f6:	2a75      	cmp	r2, #117	; 0x75
 800f0f8:	d021      	beq.n	800f13e <_printf_i+0xa6>
 800f0fa:	2a78      	cmp	r2, #120	; 0x78
 800f0fc:	d035      	beq.n	800f16a <_printf_i+0xd2>
 800f0fe:	e0a7      	b.n	800f250 <_printf_i+0x1b8>
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	1d11      	adds	r1, r2, #4
 800f104:	6019      	str	r1, [r3, #0]
 800f106:	6813      	ldr	r3, [r2, #0]
 800f108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f10c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f110:	e0a2      	b.n	800f258 <_printf_i+0x1c0>
 800f112:	6820      	ldr	r0, [r4, #0]
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	f010 0f80 	tst.w	r0, #128	; 0x80
 800f11a:	d003      	beq.n	800f124 <_printf_i+0x8c>
 800f11c:	1d10      	adds	r0, r2, #4
 800f11e:	6018      	str	r0, [r3, #0]
 800f120:	6813      	ldr	r3, [r2, #0]
 800f122:	e005      	b.n	800f130 <_printf_i+0x98>
 800f124:	0645      	lsls	r5, r0, #25
 800f126:	d5f9      	bpl.n	800f11c <_printf_i+0x84>
 800f128:	1d10      	adds	r0, r2, #4
 800f12a:	6018      	str	r0, [r3, #0]
 800f12c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800f130:	2b00      	cmp	r3, #0
 800f132:	da3b      	bge.n	800f1ac <_printf_i+0x114>
 800f134:	222d      	movs	r2, #45	; 0x2d
 800f136:	425b      	negs	r3, r3
 800f138:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f13c:	e036      	b.n	800f1ac <_printf_i+0x114>
 800f13e:	6820      	ldr	r0, [r4, #0]
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	f010 0f80 	tst.w	r0, #128	; 0x80
 800f146:	d003      	beq.n	800f150 <_printf_i+0xb8>
 800f148:	1d10      	adds	r0, r2, #4
 800f14a:	6018      	str	r0, [r3, #0]
 800f14c:	6813      	ldr	r3, [r2, #0]
 800f14e:	e004      	b.n	800f15a <_printf_i+0xc2>
 800f150:	0640      	lsls	r0, r0, #25
 800f152:	d5f9      	bpl.n	800f148 <_printf_i+0xb0>
 800f154:	1d10      	adds	r0, r2, #4
 800f156:	6018      	str	r0, [r3, #0]
 800f158:	8813      	ldrh	r3, [r2, #0]
 800f15a:	7e22      	ldrb	r2, [r4, #24]
 800f15c:	f8df e164 	ldr.w	lr, [pc, #356]	; 800f2c4 <_printf_i+0x22c>
 800f160:	2a6f      	cmp	r2, #111	; 0x6f
 800f162:	bf0c      	ite	eq
 800f164:	2208      	moveq	r2, #8
 800f166:	220a      	movne	r2, #10
 800f168:	e01c      	b.n	800f1a4 <_printf_i+0x10c>
 800f16a:	2278      	movs	r2, #120	; 0x78
 800f16c:	f8df e158 	ldr.w	lr, [pc, #344]	; 800f2c8 <_printf_i+0x230>
 800f170:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800f174:	6822      	ldr	r2, [r4, #0]
 800f176:	6818      	ldr	r0, [r3, #0]
 800f178:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f17c:	f100 0504 	add.w	r5, r0, #4
 800f180:	601d      	str	r5, [r3, #0]
 800f182:	d001      	beq.n	800f188 <_printf_i+0xf0>
 800f184:	6803      	ldr	r3, [r0, #0]
 800f186:	e002      	b.n	800f18e <_printf_i+0xf6>
 800f188:	0655      	lsls	r5, r2, #25
 800f18a:	d5fb      	bpl.n	800f184 <_printf_i+0xec>
 800f18c:	8803      	ldrh	r3, [r0, #0]
 800f18e:	07d0      	lsls	r0, r2, #31
 800f190:	bf44      	itt	mi
 800f192:	f042 0220 	orrmi.w	r2, r2, #32
 800f196:	6022      	strmi	r2, [r4, #0]
 800f198:	b91b      	cbnz	r3, 800f1a2 <_printf_i+0x10a>
 800f19a:	6822      	ldr	r2, [r4, #0]
 800f19c:	f022 0220 	bic.w	r2, r2, #32
 800f1a0:	6022      	str	r2, [r4, #0]
 800f1a2:	2210      	movs	r2, #16
 800f1a4:	2000      	movs	r0, #0
 800f1a6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800f1aa:	e002      	b.n	800f1b2 <_printf_i+0x11a>
 800f1ac:	f8df e114 	ldr.w	lr, [pc, #276]	; 800f2c4 <_printf_i+0x22c>
 800f1b0:	220a      	movs	r2, #10
 800f1b2:	6865      	ldr	r5, [r4, #4]
 800f1b4:	60a5      	str	r5, [r4, #8]
 800f1b6:	2d00      	cmp	r5, #0
 800f1b8:	bfa2      	ittt	ge
 800f1ba:	6820      	ldrge	r0, [r4, #0]
 800f1bc:	f020 0004 	bicge.w	r0, r0, #4
 800f1c0:	6020      	strge	r0, [r4, #0]
 800f1c2:	b903      	cbnz	r3, 800f1c6 <_printf_i+0x12e>
 800f1c4:	b165      	cbz	r5, 800f1e0 <_printf_i+0x148>
 800f1c6:	460d      	mov	r5, r1
 800f1c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1cc:	fb02 3310 	mls	r3, r2, r0, r3
 800f1d0:	f81e 3003 	ldrb.w	r3, [lr, r3]
 800f1d4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2800      	cmp	r0, #0
 800f1dc:	d1f4      	bne.n	800f1c8 <_printf_i+0x130>
 800f1de:	e000      	b.n	800f1e2 <_printf_i+0x14a>
 800f1e0:	460d      	mov	r5, r1
 800f1e2:	2a08      	cmp	r2, #8
 800f1e4:	d10b      	bne.n	800f1fe <_printf_i+0x166>
 800f1e6:	6823      	ldr	r3, [r4, #0]
 800f1e8:	07da      	lsls	r2, r3, #31
 800f1ea:	d508      	bpl.n	800f1fe <_printf_i+0x166>
 800f1ec:	6923      	ldr	r3, [r4, #16]
 800f1ee:	6862      	ldr	r2, [r4, #4]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	bfde      	ittt	le
 800f1f4:	2330      	movle	r3, #48	; 0x30
 800f1f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f1fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f1fe:	1b49      	subs	r1, r1, r5
 800f200:	6121      	str	r1, [r4, #16]
 800f202:	e02e      	b.n	800f262 <_printf_i+0x1ca>
 800f204:	6825      	ldr	r5, [r4, #0]
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	6960      	ldr	r0, [r4, #20]
 800f20a:	f015 0f80 	tst.w	r5, #128	; 0x80
 800f20e:	d003      	beq.n	800f218 <_printf_i+0x180>
 800f210:	1d15      	adds	r5, r2, #4
 800f212:	601d      	str	r5, [r3, #0]
 800f214:	6813      	ldr	r3, [r2, #0]
 800f216:	e008      	b.n	800f22a <_printf_i+0x192>
 800f218:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f21c:	f102 0504 	add.w	r5, r2, #4
 800f220:	601d      	str	r5, [r3, #0]
 800f222:	6813      	ldr	r3, [r2, #0]
 800f224:	d001      	beq.n	800f22a <_printf_i+0x192>
 800f226:	8018      	strh	r0, [r3, #0]
 800f228:	e000      	b.n	800f22c <_printf_i+0x194>
 800f22a:	6018      	str	r0, [r3, #0]
 800f22c:	2300      	movs	r3, #0
 800f22e:	6123      	str	r3, [r4, #16]
 800f230:	460d      	mov	r5, r1
 800f232:	e016      	b.n	800f262 <_printf_i+0x1ca>
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	1d11      	adds	r1, r2, #4
 800f238:	6019      	str	r1, [r3, #0]
 800f23a:	6815      	ldr	r5, [r2, #0]
 800f23c:	6862      	ldr	r2, [r4, #4]
 800f23e:	4628      	mov	r0, r5
 800f240:	2100      	movs	r1, #0
 800f242:	f000 ffe9 	bl	8010218 <memchr>
 800f246:	b108      	cbz	r0, 800f24c <_printf_i+0x1b4>
 800f248:	1b40      	subs	r0, r0, r5
 800f24a:	6060      	str	r0, [r4, #4]
 800f24c:	6863      	ldr	r3, [r4, #4]
 800f24e:	e004      	b.n	800f25a <_printf_i+0x1c2>
 800f250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f254:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800f258:	2301      	movs	r3, #1
 800f25a:	6123      	str	r3, [r4, #16]
 800f25c:	2300      	movs	r3, #0
 800f25e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f262:	f8cd 8000 	str.w	r8, [sp]
 800f266:	4630      	mov	r0, r6
 800f268:	4621      	mov	r1, r4
 800f26a:	aa03      	add	r2, sp, #12
 800f26c:	463b      	mov	r3, r7
 800f26e:	f7ff fe9d 	bl	800efac <_printf_common>
 800f272:	3001      	adds	r0, #1
 800f274:	d102      	bne.n	800f27c <_printf_i+0x1e4>
 800f276:	f04f 30ff 	mov.w	r0, #4294967295
 800f27a:	e01f      	b.n	800f2bc <_printf_i+0x224>
 800f27c:	4630      	mov	r0, r6
 800f27e:	4639      	mov	r1, r7
 800f280:	462a      	mov	r2, r5
 800f282:	6923      	ldr	r3, [r4, #16]
 800f284:	47c0      	blx	r8
 800f286:	3001      	adds	r0, #1
 800f288:	d0f5      	beq.n	800f276 <_printf_i+0x1de>
 800f28a:	6823      	ldr	r3, [r4, #0]
 800f28c:	079b      	lsls	r3, r3, #30
 800f28e:	d405      	bmi.n	800f29c <_printf_i+0x204>
 800f290:	68e0      	ldr	r0, [r4, #12]
 800f292:	9b03      	ldr	r3, [sp, #12]
 800f294:	4298      	cmp	r0, r3
 800f296:	bfb8      	it	lt
 800f298:	4618      	movlt	r0, r3
 800f29a:	e00f      	b.n	800f2bc <_printf_i+0x224>
 800f29c:	2500      	movs	r5, #0
 800f29e:	68e3      	ldr	r3, [r4, #12]
 800f2a0:	9a03      	ldr	r2, [sp, #12]
 800f2a2:	1a9b      	subs	r3, r3, r2
 800f2a4:	429d      	cmp	r5, r3
 800f2a6:	daf3      	bge.n	800f290 <_printf_i+0x1f8>
 800f2a8:	4630      	mov	r0, r6
 800f2aa:	4639      	mov	r1, r7
 800f2ac:	f104 0219 	add.w	r2, r4, #25
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	47c0      	blx	r8
 800f2b4:	3001      	adds	r0, #1
 800f2b6:	d0de      	beq.n	800f276 <_printf_i+0x1de>
 800f2b8:	3501      	adds	r5, #1
 800f2ba:	e7f0      	b.n	800f29e <_printf_i+0x206>
 800f2bc:	b004      	add	sp, #16
 800f2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c2:	bf00      	nop
 800f2c4:	08011702 	.word	0x08011702
 800f2c8:	08011713 	.word	0x08011713

0800f2cc <iprintf>:
 800f2cc:	b40f      	push	{r0, r1, r2, r3}
 800f2ce:	4b0a      	ldr	r3, [pc, #40]	; (800f2f8 <iprintf+0x2c>)
 800f2d0:	b513      	push	{r0, r1, r4, lr}
 800f2d2:	681c      	ldr	r4, [r3, #0]
 800f2d4:	b124      	cbz	r4, 800f2e0 <iprintf+0x14>
 800f2d6:	69a3      	ldr	r3, [r4, #24]
 800f2d8:	b913      	cbnz	r3, 800f2e0 <iprintf+0x14>
 800f2da:	4620      	mov	r0, r4
 800f2dc:	f000 ff08 	bl	80100f0 <__sinit>
 800f2e0:	ab05      	add	r3, sp, #20
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	68a1      	ldr	r1, [r4, #8]
 800f2e6:	9a04      	ldr	r2, [sp, #16]
 800f2e8:	9301      	str	r3, [sp, #4]
 800f2ea:	f001 fc9f 	bl	8010c2c <_vfiprintf_r>
 800f2ee:	b002      	add	sp, #8
 800f2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2f4:	b004      	add	sp, #16
 800f2f6:	4770      	bx	lr
 800f2f8:	1ffe8970 	.word	0x1ffe8970

0800f2fc <rand>:
 800f2fc:	4b19      	ldr	r3, [pc, #100]	; (800f364 <rand+0x68>)
 800f2fe:	b510      	push	{r4, lr}
 800f300:	681c      	ldr	r4, [r3, #0]
 800f302:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f304:	b9d3      	cbnz	r3, 800f33c <rand+0x40>
 800f306:	2018      	movs	r0, #24
 800f308:	f000 ff7e 	bl	8010208 <malloc>
 800f30c:	f243 330e 	movw	r3, #13070	; 0x330e
 800f310:	63a0      	str	r0, [r4, #56]	; 0x38
 800f312:	8003      	strh	r3, [r0, #0]
 800f314:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800f318:	8043      	strh	r3, [r0, #2]
 800f31a:	f241 2334 	movw	r3, #4660	; 0x1234
 800f31e:	8083      	strh	r3, [r0, #4]
 800f320:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800f324:	80c3      	strh	r3, [r0, #6]
 800f326:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800f32a:	8103      	strh	r3, [r0, #8]
 800f32c:	2305      	movs	r3, #5
 800f32e:	8143      	strh	r3, [r0, #10]
 800f330:	230b      	movs	r3, #11
 800f332:	8183      	strh	r3, [r0, #12]
 800f334:	2201      	movs	r2, #1
 800f336:	2300      	movs	r3, #0
 800f338:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f33c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f33e:	4c0a      	ldr	r4, [pc, #40]	; (800f368 <rand+0x6c>)
 800f340:	690b      	ldr	r3, [r1, #16]
 800f342:	6948      	ldr	r0, [r1, #20]
 800f344:	4a09      	ldr	r2, [pc, #36]	; (800f36c <rand+0x70>)
 800f346:	435c      	muls	r4, r3
 800f348:	fb02 4000 	mla	r0, r2, r0, r4
 800f34c:	fba3 2302 	umull	r2, r3, r3, r2
 800f350:	3201      	adds	r2, #1
 800f352:	4403      	add	r3, r0
 800f354:	f143 0300 	adc.w	r3, r3, #0
 800f358:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f35c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800f360:	bd10      	pop	{r4, pc}
 800f362:	bf00      	nop
 800f364:	1ffe8970 	.word	0x1ffe8970
 800f368:	5851f42d 	.word	0x5851f42d
 800f36c:	4c957f2d 	.word	0x4c957f2d

0800f370 <siprintf>:
 800f370:	b40e      	push	{r1, r2, r3}
 800f372:	b500      	push	{lr}
 800f374:	b09c      	sub	sp, #112	; 0x70
 800f376:	f44f 7102 	mov.w	r1, #520	; 0x208
 800f37a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f37e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f382:	9104      	str	r1, [sp, #16]
 800f384:	9107      	str	r1, [sp, #28]
 800f386:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f38a:	ab1d      	add	r3, sp, #116	; 0x74
 800f38c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f390:	4908      	ldr	r1, [pc, #32]	; (800f3b4 <siprintf+0x44>)
 800f392:	f853 2b04 	ldr.w	r2, [r3], #4
 800f396:	9002      	str	r0, [sp, #8]
 800f398:	9006      	str	r0, [sp, #24]
 800f39a:	6808      	ldr	r0, [r1, #0]
 800f39c:	9301      	str	r3, [sp, #4]
 800f39e:	a902      	add	r1, sp, #8
 800f3a0:	f001 fb2a 	bl	80109f8 <_svfiprintf_r>
 800f3a4:	9b02      	ldr	r3, [sp, #8]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	701a      	strb	r2, [r3, #0]
 800f3aa:	b01c      	add	sp, #112	; 0x70
 800f3ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3b0:	b003      	add	sp, #12
 800f3b2:	4770      	bx	lr
 800f3b4:	1ffe8970 	.word	0x1ffe8970

0800f3b8 <strlen>:
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3be:	2a00      	cmp	r2, #0
 800f3c0:	d1fb      	bne.n	800f3ba <strlen+0x2>
 800f3c2:	1a18      	subs	r0, r3, r0
 800f3c4:	3801      	subs	r0, #1
 800f3c6:	4770      	bx	lr

0800f3c8 <quorem>:
 800f3c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3cc:	6903      	ldr	r3, [r0, #16]
 800f3ce:	690c      	ldr	r4, [r1, #16]
 800f3d0:	42a3      	cmp	r3, r4
 800f3d2:	4680      	mov	r8, r0
 800f3d4:	f2c0 8081 	blt.w	800f4da <quorem+0x112>
 800f3d8:	3c01      	subs	r4, #1
 800f3da:	f101 0714 	add.w	r7, r1, #20
 800f3de:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800f3e2:	f100 0614 	add.w	r6, r0, #20
 800f3e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f3ea:	eb06 030e 	add.w	r3, r6, lr
 800f3ee:	9301      	str	r3, [sp, #4]
 800f3f0:	3501      	adds	r5, #1
 800f3f2:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800f3f6:	fbb3 f5f5 	udiv	r5, r3, r5
 800f3fa:	eb07 090e 	add.w	r9, r7, lr
 800f3fe:	b3c5      	cbz	r5, 800f472 <quorem+0xaa>
 800f400:	f04f 0a00 	mov.w	sl, #0
 800f404:	4638      	mov	r0, r7
 800f406:	46b4      	mov	ip, r6
 800f408:	46d3      	mov	fp, sl
 800f40a:	f850 3b04 	ldr.w	r3, [r0], #4
 800f40e:	b29a      	uxth	r2, r3
 800f410:	0c1b      	lsrs	r3, r3, #16
 800f412:	fb02 a205 	mla	r2, r2, r5, sl
 800f416:	436b      	muls	r3, r5
 800f418:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f41c:	b292      	uxth	r2, r2
 800f41e:	ebc2 020b 	rsb	r2, r2, fp
 800f422:	f8bc b000 	ldrh.w	fp, [ip]
 800f426:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f42a:	fa12 f28b 	uxtah	r2, r2, fp
 800f42e:	fa1f fb83 	uxth.w	fp, r3
 800f432:	f8dc 3000 	ldr.w	r3, [ip]
 800f436:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 800f43a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800f43e:	b292      	uxth	r2, r2
 800f440:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f444:	4548      	cmp	r0, r9
 800f446:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f44a:	f84c 2b04 	str.w	r2, [ip], #4
 800f44e:	d9dc      	bls.n	800f40a <quorem+0x42>
 800f450:	f856 300e 	ldr.w	r3, [r6, lr]
 800f454:	b96b      	cbnz	r3, 800f472 <quorem+0xaa>
 800f456:	9b01      	ldr	r3, [sp, #4]
 800f458:	3b04      	subs	r3, #4
 800f45a:	42b3      	cmp	r3, r6
 800f45c:	461a      	mov	r2, r3
 800f45e:	d802      	bhi.n	800f466 <quorem+0x9e>
 800f460:	f8c8 4010 	str.w	r4, [r8, #16]
 800f464:	e005      	b.n	800f472 <quorem+0xaa>
 800f466:	6812      	ldr	r2, [r2, #0]
 800f468:	3b04      	subs	r3, #4
 800f46a:	2a00      	cmp	r2, #0
 800f46c:	d1f8      	bne.n	800f460 <quorem+0x98>
 800f46e:	3c01      	subs	r4, #1
 800f470:	e7f3      	b.n	800f45a <quorem+0x92>
 800f472:	4640      	mov	r0, r8
 800f474:	f001 f8f1 	bl	801065a <__mcmp>
 800f478:	2800      	cmp	r0, #0
 800f47a:	db2c      	blt.n	800f4d6 <quorem+0x10e>
 800f47c:	3501      	adds	r5, #1
 800f47e:	4630      	mov	r0, r6
 800f480:	f04f 0e00 	mov.w	lr, #0
 800f484:	f857 1b04 	ldr.w	r1, [r7], #4
 800f488:	f8d0 c000 	ldr.w	ip, [r0]
 800f48c:	b28a      	uxth	r2, r1
 800f48e:	ebc2 030e 	rsb	r3, r2, lr
 800f492:	0c09      	lsrs	r1, r1, #16
 800f494:	fa13 f38c 	uxtah	r3, r3, ip
 800f498:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800f49c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4a6:	454f      	cmp	r7, r9
 800f4a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f4ac:	f840 3b04 	str.w	r3, [r0], #4
 800f4b0:	d9e8      	bls.n	800f484 <quorem+0xbc>
 800f4b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f4b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f4ba:	b962      	cbnz	r2, 800f4d6 <quorem+0x10e>
 800f4bc:	3b04      	subs	r3, #4
 800f4be:	42b3      	cmp	r3, r6
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	d802      	bhi.n	800f4ca <quorem+0x102>
 800f4c4:	f8c8 4010 	str.w	r4, [r8, #16]
 800f4c8:	e005      	b.n	800f4d6 <quorem+0x10e>
 800f4ca:	6812      	ldr	r2, [r2, #0]
 800f4cc:	3b04      	subs	r3, #4
 800f4ce:	2a00      	cmp	r2, #0
 800f4d0:	d1f8      	bne.n	800f4c4 <quorem+0xfc>
 800f4d2:	3c01      	subs	r4, #1
 800f4d4:	e7f3      	b.n	800f4be <quorem+0xf6>
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	e000      	b.n	800f4dc <quorem+0x114>
 800f4da:	2000      	movs	r0, #0
 800f4dc:	b003      	add	sp, #12
 800f4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4e2:	0000      	movs	r0, r0
 800f4e4:	0000      	movs	r0, r0
	...

0800f4e8 <_dtoa_r>:
 800f4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f4ee:	b097      	sub	sp, #92	; 0x5c
 800f4f0:	4682      	mov	sl, r0
 800f4f2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800f4f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f4f8:	b945      	cbnz	r5, 800f50c <_dtoa_r+0x24>
 800f4fa:	2010      	movs	r0, #16
 800f4fc:	f000 fe84 	bl	8010208 <malloc>
 800f500:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800f504:	6045      	str	r5, [r0, #4]
 800f506:	6085      	str	r5, [r0, #8]
 800f508:	6005      	str	r5, [r0, #0]
 800f50a:	60c5      	str	r5, [r0, #12]
 800f50c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800f510:	6819      	ldr	r1, [r3, #0]
 800f512:	b159      	cbz	r1, 800f52c <_dtoa_r+0x44>
 800f514:	685a      	ldr	r2, [r3, #4]
 800f516:	604a      	str	r2, [r1, #4]
 800f518:	2301      	movs	r3, #1
 800f51a:	4093      	lsls	r3, r2
 800f51c:	608b      	str	r3, [r1, #8]
 800f51e:	4650      	mov	r0, sl
 800f520:	f000 febe 	bl	80102a0 <_Bfree>
 800f524:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800f528:	2200      	movs	r2, #0
 800f52a:	601a      	str	r2, [r3, #0]
 800f52c:	9b03      	ldr	r3, [sp, #12]
 800f52e:	4aa2      	ldr	r2, [pc, #648]	; (800f7b8 <_dtoa_r+0x2d0>)
 800f530:	2b00      	cmp	r3, #0
 800f532:	bfbf      	itttt	lt
 800f534:	2301      	movlt	r3, #1
 800f536:	6023      	strlt	r3, [r4, #0]
 800f538:	9b03      	ldrlt	r3, [sp, #12]
 800f53a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f53e:	bfb8      	it	lt
 800f540:	9303      	strlt	r3, [sp, #12]
 800f542:	9f03      	ldr	r7, [sp, #12]
 800f544:	bfa4      	itt	ge
 800f546:	2300      	movge	r3, #0
 800f548:	6023      	strge	r3, [r4, #0]
 800f54a:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 800f54e:	0d1b      	lsrs	r3, r3, #20
 800f550:	051b      	lsls	r3, r3, #20
 800f552:	4293      	cmp	r3, r2
 800f554:	d11d      	bne.n	800f592 <_dtoa_r+0xaa>
 800f556:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f558:	f242 730f 	movw	r3, #9999	; 0x270f
 800f55c:	6013      	str	r3, [r2, #0]
 800f55e:	9b02      	ldr	r3, [sp, #8]
 800f560:	b943      	cbnz	r3, 800f574 <_dtoa_r+0x8c>
 800f562:	4a96      	ldr	r2, [pc, #600]	; (800f7bc <_dtoa_r+0x2d4>)
 800f564:	4b96      	ldr	r3, [pc, #600]	; (800f7c0 <_dtoa_r+0x2d8>)
 800f566:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800f56a:	2800      	cmp	r0, #0
 800f56c:	bf14      	ite	ne
 800f56e:	4618      	movne	r0, r3
 800f570:	4610      	moveq	r0, r2
 800f572:	e000      	b.n	800f576 <_dtoa_r+0x8e>
 800f574:	4892      	ldr	r0, [pc, #584]	; (800f7c0 <_dtoa_r+0x2d8>)
 800f576:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f578:	2b00      	cmp	r3, #0
 800f57a:	f000 8573 	beq.w	8010064 <_dtoa_r+0xb7c>
 800f57e:	78c3      	ldrb	r3, [r0, #3]
 800f580:	b113      	cbz	r3, 800f588 <_dtoa_r+0xa0>
 800f582:	f100 0308 	add.w	r3, r0, #8
 800f586:	e000      	b.n	800f58a <_dtoa_r+0xa2>
 800f588:	1cc3      	adds	r3, r0, #3
 800f58a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f58c:	6013      	str	r3, [r2, #0]
 800f58e:	f000 bd69 	b.w	8010064 <_dtoa_r+0xb7c>
 800f592:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f596:	2200      	movs	r2, #0
 800f598:	4620      	mov	r0, r4
 800f59a:	4629      	mov	r1, r5
 800f59c:	2300      	movs	r3, #0
 800f59e:	f7ff f94f 	bl	800e840 <__aeabi_dcmpeq>
 800f5a2:	4680      	mov	r8, r0
 800f5a4:	b158      	cbz	r0, 800f5be <_dtoa_r+0xd6>
 800f5a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	6013      	str	r3, [r2, #0]
 800f5ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	f000 8546 	beq.w	8010040 <_dtoa_r+0xb58>
 800f5b4:	4883      	ldr	r0, [pc, #524]	; (800f7c4 <_dtoa_r+0x2dc>)
 800f5b6:	6018      	str	r0, [r3, #0]
 800f5b8:	3801      	subs	r0, #1
 800f5ba:	f000 bd53 	b.w	8010064 <_dtoa_r+0xb7c>
 800f5be:	ab15      	add	r3, sp, #84	; 0x54
 800f5c0:	9300      	str	r3, [sp, #0]
 800f5c2:	ab14      	add	r3, sp, #80	; 0x50
 800f5c4:	9301      	str	r3, [sp, #4]
 800f5c6:	4650      	mov	r0, sl
 800f5c8:	4622      	mov	r2, r4
 800f5ca:	462b      	mov	r3, r5
 800f5cc:	f001 f8c0 	bl	8010750 <__d2b>
 800f5d0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f5d4:	9007      	str	r0, [sp, #28]
 800f5d6:	b15e      	cbz	r6, 800f5f0 <_dtoa_r+0x108>
 800f5d8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f5dc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f5e6:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800f5ea:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800f5ee:	e01d      	b.n	800f62c <_dtoa_r+0x144>
 800f5f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5f2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800f5f4:	441e      	add	r6, r3
 800f5f6:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800f5fa:	429e      	cmp	r6, r3
 800f5fc:	bfad      	iteet	ge
 800f5fe:	9a02      	ldrge	r2, [sp, #8]
 800f600:	4b71      	ldrlt	r3, [pc, #452]	; (800f7c8 <_dtoa_r+0x2e0>)
 800f602:	9a02      	ldrlt	r2, [sp, #8]
 800f604:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 800f608:	bfa3      	ittte	ge
 800f60a:	fa22 f003 	lsrge.w	r0, r2, r3
 800f60e:	4b6f      	ldrge	r3, [pc, #444]	; (800f7cc <_dtoa_r+0x2e4>)
 800f610:	1b9b      	subge	r3, r3, r6
 800f612:	1b9b      	sublt	r3, r3, r6
 800f614:	bfaa      	itet	ge
 800f616:	409f      	lslge	r7, r3
 800f618:	fa02 f003 	lsllt.w	r0, r2, r3
 800f61c:	4338      	orrge	r0, r7
 800f61e:	f7fe fe31 	bl	800e284 <__aeabi_ui2d>
 800f622:	2301      	movs	r3, #1
 800f624:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800f628:	3e01      	subs	r6, #1
 800f62a:	9313      	str	r3, [sp, #76]	; 0x4c
 800f62c:	2200      	movs	r2, #0
 800f62e:	4b68      	ldr	r3, [pc, #416]	; (800f7d0 <_dtoa_r+0x2e8>)
 800f630:	f7fe fcea 	bl	800e008 <__aeabi_dsub>
 800f634:	a35a      	add	r3, pc, #360	; (adr r3, 800f7a0 <_dtoa_r+0x2b8>)
 800f636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63a:	f7fe fe99 	bl	800e370 <__aeabi_dmul>
 800f63e:	a35a      	add	r3, pc, #360	; (adr r3, 800f7a8 <_dtoa_r+0x2c0>)
 800f640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f644:	f7fe fce2 	bl	800e00c <__adddf3>
 800f648:	4604      	mov	r4, r0
 800f64a:	4630      	mov	r0, r6
 800f64c:	460d      	mov	r5, r1
 800f64e:	f7fe fe29 	bl	800e2a4 <__aeabi_i2d>
 800f652:	a357      	add	r3, pc, #348	; (adr r3, 800f7b0 <_dtoa_r+0x2c8>)
 800f654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f658:	f7fe fe8a 	bl	800e370 <__aeabi_dmul>
 800f65c:	4602      	mov	r2, r0
 800f65e:	460b      	mov	r3, r1
 800f660:	4620      	mov	r0, r4
 800f662:	4629      	mov	r1, r5
 800f664:	f7fe fcd2 	bl	800e00c <__adddf3>
 800f668:	4604      	mov	r4, r0
 800f66a:	460d      	mov	r5, r1
 800f66c:	f001 fe8e 	bl	801138c <__aeabi_d2iz>
 800f670:	4629      	mov	r1, r5
 800f672:	4683      	mov	fp, r0
 800f674:	2200      	movs	r2, #0
 800f676:	4620      	mov	r0, r4
 800f678:	2300      	movs	r3, #0
 800f67a:	f7ff f8eb 	bl	800e854 <__aeabi_dcmplt>
 800f67e:	b158      	cbz	r0, 800f698 <_dtoa_r+0x1b0>
 800f680:	4658      	mov	r0, fp
 800f682:	f7fe fe0f 	bl	800e2a4 <__aeabi_i2d>
 800f686:	4602      	mov	r2, r0
 800f688:	460b      	mov	r3, r1
 800f68a:	4620      	mov	r0, r4
 800f68c:	4629      	mov	r1, r5
 800f68e:	f7ff f8d7 	bl	800e840 <__aeabi_dcmpeq>
 800f692:	b908      	cbnz	r0, 800f698 <_dtoa_r+0x1b0>
 800f694:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f698:	f1bb 0f16 	cmp.w	fp, #22
 800f69c:	d80d      	bhi.n	800f6ba <_dtoa_r+0x1d2>
 800f69e:	4b4d      	ldr	r3, [pc, #308]	; (800f7d4 <_dtoa_r+0x2ec>)
 800f6a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f6a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f6a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f6ac:	f7ff f8f0 	bl	800e890 <__aeabi_dcmpgt>
 800f6b0:	b130      	cbz	r0, 800f6c0 <_dtoa_r+0x1d8>
 800f6b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	e000      	b.n	800f6bc <_dtoa_r+0x1d4>
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	9312      	str	r3, [sp, #72]	; 0x48
 800f6be:	e000      	b.n	800f6c2 <_dtoa_r+0x1da>
 800f6c0:	9012      	str	r0, [sp, #72]	; 0x48
 800f6c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6c4:	1b9e      	subs	r6, r3, r6
 800f6c6:	1e73      	subs	r3, r6, #1
 800f6c8:	930a      	str	r3, [sp, #40]	; 0x28
 800f6ca:	bf45      	ittet	mi
 800f6cc:	425b      	negmi	r3, r3
 800f6ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 800f6d0:	2300      	movpl	r3, #0
 800f6d2:	2300      	movmi	r3, #0
 800f6d4:	bf4c      	ite	mi
 800f6d6:	930a      	strmi	r3, [sp, #40]	; 0x28
 800f6d8:	9309      	strpl	r3, [sp, #36]	; 0x24
 800f6da:	f1bb 0f00 	cmp.w	fp, #0
 800f6de:	db07      	blt.n	800f6f0 <_dtoa_r+0x208>
 800f6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6e2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800f6e6:	445b      	add	r3, fp
 800f6e8:	930a      	str	r3, [sp, #40]	; 0x28
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800f6ee:	e008      	b.n	800f702 <_dtoa_r+0x21a>
 800f6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6f2:	ebcb 0303 	rsb	r3, fp, r3
 800f6f6:	9309      	str	r3, [sp, #36]	; 0x24
 800f6f8:	f1cb 0300 	rsb	r3, fp, #0
 800f6fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800f6fe:	2300      	movs	r3, #0
 800f700:	930d      	str	r3, [sp, #52]	; 0x34
 800f702:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f704:	2b09      	cmp	r3, #9
 800f706:	d828      	bhi.n	800f75a <_dtoa_r+0x272>
 800f708:	2b05      	cmp	r3, #5
 800f70a:	bfc4      	itt	gt
 800f70c:	3b04      	subgt	r3, #4
 800f70e:	9320      	strgt	r3, [sp, #128]	; 0x80
 800f710:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f712:	f1a3 0302 	sub.w	r3, r3, #2
 800f716:	bfcc      	ite	gt
 800f718:	2500      	movgt	r5, #0
 800f71a:	2501      	movle	r5, #1
 800f71c:	2b03      	cmp	r3, #3
 800f71e:	d821      	bhi.n	800f764 <_dtoa_r+0x27c>
 800f720:	e8df f003 	tbb	[pc, r3]
 800f724:	10040e02 	.word	0x10040e02
 800f728:	2300      	movs	r3, #0
 800f72a:	e000      	b.n	800f72e <_dtoa_r+0x246>
 800f72c:	2301      	movs	r3, #1
 800f72e:	930c      	str	r3, [sp, #48]	; 0x30
 800f730:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f732:	2b00      	cmp	r3, #0
 800f734:	dc20      	bgt.n	800f778 <_dtoa_r+0x290>
 800f736:	2301      	movs	r3, #1
 800f738:	9306      	str	r3, [sp, #24]
 800f73a:	9305      	str	r3, [sp, #20]
 800f73c:	461a      	mov	r2, r3
 800f73e:	e019      	b.n	800f774 <_dtoa_r+0x28c>
 800f740:	2300      	movs	r3, #0
 800f742:	e000      	b.n	800f746 <_dtoa_r+0x25e>
 800f744:	2301      	movs	r3, #1
 800f746:	930c      	str	r3, [sp, #48]	; 0x30
 800f748:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f74a:	445b      	add	r3, fp
 800f74c:	9306      	str	r3, [sp, #24]
 800f74e:	3301      	adds	r3, #1
 800f750:	2b01      	cmp	r3, #1
 800f752:	9305      	str	r3, [sp, #20]
 800f754:	bfb8      	it	lt
 800f756:	2301      	movlt	r3, #1
 800f758:	e011      	b.n	800f77e <_dtoa_r+0x296>
 800f75a:	2501      	movs	r5, #1
 800f75c:	2300      	movs	r3, #0
 800f75e:	9320      	str	r3, [sp, #128]	; 0x80
 800f760:	950c      	str	r5, [sp, #48]	; 0x30
 800f762:	e001      	b.n	800f768 <_dtoa_r+0x280>
 800f764:	2301      	movs	r3, #1
 800f766:	930c      	str	r3, [sp, #48]	; 0x30
 800f768:	f04f 33ff 	mov.w	r3, #4294967295
 800f76c:	9306      	str	r3, [sp, #24]
 800f76e:	9305      	str	r3, [sp, #20]
 800f770:	2200      	movs	r2, #0
 800f772:	2312      	movs	r3, #18
 800f774:	9221      	str	r2, [sp, #132]	; 0x84
 800f776:	e002      	b.n	800f77e <_dtoa_r+0x296>
 800f778:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f77a:	9306      	str	r3, [sp, #24]
 800f77c:	9305      	str	r3, [sp, #20]
 800f77e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 800f782:	2200      	movs	r2, #0
 800f784:	6062      	str	r2, [r4, #4]
 800f786:	2104      	movs	r1, #4
 800f788:	f101 0214 	add.w	r2, r1, #20
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d823      	bhi.n	800f7d8 <_dtoa_r+0x2f0>
 800f790:	6862      	ldr	r2, [r4, #4]
 800f792:	3201      	adds	r2, #1
 800f794:	6062      	str	r2, [r4, #4]
 800f796:	0049      	lsls	r1, r1, #1
 800f798:	e7f6      	b.n	800f788 <_dtoa_r+0x2a0>
 800f79a:	bf00      	nop
 800f79c:	f3af 8000 	nop.w
 800f7a0:	636f4361 	.word	0x636f4361
 800f7a4:	3fd287a7 	.word	0x3fd287a7
 800f7a8:	8b60c8b3 	.word	0x8b60c8b3
 800f7ac:	3fc68a28 	.word	0x3fc68a28
 800f7b0:	509f79fb 	.word	0x509f79fb
 800f7b4:	3fd34413 	.word	0x3fd34413
 800f7b8:	7ff00000 	.word	0x7ff00000
 800f7bc:	08011724 	.word	0x08011724
 800f7c0:	0801172d 	.word	0x0801172d
 800f7c4:	08011701 	.word	0x08011701
 800f7c8:	fffffbee 	.word	0xfffffbee
 800f7cc:	fffffc0e 	.word	0xfffffc0e
 800f7d0:	3ff80000 	.word	0x3ff80000
 800f7d4:	080117a0 	.word	0x080117a0
 800f7d8:	4650      	mov	r0, sl
 800f7da:	6861      	ldr	r1, [r4, #4]
 800f7dc:	f000 fd2b 	bl	8010236 <_Balloc>
 800f7e0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800f7e4:	6020      	str	r0, [r4, #0]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	9308      	str	r3, [sp, #32]
 800f7ea:	9b05      	ldr	r3, [sp, #20]
 800f7ec:	2b0e      	cmp	r3, #14
 800f7ee:	f200 814b 	bhi.w	800fa88 <_dtoa_r+0x5a0>
 800f7f2:	2d00      	cmp	r5, #0
 800f7f4:	f000 8148 	beq.w	800fa88 <_dtoa_r+0x5a0>
 800f7f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f7fc:	f1bb 0f00 	cmp.w	fp, #0
 800f800:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f804:	dd31      	ble.n	800f86a <_dtoa_r+0x382>
 800f806:	4ab3      	ldr	r2, [pc, #716]	; (800fad4 <_dtoa_r+0x5ec>)
 800f808:	f00b 030f 	and.w	r3, fp, #15
 800f80c:	ea4f 172b 	mov.w	r7, fp, asr #4
 800f810:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f814:	06f8      	lsls	r0, r7, #27
 800f816:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f81a:	d50c      	bpl.n	800f836 <_dtoa_r+0x34e>
 800f81c:	4bae      	ldr	r3, [pc, #696]	; (800fad8 <_dtoa_r+0x5f0>)
 800f81e:	ec51 0b17 	vmov	r0, r1, d7
 800f822:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f826:	f7fe fecd 	bl	800e5c4 <__aeabi_ddiv>
 800f82a:	f007 070f 	and.w	r7, r7, #15
 800f82e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f832:	2603      	movs	r6, #3
 800f834:	e000      	b.n	800f838 <_dtoa_r+0x350>
 800f836:	2602      	movs	r6, #2
 800f838:	f8df 829c 	ldr.w	r8, [pc, #668]	; 800fad8 <_dtoa_r+0x5f0>
 800f83c:	b177      	cbz	r7, 800f85c <_dtoa_r+0x374>
 800f83e:	07f9      	lsls	r1, r7, #31
 800f840:	d508      	bpl.n	800f854 <_dtoa_r+0x36c>
 800f842:	4620      	mov	r0, r4
 800f844:	4629      	mov	r1, r5
 800f846:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f84a:	f7fe fd91 	bl	800e370 <__aeabi_dmul>
 800f84e:	3601      	adds	r6, #1
 800f850:	4604      	mov	r4, r0
 800f852:	460d      	mov	r5, r1
 800f854:	107f      	asrs	r7, r7, #1
 800f856:	f108 0808 	add.w	r8, r8, #8
 800f85a:	e7ef      	b.n	800f83c <_dtoa_r+0x354>
 800f85c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f860:	4622      	mov	r2, r4
 800f862:	462b      	mov	r3, r5
 800f864:	f7fe feae 	bl	800e5c4 <__aeabi_ddiv>
 800f868:	e01b      	b.n	800f8a2 <_dtoa_r+0x3ba>
 800f86a:	f1cb 0400 	rsb	r4, fp, #0
 800f86e:	b1dc      	cbz	r4, 800f8a8 <_dtoa_r+0x3c0>
 800f870:	4b98      	ldr	r3, [pc, #608]	; (800fad4 <_dtoa_r+0x5ec>)
 800f872:	4d99      	ldr	r5, [pc, #612]	; (800fad8 <_dtoa_r+0x5f0>)
 800f874:	f004 020f 	and.w	r2, r4, #15
 800f878:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f87c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f884:	f7fe fd74 	bl	800e370 <__aeabi_dmul>
 800f888:	1124      	asrs	r4, r4, #4
 800f88a:	2602      	movs	r6, #2
 800f88c:	b14c      	cbz	r4, 800f8a2 <_dtoa_r+0x3ba>
 800f88e:	07e2      	lsls	r2, r4, #31
 800f890:	d504      	bpl.n	800f89c <_dtoa_r+0x3b4>
 800f892:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f896:	3601      	adds	r6, #1
 800f898:	f7fe fd6a 	bl	800e370 <__aeabi_dmul>
 800f89c:	1064      	asrs	r4, r4, #1
 800f89e:	3508      	adds	r5, #8
 800f8a0:	e7f4      	b.n	800f88c <_dtoa_r+0x3a4>
 800f8a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8a6:	e000      	b.n	800f8aa <_dtoa_r+0x3c2>
 800f8a8:	2602      	movs	r6, #2
 800f8aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f8ac:	b1db      	cbz	r3, 800f8e6 <_dtoa_r+0x3fe>
 800f8ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	4629      	mov	r1, r5
 800f8b8:	4b88      	ldr	r3, [pc, #544]	; (800fadc <_dtoa_r+0x5f4>)
 800f8ba:	f7fe ffcb 	bl	800e854 <__aeabi_dcmplt>
 800f8be:	b190      	cbz	r0, 800f8e6 <_dtoa_r+0x3fe>
 800f8c0:	9b05      	ldr	r3, [sp, #20]
 800f8c2:	b183      	cbz	r3, 800f8e6 <_dtoa_r+0x3fe>
 800f8c4:	9b06      	ldr	r3, [sp, #24]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	f340 80da 	ble.w	800fa80 <_dtoa_r+0x598>
 800f8cc:	4629      	mov	r1, r5
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	4b83      	ldr	r3, [pc, #524]	; (800fae0 <_dtoa_r+0x5f8>)
 800f8d4:	f7fe fd4c 	bl	800e370 <__aeabi_dmul>
 800f8d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f8dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8e0:	3601      	adds	r6, #1
 800f8e2:	9d06      	ldr	r5, [sp, #24]
 800f8e4:	e001      	b.n	800f8ea <_dtoa_r+0x402>
 800f8e6:	9d05      	ldr	r5, [sp, #20]
 800f8e8:	465f      	mov	r7, fp
 800f8ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f8ee:	4630      	mov	r0, r6
 800f8f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800f8f4:	f7fe fcd6 	bl	800e2a4 <__aeabi_i2d>
 800f8f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f8fc:	f7fe fd38 	bl	800e370 <__aeabi_dmul>
 800f900:	2200      	movs	r2, #0
 800f902:	4b78      	ldr	r3, [pc, #480]	; (800fae4 <_dtoa_r+0x5fc>)
 800f904:	f7fe fb82 	bl	800e00c <__adddf3>
 800f908:	4680      	mov	r8, r0
 800f90a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800f90e:	b9cd      	cbnz	r5, 800f944 <_dtoa_r+0x45c>
 800f910:	2200      	movs	r2, #0
 800f912:	4b75      	ldr	r3, [pc, #468]	; (800fae8 <_dtoa_r+0x600>)
 800f914:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f918:	f7fe fb76 	bl	800e008 <__aeabi_dsub>
 800f91c:	4642      	mov	r2, r8
 800f91e:	464b      	mov	r3, r9
 800f920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f924:	f7fe ffb4 	bl	800e890 <__aeabi_dcmpgt>
 800f928:	2800      	cmp	r0, #0
 800f92a:	f040 8246 	bne.w	800fdba <_dtoa_r+0x8d2>
 800f92e:	4642      	mov	r2, r8
 800f930:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f938:	f7fe ff8c 	bl	800e854 <__aeabi_dcmplt>
 800f93c:	2800      	cmp	r0, #0
 800f93e:	f040 8236 	bne.w	800fdae <_dtoa_r+0x8c6>
 800f942:	e09d      	b.n	800fa80 <_dtoa_r+0x598>
 800f944:	4b63      	ldr	r3, [pc, #396]	; (800fad4 <_dtoa_r+0x5ec>)
 800f946:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f948:	1e6a      	subs	r2, r5, #1
 800f94a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f94e:	2900      	cmp	r1, #0
 800f950:	d049      	beq.n	800f9e6 <_dtoa_r+0x4fe>
 800f952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f956:	2000      	movs	r0, #0
 800f958:	4964      	ldr	r1, [pc, #400]	; (800faec <_dtoa_r+0x604>)
 800f95a:	f7fe fe33 	bl	800e5c4 <__aeabi_ddiv>
 800f95e:	4642      	mov	r2, r8
 800f960:	464b      	mov	r3, r9
 800f962:	f7fe fb51 	bl	800e008 <__aeabi_dsub>
 800f966:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800f96a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f96e:	9c08      	ldr	r4, [sp, #32]
 800f970:	4649      	mov	r1, r9
 800f972:	4640      	mov	r0, r8
 800f974:	f001 fd0a 	bl	801138c <__aeabi_d2iz>
 800f978:	4606      	mov	r6, r0
 800f97a:	f7fe fc93 	bl	800e2a4 <__aeabi_i2d>
 800f97e:	4602      	mov	r2, r0
 800f980:	460b      	mov	r3, r1
 800f982:	4640      	mov	r0, r8
 800f984:	4649      	mov	r1, r9
 800f986:	f7fe fb3f 	bl	800e008 <__aeabi_dsub>
 800f98a:	3630      	adds	r6, #48	; 0x30
 800f98c:	f804 6b01 	strb.w	r6, [r4], #1
 800f990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f994:	4680      	mov	r8, r0
 800f996:	4689      	mov	r9, r1
 800f998:	f7fe ff5c 	bl	800e854 <__aeabi_dcmplt>
 800f99c:	2800      	cmp	r0, #0
 800f99e:	f040 8340 	bne.w	8010022 <_dtoa_r+0xb3a>
 800f9a2:	4642      	mov	r2, r8
 800f9a4:	464b      	mov	r3, r9
 800f9a6:	2000      	movs	r0, #0
 800f9a8:	494c      	ldr	r1, [pc, #304]	; (800fadc <_dtoa_r+0x5f4>)
 800f9aa:	f7fe fb2d 	bl	800e008 <__aeabi_dsub>
 800f9ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9b2:	f7fe ff4f 	bl	800e854 <__aeabi_dcmplt>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	f040 80d3 	bne.w	800fb62 <_dtoa_r+0x67a>
 800f9bc:	9b08      	ldr	r3, [sp, #32]
 800f9be:	1ae3      	subs	r3, r4, r3
 800f9c0:	42ab      	cmp	r3, r5
 800f9c2:	da5d      	bge.n	800fa80 <_dtoa_r+0x598>
 800f9c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	4b45      	ldr	r3, [pc, #276]	; (800fae0 <_dtoa_r+0x5f8>)
 800f9cc:	f7fe fcd0 	bl	800e370 <__aeabi_dmul>
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9d6:	4b42      	ldr	r3, [pc, #264]	; (800fae0 <_dtoa_r+0x5f8>)
 800f9d8:	4640      	mov	r0, r8
 800f9da:	4649      	mov	r1, r9
 800f9dc:	f7fe fcc8 	bl	800e370 <__aeabi_dmul>
 800f9e0:	4680      	mov	r8, r0
 800f9e2:	4689      	mov	r9, r1
 800f9e4:	e7c4      	b.n	800f970 <_dtoa_r+0x488>
 800f9e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f9ea:	4642      	mov	r2, r8
 800f9ec:	464b      	mov	r3, r9
 800f9ee:	f7fe fcbf 	bl	800e370 <__aeabi_dmul>
 800f9f2:	9b08      	ldr	r3, [sp, #32]
 800f9f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9f8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800f9fc:	195c      	adds	r4, r3, r5
 800f9fe:	461d      	mov	r5, r3
 800fa00:	4649      	mov	r1, r9
 800fa02:	4640      	mov	r0, r8
 800fa04:	f001 fcc2 	bl	801138c <__aeabi_d2iz>
 800fa08:	4606      	mov	r6, r0
 800fa0a:	f7fe fc4b 	bl	800e2a4 <__aeabi_i2d>
 800fa0e:	3630      	adds	r6, #48	; 0x30
 800fa10:	4602      	mov	r2, r0
 800fa12:	460b      	mov	r3, r1
 800fa14:	4640      	mov	r0, r8
 800fa16:	4649      	mov	r1, r9
 800fa18:	f7fe faf6 	bl	800e008 <__aeabi_dsub>
 800fa1c:	f805 6b01 	strb.w	r6, [r5], #1
 800fa20:	42a5      	cmp	r5, r4
 800fa22:	4680      	mov	r8, r0
 800fa24:	4689      	mov	r9, r1
 800fa26:	d124      	bne.n	800fa72 <_dtoa_r+0x58a>
 800fa28:	2200      	movs	r2, #0
 800fa2a:	4b30      	ldr	r3, [pc, #192]	; (800faec <_dtoa_r+0x604>)
 800fa2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa30:	f7fe faec 	bl	800e00c <__adddf3>
 800fa34:	4602      	mov	r2, r0
 800fa36:	460b      	mov	r3, r1
 800fa38:	4640      	mov	r0, r8
 800fa3a:	4649      	mov	r1, r9
 800fa3c:	f7fe ff28 	bl	800e890 <__aeabi_dcmpgt>
 800fa40:	2800      	cmp	r0, #0
 800fa42:	f040 808e 	bne.w	800fb62 <_dtoa_r+0x67a>
 800fa46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa4a:	2000      	movs	r0, #0
 800fa4c:	4927      	ldr	r1, [pc, #156]	; (800faec <_dtoa_r+0x604>)
 800fa4e:	f7fe fadb 	bl	800e008 <__aeabi_dsub>
 800fa52:	4602      	mov	r2, r0
 800fa54:	460b      	mov	r3, r1
 800fa56:	4640      	mov	r0, r8
 800fa58:	4649      	mov	r1, r9
 800fa5a:	f7fe fefb 	bl	800e854 <__aeabi_dcmplt>
 800fa5e:	b178      	cbz	r0, 800fa80 <_dtoa_r+0x598>
 800fa60:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800fa64:	2b30      	cmp	r3, #48	; 0x30
 800fa66:	f104 32ff 	add.w	r2, r4, #4294967295
 800fa6a:	f040 82da 	bne.w	8010022 <_dtoa_r+0xb3a>
 800fa6e:	4614      	mov	r4, r2
 800fa70:	e7f6      	b.n	800fa60 <_dtoa_r+0x578>
 800fa72:	2200      	movs	r2, #0
 800fa74:	4b1a      	ldr	r3, [pc, #104]	; (800fae0 <_dtoa_r+0x5f8>)
 800fa76:	f7fe fc7b 	bl	800e370 <__aeabi_dmul>
 800fa7a:	4680      	mov	r8, r0
 800fa7c:	4689      	mov	r9, r1
 800fa7e:	e7bf      	b.n	800fa00 <_dtoa_r+0x518>
 800fa80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fa84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fa88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	f2c0 808b 	blt.w	800fba6 <_dtoa_r+0x6be>
 800fa90:	f1bb 0f0e 	cmp.w	fp, #14
 800fa94:	f300 8087 	bgt.w	800fba6 <_dtoa_r+0x6be>
 800fa98:	4b0e      	ldr	r3, [pc, #56]	; (800fad4 <_dtoa_r+0x5ec>)
 800fa9a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fa9e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800faa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	da23      	bge.n	800faf0 <_dtoa_r+0x608>
 800faa8:	9b05      	ldr	r3, [sp, #20]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	dc20      	bgt.n	800faf0 <_dtoa_r+0x608>
 800faae:	f040 817d 	bne.w	800fdac <_dtoa_r+0x8c4>
 800fab2:	4630      	mov	r0, r6
 800fab4:	2200      	movs	r2, #0
 800fab6:	4b0c      	ldr	r3, [pc, #48]	; (800fae8 <_dtoa_r+0x600>)
 800fab8:	4639      	mov	r1, r7
 800faba:	f7fe fc59 	bl	800e370 <__aeabi_dmul>
 800fabe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fac2:	f7fe fedb 	bl	800e87c <__aeabi_dcmpge>
 800fac6:	9d05      	ldr	r5, [sp, #20]
 800fac8:	462e      	mov	r6, r5
 800faca:	2800      	cmp	r0, #0
 800facc:	f040 8170 	bne.w	800fdb0 <_dtoa_r+0x8c8>
 800fad0:	e175      	b.n	800fdbe <_dtoa_r+0x8d6>
 800fad2:	bf00      	nop
 800fad4:	080117a0 	.word	0x080117a0
 800fad8:	08011868 	.word	0x08011868
 800fadc:	3ff00000 	.word	0x3ff00000
 800fae0:	40240000 	.word	0x40240000
 800fae4:	401c0000 	.word	0x401c0000
 800fae8:	40140000 	.word	0x40140000
 800faec:	3fe00000 	.word	0x3fe00000
 800faf0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800faf4:	9c08      	ldr	r4, [sp, #32]
 800faf6:	4632      	mov	r2, r6
 800faf8:	463b      	mov	r3, r7
 800fafa:	4640      	mov	r0, r8
 800fafc:	4649      	mov	r1, r9
 800fafe:	f7fe fd61 	bl	800e5c4 <__aeabi_ddiv>
 800fb02:	f001 fc43 	bl	801138c <__aeabi_d2iz>
 800fb06:	4605      	mov	r5, r0
 800fb08:	f7fe fbcc 	bl	800e2a4 <__aeabi_i2d>
 800fb0c:	4632      	mov	r2, r6
 800fb0e:	463b      	mov	r3, r7
 800fb10:	f7fe fc2e 	bl	800e370 <__aeabi_dmul>
 800fb14:	460b      	mov	r3, r1
 800fb16:	4602      	mov	r2, r0
 800fb18:	4649      	mov	r1, r9
 800fb1a:	4640      	mov	r0, r8
 800fb1c:	f7fe fa74 	bl	800e008 <__aeabi_dsub>
 800fb20:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800fb24:	9b08      	ldr	r3, [sp, #32]
 800fb26:	f804 eb01 	strb.w	lr, [r4], #1
 800fb2a:	ebc3 0e04 	rsb	lr, r3, r4
 800fb2e:	9b05      	ldr	r3, [sp, #20]
 800fb30:	459e      	cmp	lr, r3
 800fb32:	d12b      	bne.n	800fb8c <_dtoa_r+0x6a4>
 800fb34:	4602      	mov	r2, r0
 800fb36:	460b      	mov	r3, r1
 800fb38:	f7fe fa68 	bl	800e00c <__adddf3>
 800fb3c:	4632      	mov	r2, r6
 800fb3e:	463b      	mov	r3, r7
 800fb40:	4680      	mov	r8, r0
 800fb42:	4689      	mov	r9, r1
 800fb44:	f7fe fea4 	bl	800e890 <__aeabi_dcmpgt>
 800fb48:	b970      	cbnz	r0, 800fb68 <_dtoa_r+0x680>
 800fb4a:	4640      	mov	r0, r8
 800fb4c:	4649      	mov	r1, r9
 800fb4e:	4632      	mov	r2, r6
 800fb50:	463b      	mov	r3, r7
 800fb52:	f7fe fe75 	bl	800e840 <__aeabi_dcmpeq>
 800fb56:	2800      	cmp	r0, #0
 800fb58:	f000 8264 	beq.w	8010024 <_dtoa_r+0xb3c>
 800fb5c:	07eb      	lsls	r3, r5, #31
 800fb5e:	d403      	bmi.n	800fb68 <_dtoa_r+0x680>
 800fb60:	e260      	b.n	8010024 <_dtoa_r+0xb3c>
 800fb62:	46bb      	mov	fp, r7
 800fb64:	e000      	b.n	800fb68 <_dtoa_r+0x680>
 800fb66:	461c      	mov	r4, r3
 800fb68:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800fb6c:	2a39      	cmp	r2, #57	; 0x39
 800fb6e:	f104 33ff 	add.w	r3, r4, #4294967295
 800fb72:	d107      	bne.n	800fb84 <_dtoa_r+0x69c>
 800fb74:	9a08      	ldr	r2, [sp, #32]
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d1f5      	bne.n	800fb66 <_dtoa_r+0x67e>
 800fb7a:	2330      	movs	r3, #48	; 0x30
 800fb7c:	7013      	strb	r3, [r2, #0]
 800fb7e:	f10b 0b01 	add.w	fp, fp, #1
 800fb82:	4613      	mov	r3, r2
 800fb84:	781a      	ldrb	r2, [r3, #0]
 800fb86:	3201      	adds	r2, #1
 800fb88:	701a      	strb	r2, [r3, #0]
 800fb8a:	e24b      	b.n	8010024 <_dtoa_r+0xb3c>
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	4ba4      	ldr	r3, [pc, #656]	; (800fe20 <_dtoa_r+0x938>)
 800fb90:	f7fe fbee 	bl	800e370 <__aeabi_dmul>
 800fb94:	2200      	movs	r2, #0
 800fb96:	2300      	movs	r3, #0
 800fb98:	4680      	mov	r8, r0
 800fb9a:	4689      	mov	r9, r1
 800fb9c:	f7fe fe50 	bl	800e840 <__aeabi_dcmpeq>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	d0a8      	beq.n	800faf6 <_dtoa_r+0x60e>
 800fba4:	e23e      	b.n	8010024 <_dtoa_r+0xb3c>
 800fba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fba8:	2a00      	cmp	r2, #0
 800fbaa:	d032      	beq.n	800fc12 <_dtoa_r+0x72a>
 800fbac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fbae:	2a01      	cmp	r2, #1
 800fbb0:	dc0a      	bgt.n	800fbc8 <_dtoa_r+0x6e0>
 800fbb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fbb4:	b112      	cbz	r2, 800fbbc <_dtoa_r+0x6d4>
 800fbb6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fbba:	e002      	b.n	800fbc2 <_dtoa_r+0x6da>
 800fbbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fbbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fbc2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800fbc4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fbc6:	e018      	b.n	800fbfa <_dtoa_r+0x712>
 800fbc8:	9b05      	ldr	r3, [sp, #20]
 800fbca:	1e5d      	subs	r5, r3, #1
 800fbcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbce:	42ab      	cmp	r3, r5
 800fbd0:	bfbf      	itttt	lt
 800fbd2:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800fbd4:	950b      	strlt	r5, [sp, #44]	; 0x2c
 800fbd6:	1aea      	sublt	r2, r5, r3
 800fbd8:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fbda:	bfb6      	itet	lt
 800fbdc:	189b      	addlt	r3, r3, r2
 800fbde:	1b5d      	subge	r5, r3, r5
 800fbe0:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fbe2:	9b05      	ldr	r3, [sp, #20]
 800fbe4:	bfb8      	it	lt
 800fbe6:	2500      	movlt	r5, #0
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	bfb9      	ittee	lt
 800fbec:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 800fbee:	9a05      	ldrlt	r2, [sp, #20]
 800fbf0:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 800fbf2:	9b05      	ldrge	r3, [sp, #20]
 800fbf4:	bfbc      	itt	lt
 800fbf6:	1a9c      	sublt	r4, r3, r2
 800fbf8:	2300      	movlt	r3, #0
 800fbfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbfc:	441a      	add	r2, r3
 800fbfe:	9209      	str	r2, [sp, #36]	; 0x24
 800fc00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc02:	4650      	mov	r0, sl
 800fc04:	441a      	add	r2, r3
 800fc06:	2101      	movs	r1, #1
 800fc08:	920a      	str	r2, [sp, #40]	; 0x28
 800fc0a:	f000 fbeb 	bl	80103e4 <__i2b>
 800fc0e:	4606      	mov	r6, r0
 800fc10:	e002      	b.n	800fc18 <_dtoa_r+0x730>
 800fc12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800fc14:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fc16:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fc18:	b164      	cbz	r4, 800fc34 <_dtoa_r+0x74c>
 800fc1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	dd09      	ble.n	800fc34 <_dtoa_r+0x74c>
 800fc20:	42a3      	cmp	r3, r4
 800fc22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc24:	bfa8      	it	ge
 800fc26:	4623      	movge	r3, r4
 800fc28:	1ad2      	subs	r2, r2, r3
 800fc2a:	9209      	str	r2, [sp, #36]	; 0x24
 800fc2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc2e:	1ae4      	subs	r4, r4, r3
 800fc30:	1ad3      	subs	r3, r2, r3
 800fc32:	930a      	str	r3, [sp, #40]	; 0x28
 800fc34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	dd20      	ble.n	800fc7c <_dtoa_r+0x794>
 800fc3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc3c:	b1c3      	cbz	r3, 800fc70 <_dtoa_r+0x788>
 800fc3e:	2d00      	cmp	r5, #0
 800fc40:	dd10      	ble.n	800fc64 <_dtoa_r+0x77c>
 800fc42:	4631      	mov	r1, r6
 800fc44:	462a      	mov	r2, r5
 800fc46:	4650      	mov	r0, sl
 800fc48:	f000 fc66 	bl	8010518 <__pow5mult>
 800fc4c:	4606      	mov	r6, r0
 800fc4e:	4631      	mov	r1, r6
 800fc50:	9a07      	ldr	r2, [sp, #28]
 800fc52:	4650      	mov	r0, sl
 800fc54:	f000 fbcf 	bl	80103f6 <__multiply>
 800fc58:	9907      	ldr	r1, [sp, #28]
 800fc5a:	4607      	mov	r7, r0
 800fc5c:	4650      	mov	r0, sl
 800fc5e:	f000 fb1f 	bl	80102a0 <_Bfree>
 800fc62:	9707      	str	r7, [sp, #28]
 800fc64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc66:	1b5a      	subs	r2, r3, r5
 800fc68:	d008      	beq.n	800fc7c <_dtoa_r+0x794>
 800fc6a:	4650      	mov	r0, sl
 800fc6c:	9907      	ldr	r1, [sp, #28]
 800fc6e:	e002      	b.n	800fc76 <_dtoa_r+0x78e>
 800fc70:	9907      	ldr	r1, [sp, #28]
 800fc72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fc74:	4650      	mov	r0, sl
 800fc76:	f000 fc4f 	bl	8010518 <__pow5mult>
 800fc7a:	9007      	str	r0, [sp, #28]
 800fc7c:	4650      	mov	r0, sl
 800fc7e:	2101      	movs	r1, #1
 800fc80:	f000 fbb0 	bl	80103e4 <__i2b>
 800fc84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	4605      	mov	r5, r0
 800fc8a:	dd0a      	ble.n	800fca2 <_dtoa_r+0x7ba>
 800fc8c:	4629      	mov	r1, r5
 800fc8e:	461a      	mov	r2, r3
 800fc90:	4650      	mov	r0, sl
 800fc92:	f000 fc41 	bl	8010518 <__pow5mult>
 800fc96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fc98:	2b01      	cmp	r3, #1
 800fc9a:	4605      	mov	r5, r0
 800fc9c:	dd04      	ble.n	800fca8 <_dtoa_r+0x7c0>
 800fc9e:	2700      	movs	r7, #0
 800fca0:	e01b      	b.n	800fcda <_dtoa_r+0x7f2>
 800fca2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	dc13      	bgt.n	800fcd0 <_dtoa_r+0x7e8>
 800fca8:	9b02      	ldr	r3, [sp, #8]
 800fcaa:	b98b      	cbnz	r3, 800fcd0 <_dtoa_r+0x7e8>
 800fcac:	9b03      	ldr	r3, [sp, #12]
 800fcae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcb2:	b97b      	cbnz	r3, 800fcd4 <_dtoa_r+0x7ec>
 800fcb4:	9b03      	ldr	r3, [sp, #12]
 800fcb6:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800fcba:	0d3f      	lsrs	r7, r7, #20
 800fcbc:	053f      	lsls	r7, r7, #20
 800fcbe:	b157      	cbz	r7, 800fcd6 <_dtoa_r+0x7ee>
 800fcc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	9309      	str	r3, [sp, #36]	; 0x24
 800fcc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcc8:	3301      	adds	r3, #1
 800fcca:	930a      	str	r3, [sp, #40]	; 0x28
 800fccc:	2701      	movs	r7, #1
 800fcce:	e002      	b.n	800fcd6 <_dtoa_r+0x7ee>
 800fcd0:	2700      	movs	r7, #0
 800fcd2:	e000      	b.n	800fcd6 <_dtoa_r+0x7ee>
 800fcd4:	9f02      	ldr	r7, [sp, #8]
 800fcd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fcd8:	b143      	cbz	r3, 800fcec <_dtoa_r+0x804>
 800fcda:	692b      	ldr	r3, [r5, #16]
 800fcdc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800fce0:	6918      	ldr	r0, [r3, #16]
 800fce2:	f000 fb32 	bl	801034a <__hi0bits>
 800fce6:	f1c0 0020 	rsb	r0, r0, #32
 800fcea:	e000      	b.n	800fcee <_dtoa_r+0x806>
 800fcec:	2001      	movs	r0, #1
 800fcee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcf0:	4418      	add	r0, r3
 800fcf2:	f010 001f 	ands.w	r0, r0, #31
 800fcf6:	d008      	beq.n	800fd0a <_dtoa_r+0x822>
 800fcf8:	f1c0 0320 	rsb	r3, r0, #32
 800fcfc:	2b04      	cmp	r3, #4
 800fcfe:	dd02      	ble.n	800fd06 <_dtoa_r+0x81e>
 800fd00:	f1c0 001c 	rsb	r0, r0, #28
 800fd04:	e002      	b.n	800fd0c <_dtoa_r+0x824>
 800fd06:	d008      	beq.n	800fd1a <_dtoa_r+0x832>
 800fd08:	4618      	mov	r0, r3
 800fd0a:	301c      	adds	r0, #28
 800fd0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd0e:	4403      	add	r3, r0
 800fd10:	9309      	str	r3, [sp, #36]	; 0x24
 800fd12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd14:	4403      	add	r3, r0
 800fd16:	4404      	add	r4, r0
 800fd18:	930a      	str	r3, [sp, #40]	; 0x28
 800fd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	dd05      	ble.n	800fd2c <_dtoa_r+0x844>
 800fd20:	4650      	mov	r0, sl
 800fd22:	9907      	ldr	r1, [sp, #28]
 800fd24:	461a      	mov	r2, r3
 800fd26:	f000 fc45 	bl	80105b4 <__lshift>
 800fd2a:	9007      	str	r0, [sp, #28]
 800fd2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	dd05      	ble.n	800fd3e <_dtoa_r+0x856>
 800fd32:	4629      	mov	r1, r5
 800fd34:	4650      	mov	r0, sl
 800fd36:	461a      	mov	r2, r3
 800fd38:	f000 fc3c 	bl	80105b4 <__lshift>
 800fd3c:	4605      	mov	r5, r0
 800fd3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fd40:	b1eb      	cbz	r3, 800fd7e <_dtoa_r+0x896>
 800fd42:	9807      	ldr	r0, [sp, #28]
 800fd44:	4629      	mov	r1, r5
 800fd46:	f000 fc88 	bl	801065a <__mcmp>
 800fd4a:	2800      	cmp	r0, #0
 800fd4c:	da17      	bge.n	800fd7e <_dtoa_r+0x896>
 800fd4e:	2300      	movs	r3, #0
 800fd50:	4650      	mov	r0, sl
 800fd52:	9907      	ldr	r1, [sp, #28]
 800fd54:	220a      	movs	r2, #10
 800fd56:	f000 faba 	bl	80102ce <__multadd>
 800fd5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd5c:	9007      	str	r0, [sp, #28]
 800fd5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	f000 8170 	beq.w	8010048 <_dtoa_r+0xb60>
 800fd68:	4631      	mov	r1, r6
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	4650      	mov	r0, sl
 800fd6e:	220a      	movs	r2, #10
 800fd70:	f000 faad 	bl	80102ce <__multadd>
 800fd74:	9b06      	ldr	r3, [sp, #24]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	4606      	mov	r6, r0
 800fd7a:	dc33      	bgt.n	800fde4 <_dtoa_r+0x8fc>
 800fd7c:	e16d      	b.n	801005a <_dtoa_r+0xb72>
 800fd7e:	9b05      	ldr	r3, [sp, #20]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	dc26      	bgt.n	800fdd2 <_dtoa_r+0x8ea>
 800fd84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fd86:	2b02      	cmp	r3, #2
 800fd88:	dd23      	ble.n	800fdd2 <_dtoa_r+0x8ea>
 800fd8a:	9b05      	ldr	r3, [sp, #20]
 800fd8c:	9306      	str	r3, [sp, #24]
 800fd8e:	9b06      	ldr	r3, [sp, #24]
 800fd90:	b973      	cbnz	r3, 800fdb0 <_dtoa_r+0x8c8>
 800fd92:	4629      	mov	r1, r5
 800fd94:	2205      	movs	r2, #5
 800fd96:	4650      	mov	r0, sl
 800fd98:	f000 fa99 	bl	80102ce <__multadd>
 800fd9c:	4605      	mov	r5, r0
 800fd9e:	4629      	mov	r1, r5
 800fda0:	9807      	ldr	r0, [sp, #28]
 800fda2:	f000 fc5a 	bl	801065a <__mcmp>
 800fda6:	2800      	cmp	r0, #0
 800fda8:	dc09      	bgt.n	800fdbe <_dtoa_r+0x8d6>
 800fdaa:	e001      	b.n	800fdb0 <_dtoa_r+0x8c8>
 800fdac:	2500      	movs	r5, #0
 800fdae:	462e      	mov	r6, r5
 800fdb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdb2:	9c08      	ldr	r4, [sp, #32]
 800fdb4:	ea6f 0b03 	mvn.w	fp, r3
 800fdb8:	e008      	b.n	800fdcc <_dtoa_r+0x8e4>
 800fdba:	46bb      	mov	fp, r7
 800fdbc:	462e      	mov	r6, r5
 800fdbe:	9b08      	ldr	r3, [sp, #32]
 800fdc0:	9a08      	ldr	r2, [sp, #32]
 800fdc2:	1c5c      	adds	r4, r3, #1
 800fdc4:	2331      	movs	r3, #49	; 0x31
 800fdc6:	7013      	strb	r3, [r2, #0]
 800fdc8:	f10b 0b01 	add.w	fp, fp, #1
 800fdcc:	46b1      	mov	r9, r6
 800fdce:	2600      	movs	r6, #0
 800fdd0:	e114      	b.n	800fffc <_dtoa_r+0xb14>
 800fdd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fdd4:	b923      	cbnz	r3, 800fde0 <_dtoa_r+0x8f8>
 800fdd6:	9b05      	ldr	r3, [sp, #20]
 800fdd8:	9306      	str	r3, [sp, #24]
 800fdda:	9f08      	ldr	r7, [sp, #32]
 800fddc:	9c07      	ldr	r4, [sp, #28]
 800fdde:	e0cc      	b.n	800ff7a <_dtoa_r+0xa92>
 800fde0:	9b05      	ldr	r3, [sp, #20]
 800fde2:	9306      	str	r3, [sp, #24]
 800fde4:	2c00      	cmp	r4, #0
 800fde6:	dd05      	ble.n	800fdf4 <_dtoa_r+0x90c>
 800fde8:	4631      	mov	r1, r6
 800fdea:	4650      	mov	r0, sl
 800fdec:	4622      	mov	r2, r4
 800fdee:	f000 fbe1 	bl	80105b4 <__lshift>
 800fdf2:	4606      	mov	r6, r0
 800fdf4:	b1b7      	cbz	r7, 800fe24 <_dtoa_r+0x93c>
 800fdf6:	6871      	ldr	r1, [r6, #4]
 800fdf8:	4650      	mov	r0, sl
 800fdfa:	f000 fa1c 	bl	8010236 <_Balloc>
 800fdfe:	6932      	ldr	r2, [r6, #16]
 800fe00:	3202      	adds	r2, #2
 800fe02:	4604      	mov	r4, r0
 800fe04:	f106 010c 	add.w	r1, r6, #12
 800fe08:	0092      	lsls	r2, r2, #2
 800fe0a:	300c      	adds	r0, #12
 800fe0c:	f7f5 f9f0 	bl	80051f0 <memcpy>
 800fe10:	4650      	mov	r0, sl
 800fe12:	4621      	mov	r1, r4
 800fe14:	2201      	movs	r2, #1
 800fe16:	f000 fbcd 	bl	80105b4 <__lshift>
 800fe1a:	4681      	mov	r9, r0
 800fe1c:	e003      	b.n	800fe26 <_dtoa_r+0x93e>
 800fe1e:	bf00      	nop
 800fe20:	40240000 	.word	0x40240000
 800fe24:	46b1      	mov	r9, r6
 800fe26:	9f08      	ldr	r7, [sp, #32]
 800fe28:	9c07      	ldr	r4, [sp, #28]
 800fe2a:	4629      	mov	r1, r5
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	f7ff facb 	bl	800f3c8 <quorem>
 800fe32:	4631      	mov	r1, r6
 800fe34:	9009      	str	r0, [sp, #36]	; 0x24
 800fe36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	f000 fc0d 	bl	801065a <__mcmp>
 800fe40:	464a      	mov	r2, r9
 800fe42:	9005      	str	r0, [sp, #20]
 800fe44:	4629      	mov	r1, r5
 800fe46:	4650      	mov	r0, sl
 800fe48:	f000 fc23 	bl	8010692 <__mdiff>
 800fe4c:	68c2      	ldr	r2, [r0, #12]
 800fe4e:	4603      	mov	r3, r0
 800fe50:	b93a      	cbnz	r2, 800fe62 <_dtoa_r+0x97a>
 800fe52:	4619      	mov	r1, r3
 800fe54:	4620      	mov	r0, r4
 800fe56:	9307      	str	r3, [sp, #28]
 800fe58:	f000 fbff 	bl	801065a <__mcmp>
 800fe5c:	9b07      	ldr	r3, [sp, #28]
 800fe5e:	4602      	mov	r2, r0
 800fe60:	e000      	b.n	800fe64 <_dtoa_r+0x97c>
 800fe62:	2201      	movs	r2, #1
 800fe64:	4650      	mov	r0, sl
 800fe66:	4619      	mov	r1, r3
 800fe68:	9207      	str	r2, [sp, #28]
 800fe6a:	f000 fa19 	bl	80102a0 <_Bfree>
 800fe6e:	9a07      	ldr	r2, [sp, #28]
 800fe70:	b9a2      	cbnz	r2, 800fe9c <_dtoa_r+0x9b4>
 800fe72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fe74:	b993      	cbnz	r3, 800fe9c <_dtoa_r+0x9b4>
 800fe76:	9b02      	ldr	r3, [sp, #8]
 800fe78:	f003 0301 	and.w	r3, r3, #1
 800fe7c:	b973      	cbnz	r3, 800fe9c <_dtoa_r+0x9b4>
 800fe7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fe82:	463b      	mov	r3, r7
 800fe84:	9407      	str	r4, [sp, #28]
 800fe86:	d040      	beq.n	800ff0a <_dtoa_r+0xa22>
 800fe88:	9b05      	ldr	r3, [sp, #20]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	bfc8      	it	gt
 800fe8e:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 800fe90:	f107 0401 	add.w	r4, r7, #1
 800fe94:	bfc8      	it	gt
 800fe96:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 800fe9a:	e03d      	b.n	800ff18 <_dtoa_r+0xa30>
 800fe9c:	9b05      	ldr	r3, [sp, #20]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	da04      	bge.n	800feac <_dtoa_r+0x9c4>
 800fea2:	2a00      	cmp	r2, #0
 800fea4:	46c4      	mov	ip, r8
 800fea6:	9407      	str	r4, [sp, #28]
 800fea8:	dc08      	bgt.n	800febc <_dtoa_r+0x9d4>
 800feaa:	e021      	b.n	800fef0 <_dtoa_r+0xa08>
 800feac:	d124      	bne.n	800fef8 <_dtoa_r+0xa10>
 800feae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800feb0:	bb13      	cbnz	r3, 800fef8 <_dtoa_r+0xa10>
 800feb2:	9b02      	ldr	r3, [sp, #8]
 800feb4:	f003 0301 	and.w	r3, r3, #1
 800feb8:	b9f3      	cbnz	r3, 800fef8 <_dtoa_r+0xa10>
 800feba:	e7f2      	b.n	800fea2 <_dtoa_r+0x9ba>
 800febc:	4621      	mov	r1, r4
 800febe:	2201      	movs	r2, #1
 800fec0:	4650      	mov	r0, sl
 800fec2:	9705      	str	r7, [sp, #20]
 800fec4:	f8cd 8008 	str.w	r8, [sp, #8]
 800fec8:	f000 fb74 	bl	80105b4 <__lshift>
 800fecc:	4629      	mov	r1, r5
 800fece:	9007      	str	r0, [sp, #28]
 800fed0:	f000 fbc3 	bl	801065a <__mcmp>
 800fed4:	2800      	cmp	r0, #0
 800fed6:	f8dd c008 	ldr.w	ip, [sp, #8]
 800feda:	9b05      	ldr	r3, [sp, #20]
 800fedc:	dc03      	bgt.n	800fee6 <_dtoa_r+0x9fe>
 800fede:	d107      	bne.n	800fef0 <_dtoa_r+0xa08>
 800fee0:	f018 0f01 	tst.w	r8, #1
 800fee4:	d004      	beq.n	800fef0 <_dtoa_r+0xa08>
 800fee6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800feea:	d00e      	beq.n	800ff0a <_dtoa_r+0xa22>
 800feec:	f108 0c01 	add.w	ip, r8, #1
 800fef0:	1c7c      	adds	r4, r7, #1
 800fef2:	f887 c000 	strb.w	ip, [r7]
 800fef6:	e081      	b.n	800fffc <_dtoa_r+0xb14>
 800fef8:	2a00      	cmp	r2, #0
 800fefa:	f107 0201 	add.w	r2, r7, #1
 800fefe:	dd0e      	ble.n	800ff1e <_dtoa_r+0xa36>
 800ff00:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ff04:	463b      	mov	r3, r7
 800ff06:	9407      	str	r4, [sp, #28]
 800ff08:	d103      	bne.n	800ff12 <_dtoa_r+0xa2a>
 800ff0a:	2239      	movs	r2, #57	; 0x39
 800ff0c:	3701      	adds	r7, #1
 800ff0e:	701a      	strb	r2, [r3, #0]
 800ff10:	e057      	b.n	800ffc2 <_dtoa_r+0xada>
 800ff12:	4614      	mov	r4, r2
 800ff14:	f108 0801 	add.w	r8, r8, #1
 800ff18:	f887 8000 	strb.w	r8, [r7]
 800ff1c:	e06e      	b.n	800fffc <_dtoa_r+0xb14>
 800ff1e:	9b08      	ldr	r3, [sp, #32]
 800ff20:	f802 8c01 	strb.w	r8, [r2, #-1]
 800ff24:	1ad3      	subs	r3, r2, r3
 800ff26:	4617      	mov	r7, r2
 800ff28:	9a06      	ldr	r2, [sp, #24]
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d03a      	beq.n	800ffa4 <_dtoa_r+0xabc>
 800ff2e:	4621      	mov	r1, r4
 800ff30:	220a      	movs	r2, #10
 800ff32:	2300      	movs	r3, #0
 800ff34:	4650      	mov	r0, sl
 800ff36:	f000 f9ca 	bl	80102ce <__multadd>
 800ff3a:	454e      	cmp	r6, r9
 800ff3c:	4604      	mov	r4, r0
 800ff3e:	4631      	mov	r1, r6
 800ff40:	4650      	mov	r0, sl
 800ff42:	f04f 020a 	mov.w	r2, #10
 800ff46:	f04f 0300 	mov.w	r3, #0
 800ff4a:	d104      	bne.n	800ff56 <_dtoa_r+0xa6e>
 800ff4c:	f000 f9bf 	bl	80102ce <__multadd>
 800ff50:	4606      	mov	r6, r0
 800ff52:	4681      	mov	r9, r0
 800ff54:	e769      	b.n	800fe2a <_dtoa_r+0x942>
 800ff56:	f000 f9ba 	bl	80102ce <__multadd>
 800ff5a:	4649      	mov	r1, r9
 800ff5c:	4606      	mov	r6, r0
 800ff5e:	220a      	movs	r2, #10
 800ff60:	4650      	mov	r0, sl
 800ff62:	2300      	movs	r3, #0
 800ff64:	f000 f9b3 	bl	80102ce <__multadd>
 800ff68:	4681      	mov	r9, r0
 800ff6a:	e75e      	b.n	800fe2a <_dtoa_r+0x942>
 800ff6c:	4621      	mov	r1, r4
 800ff6e:	4650      	mov	r0, sl
 800ff70:	220a      	movs	r2, #10
 800ff72:	2300      	movs	r3, #0
 800ff74:	f000 f9ab 	bl	80102ce <__multadd>
 800ff78:	4604      	mov	r4, r0
 800ff7a:	4620      	mov	r0, r4
 800ff7c:	4629      	mov	r1, r5
 800ff7e:	f7ff fa23 	bl	800f3c8 <quorem>
 800ff82:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ff86:	f807 8b01 	strb.w	r8, [r7], #1
 800ff8a:	9b08      	ldr	r3, [sp, #32]
 800ff8c:	9a06      	ldr	r2, [sp, #24]
 800ff8e:	1afb      	subs	r3, r7, r3
 800ff90:	4293      	cmp	r3, r2
 800ff92:	dbeb      	blt.n	800ff6c <_dtoa_r+0xa84>
 800ff94:	9b08      	ldr	r3, [sp, #32]
 800ff96:	2a01      	cmp	r2, #1
 800ff98:	bfac      	ite	ge
 800ff9a:	189b      	addge	r3, r3, r2
 800ff9c:	3301      	addlt	r3, #1
 800ff9e:	46b1      	mov	r9, r6
 800ffa0:	461f      	mov	r7, r3
 800ffa2:	2600      	movs	r6, #0
 800ffa4:	4621      	mov	r1, r4
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	4650      	mov	r0, sl
 800ffaa:	f000 fb03 	bl	80105b4 <__lshift>
 800ffae:	4629      	mov	r1, r5
 800ffb0:	9007      	str	r0, [sp, #28]
 800ffb2:	f000 fb52 	bl	801065a <__mcmp>
 800ffb6:	2800      	cmp	r0, #0
 800ffb8:	dc03      	bgt.n	800ffc2 <_dtoa_r+0xada>
 800ffba:	d116      	bne.n	800ffea <_dtoa_r+0xb02>
 800ffbc:	f018 0f01 	tst.w	r8, #1
 800ffc0:	d013      	beq.n	800ffea <_dtoa_r+0xb02>
 800ffc2:	463c      	mov	r4, r7
 800ffc4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800ffc8:	2b39      	cmp	r3, #57	; 0x39
 800ffca:	f104 32ff 	add.w	r2, r4, #4294967295
 800ffce:	d109      	bne.n	800ffe4 <_dtoa_r+0xafc>
 800ffd0:	9b08      	ldr	r3, [sp, #32]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d104      	bne.n	800ffe0 <_dtoa_r+0xaf8>
 800ffd6:	f10b 0b01 	add.w	fp, fp, #1
 800ffda:	2331      	movs	r3, #49	; 0x31
 800ffdc:	9a08      	ldr	r2, [sp, #32]
 800ffde:	e002      	b.n	800ffe6 <_dtoa_r+0xafe>
 800ffe0:	4614      	mov	r4, r2
 800ffe2:	e7ef      	b.n	800ffc4 <_dtoa_r+0xadc>
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	7013      	strb	r3, [r2, #0]
 800ffe8:	e008      	b.n	800fffc <_dtoa_r+0xb14>
 800ffea:	463c      	mov	r4, r7
 800ffec:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800fff0:	2b30      	cmp	r3, #48	; 0x30
 800fff2:	f104 32ff 	add.w	r2, r4, #4294967295
 800fff6:	d101      	bne.n	800fffc <_dtoa_r+0xb14>
 800fff8:	4614      	mov	r4, r2
 800fffa:	e7f7      	b.n	800ffec <_dtoa_r+0xb04>
 800fffc:	4650      	mov	r0, sl
 800fffe:	4629      	mov	r1, r5
 8010000:	f000 f94e 	bl	80102a0 <_Bfree>
 8010004:	f1b9 0f00 	cmp.w	r9, #0
 8010008:	d00c      	beq.n	8010024 <_dtoa_r+0xb3c>
 801000a:	b12e      	cbz	r6, 8010018 <_dtoa_r+0xb30>
 801000c:	454e      	cmp	r6, r9
 801000e:	d003      	beq.n	8010018 <_dtoa_r+0xb30>
 8010010:	4650      	mov	r0, sl
 8010012:	4631      	mov	r1, r6
 8010014:	f000 f944 	bl	80102a0 <_Bfree>
 8010018:	4650      	mov	r0, sl
 801001a:	4649      	mov	r1, r9
 801001c:	f000 f940 	bl	80102a0 <_Bfree>
 8010020:	e000      	b.n	8010024 <_dtoa_r+0xb3c>
 8010022:	46bb      	mov	fp, r7
 8010024:	4650      	mov	r0, sl
 8010026:	9907      	ldr	r1, [sp, #28]
 8010028:	f000 f93a 	bl	80102a0 <_Bfree>
 801002c:	2300      	movs	r3, #0
 801002e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010030:	7023      	strb	r3, [r4, #0]
 8010032:	f10b 0301 	add.w	r3, fp, #1
 8010036:	6013      	str	r3, [r2, #0]
 8010038:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801003a:	b11b      	cbz	r3, 8010044 <_dtoa_r+0xb5c>
 801003c:	601c      	str	r4, [r3, #0]
 801003e:	e001      	b.n	8010044 <_dtoa_r+0xb5c>
 8010040:	480a      	ldr	r0, [pc, #40]	; (801006c <_dtoa_r+0xb84>)
 8010042:	e00f      	b.n	8010064 <_dtoa_r+0xb7c>
 8010044:	9808      	ldr	r0, [sp, #32]
 8010046:	e00d      	b.n	8010064 <_dtoa_r+0xb7c>
 8010048:	9b06      	ldr	r3, [sp, #24]
 801004a:	2b00      	cmp	r3, #0
 801004c:	f73f aec5 	bgt.w	800fdda <_dtoa_r+0x8f2>
 8010050:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010052:	2b02      	cmp	r3, #2
 8010054:	f73f ae9b 	bgt.w	800fd8e <_dtoa_r+0x8a6>
 8010058:	e6bf      	b.n	800fdda <_dtoa_r+0x8f2>
 801005a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801005c:	2b02      	cmp	r3, #2
 801005e:	f73f ae96 	bgt.w	800fd8e <_dtoa_r+0x8a6>
 8010062:	e6bf      	b.n	800fde4 <_dtoa_r+0x8fc>
 8010064:	b017      	add	sp, #92	; 0x5c
 8010066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801006a:	bf00      	nop
 801006c:	08011700 	.word	0x08011700

08010070 <_cleanup_r>:
 8010070:	4901      	ldr	r1, [pc, #4]	; (8010078 <_cleanup_r+0x8>)
 8010072:	f000 b8a7 	b.w	80101c4 <_fwalk_reent>
 8010076:	bf00      	nop
 8010078:	080111b1 	.word	0x080111b1

0801007c <std.isra.0>:
 801007c:	2300      	movs	r3, #0
 801007e:	b510      	push	{r4, lr}
 8010080:	4604      	mov	r4, r0
 8010082:	6003      	str	r3, [r0, #0]
 8010084:	6043      	str	r3, [r0, #4]
 8010086:	6083      	str	r3, [r0, #8]
 8010088:	8181      	strh	r1, [r0, #12]
 801008a:	6643      	str	r3, [r0, #100]	; 0x64
 801008c:	81c2      	strh	r2, [r0, #14]
 801008e:	6103      	str	r3, [r0, #16]
 8010090:	6143      	str	r3, [r0, #20]
 8010092:	6183      	str	r3, [r0, #24]
 8010094:	4619      	mov	r1, r3
 8010096:	305c      	adds	r0, #92	; 0x5c
 8010098:	2208      	movs	r2, #8
 801009a:	f7fe fcaa 	bl	800e9f2 <memset>
 801009e:	4b05      	ldr	r3, [pc, #20]	; (80100b4 <std.isra.0+0x38>)
 80100a0:	6263      	str	r3, [r4, #36]	; 0x24
 80100a2:	4b05      	ldr	r3, [pc, #20]	; (80100b8 <std.isra.0+0x3c>)
 80100a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80100a6:	4b05      	ldr	r3, [pc, #20]	; (80100bc <std.isra.0+0x40>)
 80100a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80100aa:	4b05      	ldr	r3, [pc, #20]	; (80100c0 <std.isra.0+0x44>)
 80100ac:	6224      	str	r4, [r4, #32]
 80100ae:	6323      	str	r3, [r4, #48]	; 0x30
 80100b0:	bd10      	pop	{r4, pc}
 80100b2:	bf00      	nop
 80100b4:	08010e5d 	.word	0x08010e5d
 80100b8:	08010e7f 	.word	0x08010e7f
 80100bc:	08010eb7 	.word	0x08010eb7
 80100c0:	08010edb 	.word	0x08010edb

080100c4 <__sfmoreglue>:
 80100c4:	b570      	push	{r4, r5, r6, lr}
 80100c6:	2368      	movs	r3, #104	; 0x68
 80100c8:	1e4d      	subs	r5, r1, #1
 80100ca:	435d      	muls	r5, r3
 80100cc:	460e      	mov	r6, r1
 80100ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80100d2:	f000 fbe1 	bl	8010898 <_malloc_r>
 80100d6:	4604      	mov	r4, r0
 80100d8:	b140      	cbz	r0, 80100ec <__sfmoreglue+0x28>
 80100da:	2100      	movs	r1, #0
 80100dc:	e880 0042 	stmia.w	r0, {r1, r6}
 80100e0:	300c      	adds	r0, #12
 80100e2:	60a0      	str	r0, [r4, #8]
 80100e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80100e8:	f7fe fc83 	bl	800e9f2 <memset>
 80100ec:	4620      	mov	r0, r4
 80100ee:	bd70      	pop	{r4, r5, r6, pc}

080100f0 <__sinit>:
 80100f0:	6983      	ldr	r3, [r0, #24]
 80100f2:	b510      	push	{r4, lr}
 80100f4:	4604      	mov	r4, r0
 80100f6:	bb33      	cbnz	r3, 8010146 <__sinit+0x56>
 80100f8:	6483      	str	r3, [r0, #72]	; 0x48
 80100fa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80100fc:	6503      	str	r3, [r0, #80]	; 0x50
 80100fe:	4b12      	ldr	r3, [pc, #72]	; (8010148 <__sinit+0x58>)
 8010100:	4a12      	ldr	r2, [pc, #72]	; (801014c <__sinit+0x5c>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	6282      	str	r2, [r0, #40]	; 0x28
 8010106:	4298      	cmp	r0, r3
 8010108:	bf04      	itt	eq
 801010a:	2301      	moveq	r3, #1
 801010c:	6183      	streq	r3, [r0, #24]
 801010e:	f000 f81f 	bl	8010150 <__sfp>
 8010112:	6060      	str	r0, [r4, #4]
 8010114:	4620      	mov	r0, r4
 8010116:	f000 f81b 	bl	8010150 <__sfp>
 801011a:	60a0      	str	r0, [r4, #8]
 801011c:	4620      	mov	r0, r4
 801011e:	f000 f817 	bl	8010150 <__sfp>
 8010122:	2104      	movs	r1, #4
 8010124:	60e0      	str	r0, [r4, #12]
 8010126:	2200      	movs	r2, #0
 8010128:	6860      	ldr	r0, [r4, #4]
 801012a:	f7ff ffa7 	bl	801007c <std.isra.0>
 801012e:	68a0      	ldr	r0, [r4, #8]
 8010130:	2109      	movs	r1, #9
 8010132:	2201      	movs	r2, #1
 8010134:	f7ff ffa2 	bl	801007c <std.isra.0>
 8010138:	68e0      	ldr	r0, [r4, #12]
 801013a:	2112      	movs	r1, #18
 801013c:	2202      	movs	r2, #2
 801013e:	f7ff ff9d 	bl	801007c <std.isra.0>
 8010142:	2301      	movs	r3, #1
 8010144:	61a3      	str	r3, [r4, #24]
 8010146:	bd10      	pop	{r4, pc}
 8010148:	080116ec 	.word	0x080116ec
 801014c:	08010071 	.word	0x08010071

08010150 <__sfp>:
 8010150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010152:	4b1b      	ldr	r3, [pc, #108]	; (80101c0 <__sfp+0x70>)
 8010154:	681e      	ldr	r6, [r3, #0]
 8010156:	69b3      	ldr	r3, [r6, #24]
 8010158:	4607      	mov	r7, r0
 801015a:	b913      	cbnz	r3, 8010162 <__sfp+0x12>
 801015c:	4630      	mov	r0, r6
 801015e:	f7ff ffc7 	bl	80100f0 <__sinit>
 8010162:	3648      	adds	r6, #72	; 0x48
 8010164:	68b4      	ldr	r4, [r6, #8]
 8010166:	6873      	ldr	r3, [r6, #4]
 8010168:	3b01      	subs	r3, #1
 801016a:	d404      	bmi.n	8010176 <__sfp+0x26>
 801016c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010170:	b175      	cbz	r5, 8010190 <__sfp+0x40>
 8010172:	3468      	adds	r4, #104	; 0x68
 8010174:	e7f8      	b.n	8010168 <__sfp+0x18>
 8010176:	6833      	ldr	r3, [r6, #0]
 8010178:	b92b      	cbnz	r3, 8010186 <__sfp+0x36>
 801017a:	4638      	mov	r0, r7
 801017c:	2104      	movs	r1, #4
 801017e:	f7ff ffa1 	bl	80100c4 <__sfmoreglue>
 8010182:	6030      	str	r0, [r6, #0]
 8010184:	b108      	cbz	r0, 801018a <__sfp+0x3a>
 8010186:	6836      	ldr	r6, [r6, #0]
 8010188:	e7ec      	b.n	8010164 <__sfp+0x14>
 801018a:	230c      	movs	r3, #12
 801018c:	603b      	str	r3, [r7, #0]
 801018e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010194:	81e3      	strh	r3, [r4, #14]
 8010196:	2301      	movs	r3, #1
 8010198:	81a3      	strh	r3, [r4, #12]
 801019a:	6665      	str	r5, [r4, #100]	; 0x64
 801019c:	6025      	str	r5, [r4, #0]
 801019e:	60a5      	str	r5, [r4, #8]
 80101a0:	6065      	str	r5, [r4, #4]
 80101a2:	6125      	str	r5, [r4, #16]
 80101a4:	6165      	str	r5, [r4, #20]
 80101a6:	61a5      	str	r5, [r4, #24]
 80101a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80101ac:	4629      	mov	r1, r5
 80101ae:	2208      	movs	r2, #8
 80101b0:	f7fe fc1f 	bl	800e9f2 <memset>
 80101b4:	6365      	str	r5, [r4, #52]	; 0x34
 80101b6:	63a5      	str	r5, [r4, #56]	; 0x38
 80101b8:	64a5      	str	r5, [r4, #72]	; 0x48
 80101ba:	64e5      	str	r5, [r4, #76]	; 0x4c
 80101bc:	4620      	mov	r0, r4
 80101be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101c0:	080116ec 	.word	0x080116ec

080101c4 <_fwalk_reent>:
 80101c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101c8:	4680      	mov	r8, r0
 80101ca:	4689      	mov	r9, r1
 80101cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80101d0:	2600      	movs	r6, #0
 80101d2:	b194      	cbz	r4, 80101fa <_fwalk_reent+0x36>
 80101d4:	68a5      	ldr	r5, [r4, #8]
 80101d6:	6867      	ldr	r7, [r4, #4]
 80101d8:	3f01      	subs	r7, #1
 80101da:	d40c      	bmi.n	80101f6 <_fwalk_reent+0x32>
 80101dc:	89ab      	ldrh	r3, [r5, #12]
 80101de:	2b01      	cmp	r3, #1
 80101e0:	d907      	bls.n	80101f2 <_fwalk_reent+0x2e>
 80101e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80101e6:	3301      	adds	r3, #1
 80101e8:	d003      	beq.n	80101f2 <_fwalk_reent+0x2e>
 80101ea:	4640      	mov	r0, r8
 80101ec:	4629      	mov	r1, r5
 80101ee:	47c8      	blx	r9
 80101f0:	4306      	orrs	r6, r0
 80101f2:	3568      	adds	r5, #104	; 0x68
 80101f4:	e7f0      	b.n	80101d8 <_fwalk_reent+0x14>
 80101f6:	6824      	ldr	r4, [r4, #0]
 80101f8:	e7eb      	b.n	80101d2 <_fwalk_reent+0xe>
 80101fa:	4630      	mov	r0, r6
 80101fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010200 <_localeconv_r>:
 8010200:	4800      	ldr	r0, [pc, #0]	; (8010204 <_localeconv_r+0x4>)
 8010202:	4770      	bx	lr
 8010204:	1ffe8974 	.word	0x1ffe8974

08010208 <malloc>:
 8010208:	4b02      	ldr	r3, [pc, #8]	; (8010214 <malloc+0xc>)
 801020a:	4601      	mov	r1, r0
 801020c:	6818      	ldr	r0, [r3, #0]
 801020e:	f000 bb43 	b.w	8010898 <_malloc_r>
 8010212:	bf00      	nop
 8010214:	1ffe8970 	.word	0x1ffe8970

08010218 <memchr>:
 8010218:	b510      	push	{r4, lr}
 801021a:	b2c9      	uxtb	r1, r1
 801021c:	4402      	add	r2, r0
 801021e:	4290      	cmp	r0, r2
 8010220:	4603      	mov	r3, r0
 8010222:	d006      	beq.n	8010232 <memchr+0x1a>
 8010224:	781c      	ldrb	r4, [r3, #0]
 8010226:	428c      	cmp	r4, r1
 8010228:	f100 0001 	add.w	r0, r0, #1
 801022c:	d1f7      	bne.n	801021e <memchr+0x6>
 801022e:	4618      	mov	r0, r3
 8010230:	bd10      	pop	{r4, pc}
 8010232:	2000      	movs	r0, #0
 8010234:	bd10      	pop	{r4, pc}

08010236 <_Balloc>:
 8010236:	b570      	push	{r4, r5, r6, lr}
 8010238:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801023a:	4604      	mov	r4, r0
 801023c:	460e      	mov	r6, r1
 801023e:	b93d      	cbnz	r5, 8010250 <_Balloc+0x1a>
 8010240:	2010      	movs	r0, #16
 8010242:	f7ff ffe1 	bl	8010208 <malloc>
 8010246:	6260      	str	r0, [r4, #36]	; 0x24
 8010248:	6045      	str	r5, [r0, #4]
 801024a:	6085      	str	r5, [r0, #8]
 801024c:	6005      	str	r5, [r0, #0]
 801024e:	60c5      	str	r5, [r0, #12]
 8010250:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010252:	68eb      	ldr	r3, [r5, #12]
 8010254:	b143      	cbz	r3, 8010268 <_Balloc+0x32>
 8010256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010258:	68db      	ldr	r3, [r3, #12]
 801025a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801025e:	b178      	cbz	r0, 8010280 <_Balloc+0x4a>
 8010260:	6802      	ldr	r2, [r0, #0]
 8010262:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010266:	e017      	b.n	8010298 <_Balloc+0x62>
 8010268:	4620      	mov	r0, r4
 801026a:	2104      	movs	r1, #4
 801026c:	2221      	movs	r2, #33	; 0x21
 801026e:	f000 fac1 	bl	80107f4 <_calloc_r>
 8010272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010274:	60e8      	str	r0, [r5, #12]
 8010276:	68db      	ldr	r3, [r3, #12]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d1ec      	bne.n	8010256 <_Balloc+0x20>
 801027c:	2000      	movs	r0, #0
 801027e:	bd70      	pop	{r4, r5, r6, pc}
 8010280:	2101      	movs	r1, #1
 8010282:	fa01 f506 	lsl.w	r5, r1, r6
 8010286:	1d6a      	adds	r2, r5, #5
 8010288:	4620      	mov	r0, r4
 801028a:	0092      	lsls	r2, r2, #2
 801028c:	f000 fab2 	bl	80107f4 <_calloc_r>
 8010290:	2800      	cmp	r0, #0
 8010292:	d0f3      	beq.n	801027c <_Balloc+0x46>
 8010294:	6046      	str	r6, [r0, #4]
 8010296:	6085      	str	r5, [r0, #8]
 8010298:	2300      	movs	r3, #0
 801029a:	6103      	str	r3, [r0, #16]
 801029c:	60c3      	str	r3, [r0, #12]
 801029e:	bd70      	pop	{r4, r5, r6, pc}

080102a0 <_Bfree>:
 80102a0:	b570      	push	{r4, r5, r6, lr}
 80102a2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80102a4:	4606      	mov	r6, r0
 80102a6:	460d      	mov	r5, r1
 80102a8:	b93c      	cbnz	r4, 80102ba <_Bfree+0x1a>
 80102aa:	2010      	movs	r0, #16
 80102ac:	f7ff ffac 	bl	8010208 <malloc>
 80102b0:	6270      	str	r0, [r6, #36]	; 0x24
 80102b2:	6044      	str	r4, [r0, #4]
 80102b4:	6084      	str	r4, [r0, #8]
 80102b6:	6004      	str	r4, [r0, #0]
 80102b8:	60c4      	str	r4, [r0, #12]
 80102ba:	b13d      	cbz	r5, 80102cc <_Bfree+0x2c>
 80102bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80102be:	686a      	ldr	r2, [r5, #4]
 80102c0:	68db      	ldr	r3, [r3, #12]
 80102c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80102c6:	6029      	str	r1, [r5, #0]
 80102c8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80102cc:	bd70      	pop	{r4, r5, r6, pc}

080102ce <__multadd>:
 80102ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d2:	690f      	ldr	r7, [r1, #16]
 80102d4:	4698      	mov	r8, r3
 80102d6:	4606      	mov	r6, r0
 80102d8:	460c      	mov	r4, r1
 80102da:	f101 0e14 	add.w	lr, r1, #20
 80102de:	2300      	movs	r3, #0
 80102e0:	f8de 0000 	ldr.w	r0, [lr]
 80102e4:	b285      	uxth	r5, r0
 80102e6:	0c01      	lsrs	r1, r0, #16
 80102e8:	fb02 8505 	mla	r5, r2, r5, r8
 80102ec:	4351      	muls	r1, r2
 80102ee:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 80102f2:	3301      	adds	r3, #1
 80102f4:	b2ad      	uxth	r5, r5
 80102f6:	ea4f 4811 	mov.w	r8, r1, lsr #16
 80102fa:	42bb      	cmp	r3, r7
 80102fc:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 8010300:	f84e 1b04 	str.w	r1, [lr], #4
 8010304:	dbec      	blt.n	80102e0 <__multadd+0x12>
 8010306:	f1b8 0f00 	cmp.w	r8, #0
 801030a:	d01b      	beq.n	8010344 <__multadd+0x76>
 801030c:	68a3      	ldr	r3, [r4, #8]
 801030e:	429f      	cmp	r7, r3
 8010310:	db12      	blt.n	8010338 <__multadd+0x6a>
 8010312:	6861      	ldr	r1, [r4, #4]
 8010314:	4630      	mov	r0, r6
 8010316:	3101      	adds	r1, #1
 8010318:	f7ff ff8d 	bl	8010236 <_Balloc>
 801031c:	6922      	ldr	r2, [r4, #16]
 801031e:	3202      	adds	r2, #2
 8010320:	f104 010c 	add.w	r1, r4, #12
 8010324:	4605      	mov	r5, r0
 8010326:	0092      	lsls	r2, r2, #2
 8010328:	300c      	adds	r0, #12
 801032a:	f7f4 ff61 	bl	80051f0 <memcpy>
 801032e:	4621      	mov	r1, r4
 8010330:	4630      	mov	r0, r6
 8010332:	f7ff ffb5 	bl	80102a0 <_Bfree>
 8010336:	462c      	mov	r4, r5
 8010338:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801033c:	3701      	adds	r7, #1
 801033e:	f8c3 8014 	str.w	r8, [r3, #20]
 8010342:	6127      	str	r7, [r4, #16]
 8010344:	4620      	mov	r0, r4
 8010346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801034a <__hi0bits>:
 801034a:	0c03      	lsrs	r3, r0, #16
 801034c:	041b      	lsls	r3, r3, #16
 801034e:	b913      	cbnz	r3, 8010356 <__hi0bits+0xc>
 8010350:	0400      	lsls	r0, r0, #16
 8010352:	2310      	movs	r3, #16
 8010354:	e000      	b.n	8010358 <__hi0bits+0xe>
 8010356:	2300      	movs	r3, #0
 8010358:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801035c:	bf04      	itt	eq
 801035e:	0200      	lsleq	r0, r0, #8
 8010360:	3308      	addeq	r3, #8
 8010362:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010366:	bf04      	itt	eq
 8010368:	0100      	lsleq	r0, r0, #4
 801036a:	3304      	addeq	r3, #4
 801036c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010370:	bf04      	itt	eq
 8010372:	0080      	lsleq	r0, r0, #2
 8010374:	3302      	addeq	r3, #2
 8010376:	2800      	cmp	r0, #0
 8010378:	db03      	blt.n	8010382 <__hi0bits+0x38>
 801037a:	0042      	lsls	r2, r0, #1
 801037c:	d503      	bpl.n	8010386 <__hi0bits+0x3c>
 801037e:	1c58      	adds	r0, r3, #1
 8010380:	4770      	bx	lr
 8010382:	4618      	mov	r0, r3
 8010384:	4770      	bx	lr
 8010386:	2020      	movs	r0, #32
 8010388:	4770      	bx	lr

0801038a <__lo0bits>:
 801038a:	6803      	ldr	r3, [r0, #0]
 801038c:	f013 0207 	ands.w	r2, r3, #7
 8010390:	d00b      	beq.n	80103aa <__lo0bits+0x20>
 8010392:	07d9      	lsls	r1, r3, #31
 8010394:	d422      	bmi.n	80103dc <__lo0bits+0x52>
 8010396:	079a      	lsls	r2, r3, #30
 8010398:	bf4b      	itete	mi
 801039a:	085b      	lsrmi	r3, r3, #1
 801039c:	089b      	lsrpl	r3, r3, #2
 801039e:	6003      	strmi	r3, [r0, #0]
 80103a0:	6003      	strpl	r3, [r0, #0]
 80103a2:	bf4c      	ite	mi
 80103a4:	2001      	movmi	r0, #1
 80103a6:	2002      	movpl	r0, #2
 80103a8:	4770      	bx	lr
 80103aa:	b299      	uxth	r1, r3
 80103ac:	b909      	cbnz	r1, 80103b2 <__lo0bits+0x28>
 80103ae:	0c1b      	lsrs	r3, r3, #16
 80103b0:	2210      	movs	r2, #16
 80103b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80103b6:	bf04      	itt	eq
 80103b8:	0a1b      	lsreq	r3, r3, #8
 80103ba:	3208      	addeq	r2, #8
 80103bc:	0719      	lsls	r1, r3, #28
 80103be:	bf04      	itt	eq
 80103c0:	091b      	lsreq	r3, r3, #4
 80103c2:	3204      	addeq	r2, #4
 80103c4:	0799      	lsls	r1, r3, #30
 80103c6:	bf04      	itt	eq
 80103c8:	089b      	lsreq	r3, r3, #2
 80103ca:	3202      	addeq	r2, #2
 80103cc:	07d9      	lsls	r1, r3, #31
 80103ce:	d402      	bmi.n	80103d6 <__lo0bits+0x4c>
 80103d0:	085b      	lsrs	r3, r3, #1
 80103d2:	d005      	beq.n	80103e0 <__lo0bits+0x56>
 80103d4:	3201      	adds	r2, #1
 80103d6:	6003      	str	r3, [r0, #0]
 80103d8:	4610      	mov	r0, r2
 80103da:	4770      	bx	lr
 80103dc:	2000      	movs	r0, #0
 80103de:	4770      	bx	lr
 80103e0:	2020      	movs	r0, #32
 80103e2:	4770      	bx	lr

080103e4 <__i2b>:
 80103e4:	b510      	push	{r4, lr}
 80103e6:	460c      	mov	r4, r1
 80103e8:	2101      	movs	r1, #1
 80103ea:	f7ff ff24 	bl	8010236 <_Balloc>
 80103ee:	2201      	movs	r2, #1
 80103f0:	6144      	str	r4, [r0, #20]
 80103f2:	6102      	str	r2, [r0, #16]
 80103f4:	bd10      	pop	{r4, pc}

080103f6 <__multiply>:
 80103f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103fa:	4614      	mov	r4, r2
 80103fc:	690a      	ldr	r2, [r1, #16]
 80103fe:	6923      	ldr	r3, [r4, #16]
 8010400:	429a      	cmp	r2, r3
 8010402:	bfb8      	it	lt
 8010404:	460b      	movlt	r3, r1
 8010406:	4688      	mov	r8, r1
 8010408:	bfbc      	itt	lt
 801040a:	46a0      	movlt	r8, r4
 801040c:	461c      	movlt	r4, r3
 801040e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010412:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010416:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801041a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801041e:	eb07 0609 	add.w	r6, r7, r9
 8010422:	429e      	cmp	r6, r3
 8010424:	bfc8      	it	gt
 8010426:	3101      	addgt	r1, #1
 8010428:	f7ff ff05 	bl	8010236 <_Balloc>
 801042c:	f100 0514 	add.w	r5, r0, #20
 8010430:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8010434:	462b      	mov	r3, r5
 8010436:	4563      	cmp	r3, ip
 8010438:	d203      	bcs.n	8010442 <__multiply+0x4c>
 801043a:	2200      	movs	r2, #0
 801043c:	f843 2b04 	str.w	r2, [r3], #4
 8010440:	e7f9      	b.n	8010436 <__multiply+0x40>
 8010442:	f104 0214 	add.w	r2, r4, #20
 8010446:	f108 0114 	add.w	r1, r8, #20
 801044a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801044e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010452:	9300      	str	r3, [sp, #0]
 8010454:	9b00      	ldr	r3, [sp, #0]
 8010456:	9201      	str	r2, [sp, #4]
 8010458:	429a      	cmp	r2, r3
 801045a:	d257      	bcs.n	801050c <__multiply+0x116>
 801045c:	f8b2 b000 	ldrh.w	fp, [r2]
 8010460:	f1bb 0f00 	cmp.w	fp, #0
 8010464:	d023      	beq.n	80104ae <__multiply+0xb8>
 8010466:	4689      	mov	r9, r1
 8010468:	46ae      	mov	lr, r5
 801046a:	f04f 0800 	mov.w	r8, #0
 801046e:	f859 4b04 	ldr.w	r4, [r9], #4
 8010472:	f8be a000 	ldrh.w	sl, [lr]
 8010476:	b2a3      	uxth	r3, r4
 8010478:	fb0b a303 	mla	r3, fp, r3, sl
 801047c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010480:	f8de 4000 	ldr.w	r4, [lr]
 8010484:	4443      	add	r3, r8
 8010486:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801048a:	fb0b 840a 	mla	r4, fp, sl, r8
 801048e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010492:	46f2      	mov	sl, lr
 8010494:	b29b      	uxth	r3, r3
 8010496:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801049a:	454f      	cmp	r7, r9
 801049c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80104a0:	f84a 3b04 	str.w	r3, [sl], #4
 80104a4:	d901      	bls.n	80104aa <__multiply+0xb4>
 80104a6:	46d6      	mov	lr, sl
 80104a8:	e7e1      	b.n	801046e <__multiply+0x78>
 80104aa:	f8ce 8004 	str.w	r8, [lr, #4]
 80104ae:	9b01      	ldr	r3, [sp, #4]
 80104b0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80104b4:	3204      	adds	r2, #4
 80104b6:	f1ba 0f00 	cmp.w	sl, #0
 80104ba:	d021      	beq.n	8010500 <__multiply+0x10a>
 80104bc:	682b      	ldr	r3, [r5, #0]
 80104be:	462c      	mov	r4, r5
 80104c0:	4689      	mov	r9, r1
 80104c2:	f04f 0800 	mov.w	r8, #0
 80104c6:	f8b9 e000 	ldrh.w	lr, [r9]
 80104ca:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80104ce:	fb0a be0e 	mla	lr, sl, lr, fp
 80104d2:	44f0      	add	r8, lr
 80104d4:	46a3      	mov	fp, r4
 80104d6:	b29b      	uxth	r3, r3
 80104d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80104dc:	f84b 3b04 	str.w	r3, [fp], #4
 80104e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80104e4:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80104e8:	0c1b      	lsrs	r3, r3, #16
 80104ea:	fb0a e303 	mla	r3, sl, r3, lr
 80104ee:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80104f2:	45b9      	cmp	r9, r7
 80104f4:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80104f8:	d201      	bcs.n	80104fe <__multiply+0x108>
 80104fa:	465c      	mov	r4, fp
 80104fc:	e7e3      	b.n	80104c6 <__multiply+0xd0>
 80104fe:	6063      	str	r3, [r4, #4]
 8010500:	3504      	adds	r5, #4
 8010502:	e7a7      	b.n	8010454 <__multiply+0x5e>
 8010504:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8010508:	b913      	cbnz	r3, 8010510 <__multiply+0x11a>
 801050a:	3e01      	subs	r6, #1
 801050c:	2e00      	cmp	r6, #0
 801050e:	dcf9      	bgt.n	8010504 <__multiply+0x10e>
 8010510:	6106      	str	r6, [r0, #16]
 8010512:	b003      	add	sp, #12
 8010514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010518 <__pow5mult>:
 8010518:	f012 0303 	ands.w	r3, r2, #3
 801051c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010520:	4606      	mov	r6, r0
 8010522:	460f      	mov	r7, r1
 8010524:	4615      	mov	r5, r2
 8010526:	d007      	beq.n	8010538 <__pow5mult+0x20>
 8010528:	3b01      	subs	r3, #1
 801052a:	4a21      	ldr	r2, [pc, #132]	; (80105b0 <__pow5mult+0x98>)
 801052c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010530:	2300      	movs	r3, #0
 8010532:	f7ff fecc 	bl	80102ce <__multadd>
 8010536:	4607      	mov	r7, r0
 8010538:	10ad      	asrs	r5, r5, #2
 801053a:	d035      	beq.n	80105a8 <__pow5mult+0x90>
 801053c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801053e:	b93c      	cbnz	r4, 8010550 <__pow5mult+0x38>
 8010540:	2010      	movs	r0, #16
 8010542:	f7ff fe61 	bl	8010208 <malloc>
 8010546:	6270      	str	r0, [r6, #36]	; 0x24
 8010548:	6044      	str	r4, [r0, #4]
 801054a:	6084      	str	r4, [r0, #8]
 801054c:	6004      	str	r4, [r0, #0]
 801054e:	60c4      	str	r4, [r0, #12]
 8010550:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010558:	b97c      	cbnz	r4, 801057a <__pow5mult+0x62>
 801055a:	4630      	mov	r0, r6
 801055c:	f240 2171 	movw	r1, #625	; 0x271
 8010560:	f7ff ff40 	bl	80103e4 <__i2b>
 8010564:	2300      	movs	r3, #0
 8010566:	f8c8 0008 	str.w	r0, [r8, #8]
 801056a:	4604      	mov	r4, r0
 801056c:	6003      	str	r3, [r0, #0]
 801056e:	e004      	b.n	801057a <__pow5mult+0x62>
 8010570:	106d      	asrs	r5, r5, #1
 8010572:	d019      	beq.n	80105a8 <__pow5mult+0x90>
 8010574:	6820      	ldr	r0, [r4, #0]
 8010576:	b170      	cbz	r0, 8010596 <__pow5mult+0x7e>
 8010578:	4604      	mov	r4, r0
 801057a:	07eb      	lsls	r3, r5, #31
 801057c:	d5f8      	bpl.n	8010570 <__pow5mult+0x58>
 801057e:	4639      	mov	r1, r7
 8010580:	4622      	mov	r2, r4
 8010582:	4630      	mov	r0, r6
 8010584:	f7ff ff37 	bl	80103f6 <__multiply>
 8010588:	4639      	mov	r1, r7
 801058a:	4680      	mov	r8, r0
 801058c:	4630      	mov	r0, r6
 801058e:	f7ff fe87 	bl	80102a0 <_Bfree>
 8010592:	4647      	mov	r7, r8
 8010594:	e7ec      	b.n	8010570 <__pow5mult+0x58>
 8010596:	4630      	mov	r0, r6
 8010598:	4621      	mov	r1, r4
 801059a:	4622      	mov	r2, r4
 801059c:	f7ff ff2b 	bl	80103f6 <__multiply>
 80105a0:	2300      	movs	r3, #0
 80105a2:	6020      	str	r0, [r4, #0]
 80105a4:	6003      	str	r3, [r0, #0]
 80105a6:	e7e7      	b.n	8010578 <__pow5mult+0x60>
 80105a8:	4638      	mov	r0, r7
 80105aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ae:	bf00      	nop
 80105b0:	08011890 	.word	0x08011890

080105b4 <__lshift>:
 80105b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105b8:	460c      	mov	r4, r1
 80105ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80105be:	6923      	ldr	r3, [r4, #16]
 80105c0:	6849      	ldr	r1, [r1, #4]
 80105c2:	eb0a 0903 	add.w	r9, sl, r3
 80105c6:	68a3      	ldr	r3, [r4, #8]
 80105c8:	4607      	mov	r7, r0
 80105ca:	4616      	mov	r6, r2
 80105cc:	f109 0501 	add.w	r5, r9, #1
 80105d0:	429d      	cmp	r5, r3
 80105d2:	dd02      	ble.n	80105da <__lshift+0x26>
 80105d4:	3101      	adds	r1, #1
 80105d6:	005b      	lsls	r3, r3, #1
 80105d8:	e7fa      	b.n	80105d0 <__lshift+0x1c>
 80105da:	4638      	mov	r0, r7
 80105dc:	f7ff fe2b 	bl	8010236 <_Balloc>
 80105e0:	2300      	movs	r3, #0
 80105e2:	4680      	mov	r8, r0
 80105e4:	f100 0114 	add.w	r1, r0, #20
 80105e8:	4553      	cmp	r3, sl
 80105ea:	da04      	bge.n	80105f6 <__lshift+0x42>
 80105ec:	2200      	movs	r2, #0
 80105ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80105f2:	3301      	adds	r3, #1
 80105f4:	e7f8      	b.n	80105e8 <__lshift+0x34>
 80105f6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80105fa:	6920      	ldr	r0, [r4, #16]
 80105fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010600:	f016 021f 	ands.w	r2, r6, #31
 8010604:	f104 0114 	add.w	r1, r4, #20
 8010608:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801060c:	d014      	beq.n	8010638 <__lshift+0x84>
 801060e:	f1c2 0c20 	rsb	ip, r2, #32
 8010612:	2000      	movs	r0, #0
 8010614:	680e      	ldr	r6, [r1, #0]
 8010616:	4096      	lsls	r6, r2
 8010618:	4330      	orrs	r0, r6
 801061a:	469a      	mov	sl, r3
 801061c:	f843 0b04 	str.w	r0, [r3], #4
 8010620:	f851 0b04 	ldr.w	r0, [r1], #4
 8010624:	4571      	cmp	r1, lr
 8010626:	fa20 f00c 	lsr.w	r0, r0, ip
 801062a:	d3f3      	bcc.n	8010614 <__lshift+0x60>
 801062c:	f8ca 0004 	str.w	r0, [sl, #4]
 8010630:	b148      	cbz	r0, 8010646 <__lshift+0x92>
 8010632:	f109 0502 	add.w	r5, r9, #2
 8010636:	e006      	b.n	8010646 <__lshift+0x92>
 8010638:	3b04      	subs	r3, #4
 801063a:	f851 2b04 	ldr.w	r2, [r1], #4
 801063e:	f843 2f04 	str.w	r2, [r3, #4]!
 8010642:	4571      	cmp	r1, lr
 8010644:	d3f9      	bcc.n	801063a <__lshift+0x86>
 8010646:	3d01      	subs	r5, #1
 8010648:	4638      	mov	r0, r7
 801064a:	f8c8 5010 	str.w	r5, [r8, #16]
 801064e:	4621      	mov	r1, r4
 8010650:	f7ff fe26 	bl	80102a0 <_Bfree>
 8010654:	4640      	mov	r0, r8
 8010656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801065a <__mcmp>:
 801065a:	6903      	ldr	r3, [r0, #16]
 801065c:	690a      	ldr	r2, [r1, #16]
 801065e:	1a9b      	subs	r3, r3, r2
 8010660:	b510      	push	{r4, lr}
 8010662:	d111      	bne.n	8010688 <__mcmp+0x2e>
 8010664:	0092      	lsls	r2, r2, #2
 8010666:	3014      	adds	r0, #20
 8010668:	3114      	adds	r1, #20
 801066a:	1883      	adds	r3, r0, r2
 801066c:	440a      	add	r2, r1
 801066e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8010672:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010676:	428c      	cmp	r4, r1
 8010678:	d002      	beq.n	8010680 <__mcmp+0x26>
 801067a:	d307      	bcc.n	801068c <__mcmp+0x32>
 801067c:	2001      	movs	r0, #1
 801067e:	bd10      	pop	{r4, pc}
 8010680:	4283      	cmp	r3, r0
 8010682:	d8f4      	bhi.n	801066e <__mcmp+0x14>
 8010684:	2000      	movs	r0, #0
 8010686:	bd10      	pop	{r4, pc}
 8010688:	4618      	mov	r0, r3
 801068a:	bd10      	pop	{r4, pc}
 801068c:	f04f 30ff 	mov.w	r0, #4294967295
 8010690:	bd10      	pop	{r4, pc}

08010692 <__mdiff>:
 8010692:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010696:	4607      	mov	r7, r0
 8010698:	460c      	mov	r4, r1
 801069a:	4608      	mov	r0, r1
 801069c:	4611      	mov	r1, r2
 801069e:	4615      	mov	r5, r2
 80106a0:	f7ff ffdb 	bl	801065a <__mcmp>
 80106a4:	1e06      	subs	r6, r0, #0
 80106a6:	d108      	bne.n	80106ba <__mdiff+0x28>
 80106a8:	4638      	mov	r0, r7
 80106aa:	4631      	mov	r1, r6
 80106ac:	f7ff fdc3 	bl	8010236 <_Balloc>
 80106b0:	2301      	movs	r3, #1
 80106b2:	6103      	str	r3, [r0, #16]
 80106b4:	6146      	str	r6, [r0, #20]
 80106b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106ba:	bfbc      	itt	lt
 80106bc:	4623      	movlt	r3, r4
 80106be:	462c      	movlt	r4, r5
 80106c0:	4638      	mov	r0, r7
 80106c2:	6861      	ldr	r1, [r4, #4]
 80106c4:	bfba      	itte	lt
 80106c6:	461d      	movlt	r5, r3
 80106c8:	2601      	movlt	r6, #1
 80106ca:	2600      	movge	r6, #0
 80106cc:	f7ff fdb3 	bl	8010236 <_Balloc>
 80106d0:	692b      	ldr	r3, [r5, #16]
 80106d2:	60c6      	str	r6, [r0, #12]
 80106d4:	6926      	ldr	r6, [r4, #16]
 80106d6:	f105 0914 	add.w	r9, r5, #20
 80106da:	3414      	adds	r4, #20
 80106dc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 80106e0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80106e4:	f100 0514 	add.w	r5, r0, #20
 80106e8:	f04f 0c00 	mov.w	ip, #0
 80106ec:	f854 3b04 	ldr.w	r3, [r4], #4
 80106f0:	f859 2b04 	ldr.w	r2, [r9], #4
 80106f4:	fa1c f183 	uxtah	r1, ip, r3
 80106f8:	fa1f fe82 	uxth.w	lr, r2
 80106fc:	0c12      	lsrs	r2, r2, #16
 80106fe:	ebce 0101 	rsb	r1, lr, r1
 8010702:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8010706:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801070a:	b289      	uxth	r1, r1
 801070c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8010710:	45c8      	cmp	r8, r9
 8010712:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010716:	46a6      	mov	lr, r4
 8010718:	f845 3b04 	str.w	r3, [r5], #4
 801071c:	d8e6      	bhi.n	80106ec <__mdiff+0x5a>
 801071e:	45be      	cmp	lr, r7
 8010720:	d20e      	bcs.n	8010740 <__mdiff+0xae>
 8010722:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010726:	fa1c f482 	uxtah	r4, ip, r2
 801072a:	0c12      	lsrs	r2, r2, #16
 801072c:	eb02 4224 	add.w	r2, r2, r4, asr #16
 8010730:	b2a4      	uxth	r4, r4
 8010732:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010736:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 801073a:	f845 2b04 	str.w	r2, [r5], #4
 801073e:	e7ee      	b.n	801071e <__mdiff+0x8c>
 8010740:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010744:	b90b      	cbnz	r3, 801074a <__mdiff+0xb8>
 8010746:	3e01      	subs	r6, #1
 8010748:	e7fa      	b.n	8010740 <__mdiff+0xae>
 801074a:	6106      	str	r6, [r0, #16]
 801074c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010750 <__d2b>:
 8010750:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010754:	2101      	movs	r1, #1
 8010756:	461d      	mov	r5, r3
 8010758:	9f08      	ldr	r7, [sp, #32]
 801075a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801075c:	4614      	mov	r4, r2
 801075e:	f7ff fd6a 	bl	8010236 <_Balloc>
 8010762:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8010766:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801076a:	4680      	mov	r8, r0
 801076c:	b10d      	cbz	r5, 8010772 <__d2b+0x22>
 801076e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010772:	9301      	str	r3, [sp, #4]
 8010774:	b1ec      	cbz	r4, 80107b2 <__d2b+0x62>
 8010776:	a802      	add	r0, sp, #8
 8010778:	f840 4d08 	str.w	r4, [r0, #-8]!
 801077c:	f7ff fe05 	bl	801038a <__lo0bits>
 8010780:	9b00      	ldr	r3, [sp, #0]
 8010782:	b150      	cbz	r0, 801079a <__d2b+0x4a>
 8010784:	9a01      	ldr	r2, [sp, #4]
 8010786:	f1c0 0120 	rsb	r1, r0, #32
 801078a:	fa02 f101 	lsl.w	r1, r2, r1
 801078e:	430b      	orrs	r3, r1
 8010790:	40c2      	lsrs	r2, r0
 8010792:	f8c8 3014 	str.w	r3, [r8, #20]
 8010796:	9201      	str	r2, [sp, #4]
 8010798:	e001      	b.n	801079e <__d2b+0x4e>
 801079a:	f8c8 3014 	str.w	r3, [r8, #20]
 801079e:	9b01      	ldr	r3, [sp, #4]
 80107a0:	f8c8 3018 	str.w	r3, [r8, #24]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	bf14      	ite	ne
 80107a8:	2402      	movne	r4, #2
 80107aa:	2401      	moveq	r4, #1
 80107ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80107b0:	e009      	b.n	80107c6 <__d2b+0x76>
 80107b2:	a801      	add	r0, sp, #4
 80107b4:	f7ff fde9 	bl	801038a <__lo0bits>
 80107b8:	2401      	movs	r4, #1
 80107ba:	9b01      	ldr	r3, [sp, #4]
 80107bc:	f8c8 3014 	str.w	r3, [r8, #20]
 80107c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80107c4:	3020      	adds	r0, #32
 80107c6:	b135      	cbz	r5, 80107d6 <__d2b+0x86>
 80107c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80107cc:	4405      	add	r5, r0
 80107ce:	603d      	str	r5, [r7, #0]
 80107d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80107d4:	e009      	b.n	80107ea <__d2b+0x9a>
 80107d6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80107da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80107de:	6038      	str	r0, [r7, #0]
 80107e0:	6918      	ldr	r0, [r3, #16]
 80107e2:	f7ff fdb2 	bl	801034a <__hi0bits>
 80107e6:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80107ea:	6030      	str	r0, [r6, #0]
 80107ec:	4640      	mov	r0, r8
 80107ee:	b002      	add	sp, #8
 80107f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080107f4 <_calloc_r>:
 80107f4:	b538      	push	{r3, r4, r5, lr}
 80107f6:	fb02 f401 	mul.w	r4, r2, r1
 80107fa:	4621      	mov	r1, r4
 80107fc:	f000 f84c 	bl	8010898 <_malloc_r>
 8010800:	4605      	mov	r5, r0
 8010802:	b118      	cbz	r0, 801080c <_calloc_r+0x18>
 8010804:	2100      	movs	r1, #0
 8010806:	4622      	mov	r2, r4
 8010808:	f7fe f8f3 	bl	800e9f2 <memset>
 801080c:	4628      	mov	r0, r5
 801080e:	bd38      	pop	{r3, r4, r5, pc}

08010810 <_free_r>:
 8010810:	b530      	push	{r4, r5, lr}
 8010812:	2900      	cmp	r1, #0
 8010814:	d03d      	beq.n	8010892 <_free_r+0x82>
 8010816:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801081a:	1f0b      	subs	r3, r1, #4
 801081c:	491d      	ldr	r1, [pc, #116]	; (8010894 <_free_r+0x84>)
 801081e:	2a00      	cmp	r2, #0
 8010820:	bfb8      	it	lt
 8010822:	189b      	addlt	r3, r3, r2
 8010824:	680a      	ldr	r2, [r1, #0]
 8010826:	460c      	mov	r4, r1
 8010828:	b912      	cbnz	r2, 8010830 <_free_r+0x20>
 801082a:	605a      	str	r2, [r3, #4]
 801082c:	600b      	str	r3, [r1, #0]
 801082e:	bd30      	pop	{r4, r5, pc}
 8010830:	4293      	cmp	r3, r2
 8010832:	d20d      	bcs.n	8010850 <_free_r+0x40>
 8010834:	6819      	ldr	r1, [r3, #0]
 8010836:	1858      	adds	r0, r3, r1
 8010838:	4290      	cmp	r0, r2
 801083a:	bf01      	itttt	eq
 801083c:	585a      	ldreq	r2, [r3, r1]
 801083e:	1852      	addeq	r2, r2, r1
 8010840:	601a      	streq	r2, [r3, #0]
 8010842:	6842      	ldreq	r2, [r0, #4]
 8010844:	605a      	str	r2, [r3, #4]
 8010846:	6023      	str	r3, [r4, #0]
 8010848:	bd30      	pop	{r4, r5, pc}
 801084a:	4299      	cmp	r1, r3
 801084c:	d803      	bhi.n	8010856 <_free_r+0x46>
 801084e:	460a      	mov	r2, r1
 8010850:	6851      	ldr	r1, [r2, #4]
 8010852:	2900      	cmp	r1, #0
 8010854:	d1f9      	bne.n	801084a <_free_r+0x3a>
 8010856:	6814      	ldr	r4, [r2, #0]
 8010858:	1915      	adds	r5, r2, r4
 801085a:	429d      	cmp	r5, r3
 801085c:	d10a      	bne.n	8010874 <_free_r+0x64>
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	4423      	add	r3, r4
 8010862:	18d0      	adds	r0, r2, r3
 8010864:	4288      	cmp	r0, r1
 8010866:	6013      	str	r3, [r2, #0]
 8010868:	d113      	bne.n	8010892 <_free_r+0x82>
 801086a:	6808      	ldr	r0, [r1, #0]
 801086c:	4403      	add	r3, r0
 801086e:	6013      	str	r3, [r2, #0]
 8010870:	684b      	ldr	r3, [r1, #4]
 8010872:	e00d      	b.n	8010890 <_free_r+0x80>
 8010874:	d902      	bls.n	801087c <_free_r+0x6c>
 8010876:	230c      	movs	r3, #12
 8010878:	6003      	str	r3, [r0, #0]
 801087a:	bd30      	pop	{r4, r5, pc}
 801087c:	681c      	ldr	r4, [r3, #0]
 801087e:	1918      	adds	r0, r3, r4
 8010880:	4288      	cmp	r0, r1
 8010882:	bf04      	itt	eq
 8010884:	6808      	ldreq	r0, [r1, #0]
 8010886:	6849      	ldreq	r1, [r1, #4]
 8010888:	6059      	str	r1, [r3, #4]
 801088a:	bf04      	itt	eq
 801088c:	1900      	addeq	r0, r0, r4
 801088e:	6018      	streq	r0, [r3, #0]
 8010890:	6053      	str	r3, [r2, #4]
 8010892:	bd30      	pop	{r4, r5, pc}
 8010894:	1ffe8b74 	.word	0x1ffe8b74

08010898 <_malloc_r>:
 8010898:	b570      	push	{r4, r5, r6, lr}
 801089a:	1ccc      	adds	r4, r1, #3
 801089c:	f024 0403 	bic.w	r4, r4, #3
 80108a0:	3408      	adds	r4, #8
 80108a2:	2c0c      	cmp	r4, #12
 80108a4:	bf38      	it	cc
 80108a6:	240c      	movcc	r4, #12
 80108a8:	2c00      	cmp	r4, #0
 80108aa:	4606      	mov	r6, r0
 80108ac:	da03      	bge.n	80108b6 <_malloc_r+0x1e>
 80108ae:	230c      	movs	r3, #12
 80108b0:	6033      	str	r3, [r6, #0]
 80108b2:	2000      	movs	r0, #0
 80108b4:	bd70      	pop	{r4, r5, r6, pc}
 80108b6:	428c      	cmp	r4, r1
 80108b8:	d3f9      	bcc.n	80108ae <_malloc_r+0x16>
 80108ba:	4a20      	ldr	r2, [pc, #128]	; (801093c <_malloc_r+0xa4>)
 80108bc:	6813      	ldr	r3, [r2, #0]
 80108be:	4610      	mov	r0, r2
 80108c0:	4619      	mov	r1, r3
 80108c2:	b1a1      	cbz	r1, 80108ee <_malloc_r+0x56>
 80108c4:	680a      	ldr	r2, [r1, #0]
 80108c6:	1b12      	subs	r2, r2, r4
 80108c8:	d40e      	bmi.n	80108e8 <_malloc_r+0x50>
 80108ca:	2a0b      	cmp	r2, #11
 80108cc:	d903      	bls.n	80108d6 <_malloc_r+0x3e>
 80108ce:	600a      	str	r2, [r1, #0]
 80108d0:	188b      	adds	r3, r1, r2
 80108d2:	508c      	str	r4, [r1, r2]
 80108d4:	e01f      	b.n	8010916 <_malloc_r+0x7e>
 80108d6:	428b      	cmp	r3, r1
 80108d8:	bf0d      	iteet	eq
 80108da:	685a      	ldreq	r2, [r3, #4]
 80108dc:	684a      	ldrne	r2, [r1, #4]
 80108de:	605a      	strne	r2, [r3, #4]
 80108e0:	6002      	streq	r2, [r0, #0]
 80108e2:	bf18      	it	ne
 80108e4:	460b      	movne	r3, r1
 80108e6:	e016      	b.n	8010916 <_malloc_r+0x7e>
 80108e8:	460b      	mov	r3, r1
 80108ea:	6849      	ldr	r1, [r1, #4]
 80108ec:	e7e9      	b.n	80108c2 <_malloc_r+0x2a>
 80108ee:	4d14      	ldr	r5, [pc, #80]	; (8010940 <_malloc_r+0xa8>)
 80108f0:	682b      	ldr	r3, [r5, #0]
 80108f2:	b91b      	cbnz	r3, 80108fc <_malloc_r+0x64>
 80108f4:	4630      	mov	r0, r6
 80108f6:	f000 faa1 	bl	8010e3c <_sbrk_r>
 80108fa:	6028      	str	r0, [r5, #0]
 80108fc:	4630      	mov	r0, r6
 80108fe:	4621      	mov	r1, r4
 8010900:	f000 fa9c 	bl	8010e3c <_sbrk_r>
 8010904:	1c42      	adds	r2, r0, #1
 8010906:	4603      	mov	r3, r0
 8010908:	d0d1      	beq.n	80108ae <_malloc_r+0x16>
 801090a:	1cc5      	adds	r5, r0, #3
 801090c:	f025 0503 	bic.w	r5, r5, #3
 8010910:	4285      	cmp	r5, r0
 8010912:	d10a      	bne.n	801092a <_malloc_r+0x92>
 8010914:	601c      	str	r4, [r3, #0]
 8010916:	f103 000b 	add.w	r0, r3, #11
 801091a:	1d1a      	adds	r2, r3, #4
 801091c:	f020 0007 	bic.w	r0, r0, #7
 8010920:	1a82      	subs	r2, r0, r2
 8010922:	d00a      	beq.n	801093a <_malloc_r+0xa2>
 8010924:	4251      	negs	r1, r2
 8010926:	5099      	str	r1, [r3, r2]
 8010928:	bd70      	pop	{r4, r5, r6, pc}
 801092a:	4630      	mov	r0, r6
 801092c:	1ae9      	subs	r1, r5, r3
 801092e:	f000 fa85 	bl	8010e3c <_sbrk_r>
 8010932:	3001      	adds	r0, #1
 8010934:	d0bb      	beq.n	80108ae <_malloc_r+0x16>
 8010936:	462b      	mov	r3, r5
 8010938:	e7ec      	b.n	8010914 <_malloc_r+0x7c>
 801093a:	bd70      	pop	{r4, r5, r6, pc}
 801093c:	1ffe8b74 	.word	0x1ffe8b74
 8010940:	1ffe8b70 	.word	0x1ffe8b70

08010944 <__ssputs_r>:
 8010944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010948:	688e      	ldr	r6, [r1, #8]
 801094a:	42b3      	cmp	r3, r6
 801094c:	4682      	mov	sl, r0
 801094e:	460c      	mov	r4, r1
 8010950:	4690      	mov	r8, r2
 8010952:	4699      	mov	r9, r3
 8010954:	d340      	bcc.n	80109d8 <__ssputs_r+0x94>
 8010956:	898a      	ldrh	r2, [r1, #12]
 8010958:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801095c:	d03a      	beq.n	80109d4 <__ssputs_r+0x90>
 801095e:	6825      	ldr	r5, [r4, #0]
 8010960:	6909      	ldr	r1, [r1, #16]
 8010962:	1a6f      	subs	r7, r5, r1
 8010964:	6965      	ldr	r5, [r4, #20]
 8010966:	2302      	movs	r3, #2
 8010968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801096c:	fb95 f5f3 	sdiv	r5, r5, r3
 8010970:	1c7b      	adds	r3, r7, #1
 8010972:	444b      	add	r3, r9
 8010974:	429d      	cmp	r5, r3
 8010976:	bf38      	it	cc
 8010978:	461d      	movcc	r5, r3
 801097a:	0553      	lsls	r3, r2, #21
 801097c:	d50f      	bpl.n	801099e <__ssputs_r+0x5a>
 801097e:	4629      	mov	r1, r5
 8010980:	f7ff ff8a 	bl	8010898 <_malloc_r>
 8010984:	4606      	mov	r6, r0
 8010986:	b198      	cbz	r0, 80109b0 <__ssputs_r+0x6c>
 8010988:	6921      	ldr	r1, [r4, #16]
 801098a:	463a      	mov	r2, r7
 801098c:	f7f4 fc30 	bl	80051f0 <memcpy>
 8010990:	89a3      	ldrh	r3, [r4, #12]
 8010992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801099a:	81a3      	strh	r3, [r4, #12]
 801099c:	e013      	b.n	80109c6 <__ssputs_r+0x82>
 801099e:	462a      	mov	r2, r5
 80109a0:	f000 fc90 	bl	80112c4 <_realloc_r>
 80109a4:	4606      	mov	r6, r0
 80109a6:	b970      	cbnz	r0, 80109c6 <__ssputs_r+0x82>
 80109a8:	4650      	mov	r0, sl
 80109aa:	6921      	ldr	r1, [r4, #16]
 80109ac:	f7ff ff30 	bl	8010810 <_free_r>
 80109b0:	230c      	movs	r3, #12
 80109b2:	f8ca 3000 	str.w	r3, [sl]
 80109b6:	89a3      	ldrh	r3, [r4, #12]
 80109b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109bc:	81a3      	strh	r3, [r4, #12]
 80109be:	f04f 30ff 	mov.w	r0, #4294967295
 80109c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109c6:	6126      	str	r6, [r4, #16]
 80109c8:	6165      	str	r5, [r4, #20]
 80109ca:	443e      	add	r6, r7
 80109cc:	1bed      	subs	r5, r5, r7
 80109ce:	6026      	str	r6, [r4, #0]
 80109d0:	60a5      	str	r5, [r4, #8]
 80109d2:	464e      	mov	r6, r9
 80109d4:	45b1      	cmp	r9, r6
 80109d6:	d200      	bcs.n	80109da <__ssputs_r+0x96>
 80109d8:	464e      	mov	r6, r9
 80109da:	4632      	mov	r2, r6
 80109dc:	6820      	ldr	r0, [r4, #0]
 80109de:	4641      	mov	r1, r8
 80109e0:	f7fd ffec 	bl	800e9bc <memmove>
 80109e4:	68a3      	ldr	r3, [r4, #8]
 80109e6:	1b9b      	subs	r3, r3, r6
 80109e8:	60a3      	str	r3, [r4, #8]
 80109ea:	6823      	ldr	r3, [r4, #0]
 80109ec:	441e      	add	r6, r3
 80109ee:	6026      	str	r6, [r4, #0]
 80109f0:	2000      	movs	r0, #0
 80109f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080109f8 <_svfiprintf_r>:
 80109f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109fc:	b09d      	sub	sp, #116	; 0x74
 80109fe:	4606      	mov	r6, r0
 8010a00:	9303      	str	r3, [sp, #12]
 8010a02:	898b      	ldrh	r3, [r1, #12]
 8010a04:	061c      	lsls	r4, r3, #24
 8010a06:	460d      	mov	r5, r1
 8010a08:	4690      	mov	r8, r2
 8010a0a:	d50c      	bpl.n	8010a26 <_svfiprintf_r+0x2e>
 8010a0c:	690b      	ldr	r3, [r1, #16]
 8010a0e:	b953      	cbnz	r3, 8010a26 <_svfiprintf_r+0x2e>
 8010a10:	2140      	movs	r1, #64	; 0x40
 8010a12:	f7ff ff41 	bl	8010898 <_malloc_r>
 8010a16:	6028      	str	r0, [r5, #0]
 8010a18:	6128      	str	r0, [r5, #16]
 8010a1a:	b910      	cbnz	r0, 8010a22 <_svfiprintf_r+0x2a>
 8010a1c:	230c      	movs	r3, #12
 8010a1e:	6033      	str	r3, [r6, #0]
 8010a20:	e0cc      	b.n	8010bbc <_svfiprintf_r+0x1c4>
 8010a22:	2340      	movs	r3, #64	; 0x40
 8010a24:	616b      	str	r3, [r5, #20]
 8010a26:	2300      	movs	r3, #0
 8010a28:	9309      	str	r3, [sp, #36]	; 0x24
 8010a2a:	2320      	movs	r3, #32
 8010a2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a30:	2330      	movs	r3, #48	; 0x30
 8010a32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a36:	4643      	mov	r3, r8
 8010a38:	461c      	mov	r4, r3
 8010a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a3e:	b91a      	cbnz	r2, 8010a48 <_svfiprintf_r+0x50>
 8010a40:	ebb4 0908 	subs.w	r9, r4, r8
 8010a44:	d00f      	beq.n	8010a66 <_svfiprintf_r+0x6e>
 8010a46:	e002      	b.n	8010a4e <_svfiprintf_r+0x56>
 8010a48:	2a25      	cmp	r2, #37	; 0x25
 8010a4a:	d1f5      	bne.n	8010a38 <_svfiprintf_r+0x40>
 8010a4c:	e7f8      	b.n	8010a40 <_svfiprintf_r+0x48>
 8010a4e:	4630      	mov	r0, r6
 8010a50:	4629      	mov	r1, r5
 8010a52:	4642      	mov	r2, r8
 8010a54:	464b      	mov	r3, r9
 8010a56:	f7ff ff75 	bl	8010944 <__ssputs_r>
 8010a5a:	3001      	adds	r0, #1
 8010a5c:	f000 80a9 	beq.w	8010bb2 <_svfiprintf_r+0x1ba>
 8010a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a62:	444b      	add	r3, r9
 8010a64:	9309      	str	r3, [sp, #36]	; 0x24
 8010a66:	7823      	ldrb	r3, [r4, #0]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	f000 80a2 	beq.w	8010bb2 <_svfiprintf_r+0x1ba>
 8010a6e:	2300      	movs	r3, #0
 8010a70:	f04f 32ff 	mov.w	r2, #4294967295
 8010a74:	9304      	str	r3, [sp, #16]
 8010a76:	9307      	str	r3, [sp, #28]
 8010a78:	9205      	str	r2, [sp, #20]
 8010a7a:	9306      	str	r3, [sp, #24]
 8010a7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a80:	931a      	str	r3, [sp, #104]	; 0x68
 8010a82:	f104 0801 	add.w	r8, r4, #1
 8010a86:	4644      	mov	r4, r8
 8010a88:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8010bd4 <_svfiprintf_r+0x1dc>
 8010a8c:	7821      	ldrb	r1, [r4, #0]
 8010a8e:	4648      	mov	r0, r9
 8010a90:	2205      	movs	r2, #5
 8010a92:	f7ff fbc1 	bl	8010218 <memchr>
 8010a96:	f108 0801 	add.w	r8, r8, #1
 8010a9a:	9b04      	ldr	r3, [sp, #16]
 8010a9c:	b130      	cbz	r0, 8010aac <_svfiprintf_r+0xb4>
 8010a9e:	ebc9 0000 	rsb	r0, r9, r0
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	4082      	lsls	r2, r0
 8010aa6:	4313      	orrs	r3, r2
 8010aa8:	9304      	str	r3, [sp, #16]
 8010aaa:	e7ec      	b.n	8010a86 <_svfiprintf_r+0x8e>
 8010aac:	06d8      	lsls	r0, r3, #27
 8010aae:	bf44      	itt	mi
 8010ab0:	2220      	movmi	r2, #32
 8010ab2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010ab6:	0719      	lsls	r1, r3, #28
 8010ab8:	bf44      	itt	mi
 8010aba:	222b      	movmi	r2, #43	; 0x2b
 8010abc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010ac0:	7822      	ldrb	r2, [r4, #0]
 8010ac2:	2a2a      	cmp	r2, #42	; 0x2a
 8010ac4:	d002      	beq.n	8010acc <_svfiprintf_r+0xd4>
 8010ac6:	9907      	ldr	r1, [sp, #28]
 8010ac8:	4623      	mov	r3, r4
 8010aca:	e00e      	b.n	8010aea <_svfiprintf_r+0xf2>
 8010acc:	9a03      	ldr	r2, [sp, #12]
 8010ace:	1d11      	adds	r1, r2, #4
 8010ad0:	6812      	ldr	r2, [r2, #0]
 8010ad2:	9103      	str	r1, [sp, #12]
 8010ad4:	2a00      	cmp	r2, #0
 8010ad6:	bfbb      	ittet	lt
 8010ad8:	4252      	neglt	r2, r2
 8010ada:	f043 0302 	orrlt.w	r3, r3, #2
 8010ade:	9207      	strge	r2, [sp, #28]
 8010ae0:	9207      	strlt	r2, [sp, #28]
 8010ae2:	bfb8      	it	lt
 8010ae4:	9304      	strlt	r3, [sp, #16]
 8010ae6:	3401      	adds	r4, #1
 8010ae8:	e00a      	b.n	8010b00 <_svfiprintf_r+0x108>
 8010aea:	461c      	mov	r4, r3
 8010aec:	3301      	adds	r3, #1
 8010aee:	7822      	ldrb	r2, [r4, #0]
 8010af0:	3a30      	subs	r2, #48	; 0x30
 8010af2:	2a09      	cmp	r2, #9
 8010af4:	d803      	bhi.n	8010afe <_svfiprintf_r+0x106>
 8010af6:	200a      	movs	r0, #10
 8010af8:	fb00 2101 	mla	r1, r0, r1, r2
 8010afc:	e7f5      	b.n	8010aea <_svfiprintf_r+0xf2>
 8010afe:	9107      	str	r1, [sp, #28]
 8010b00:	7823      	ldrb	r3, [r4, #0]
 8010b02:	2b2e      	cmp	r3, #46	; 0x2e
 8010b04:	d11a      	bne.n	8010b3c <_svfiprintf_r+0x144>
 8010b06:	7863      	ldrb	r3, [r4, #1]
 8010b08:	2b2a      	cmp	r3, #42	; 0x2a
 8010b0a:	d10a      	bne.n	8010b22 <_svfiprintf_r+0x12a>
 8010b0c:	9b03      	ldr	r3, [sp, #12]
 8010b0e:	1d1a      	adds	r2, r3, #4
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	9203      	str	r2, [sp, #12]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	bfb8      	it	lt
 8010b18:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b1c:	3402      	adds	r4, #2
 8010b1e:	9305      	str	r3, [sp, #20]
 8010b20:	e00c      	b.n	8010b3c <_svfiprintf_r+0x144>
 8010b22:	1c61      	adds	r1, r4, #1
 8010b24:	2200      	movs	r2, #0
 8010b26:	460c      	mov	r4, r1
 8010b28:	3101      	adds	r1, #1
 8010b2a:	7823      	ldrb	r3, [r4, #0]
 8010b2c:	3b30      	subs	r3, #48	; 0x30
 8010b2e:	2b09      	cmp	r3, #9
 8010b30:	d803      	bhi.n	8010b3a <_svfiprintf_r+0x142>
 8010b32:	200a      	movs	r0, #10
 8010b34:	fb00 3202 	mla	r2, r0, r2, r3
 8010b38:	e7f5      	b.n	8010b26 <_svfiprintf_r+0x12e>
 8010b3a:	9205      	str	r2, [sp, #20]
 8010b3c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8010bd8 <_svfiprintf_r+0x1e0>
 8010b40:	7821      	ldrb	r1, [r4, #0]
 8010b42:	4640      	mov	r0, r8
 8010b44:	2203      	movs	r2, #3
 8010b46:	f7ff fb67 	bl	8010218 <memchr>
 8010b4a:	b138      	cbz	r0, 8010b5c <_svfiprintf_r+0x164>
 8010b4c:	9a04      	ldr	r2, [sp, #16]
 8010b4e:	ebc8 0000 	rsb	r0, r8, r0
 8010b52:	2340      	movs	r3, #64	; 0x40
 8010b54:	4083      	lsls	r3, r0
 8010b56:	4313      	orrs	r3, r2
 8010b58:	9304      	str	r3, [sp, #16]
 8010b5a:	3401      	adds	r4, #1
 8010b5c:	7821      	ldrb	r1, [r4, #0]
 8010b5e:	481a      	ldr	r0, [pc, #104]	; (8010bc8 <_svfiprintf_r+0x1d0>)
 8010b60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b64:	2206      	movs	r2, #6
 8010b66:	f104 0801 	add.w	r8, r4, #1
 8010b6a:	f7ff fb55 	bl	8010218 <memchr>
 8010b6e:	b188      	cbz	r0, 8010b94 <_svfiprintf_r+0x19c>
 8010b70:	4b16      	ldr	r3, [pc, #88]	; (8010bcc <_svfiprintf_r+0x1d4>)
 8010b72:	b933      	cbnz	r3, 8010b82 <_svfiprintf_r+0x18a>
 8010b74:	9b03      	ldr	r3, [sp, #12]
 8010b76:	3307      	adds	r3, #7
 8010b78:	f023 0307 	bic.w	r3, r3, #7
 8010b7c:	3308      	adds	r3, #8
 8010b7e:	9303      	str	r3, [sp, #12]
 8010b80:	e013      	b.n	8010baa <_svfiprintf_r+0x1b2>
 8010b82:	ab03      	add	r3, sp, #12
 8010b84:	9300      	str	r3, [sp, #0]
 8010b86:	4630      	mov	r0, r6
 8010b88:	a904      	add	r1, sp, #16
 8010b8a:	462a      	mov	r2, r5
 8010b8c:	4b10      	ldr	r3, [pc, #64]	; (8010bd0 <_svfiprintf_r+0x1d8>)
 8010b8e:	f7fd ffc9 	bl	800eb24 <_printf_float>
 8010b92:	e007      	b.n	8010ba4 <_svfiprintf_r+0x1ac>
 8010b94:	ab03      	add	r3, sp, #12
 8010b96:	9300      	str	r3, [sp, #0]
 8010b98:	4630      	mov	r0, r6
 8010b9a:	a904      	add	r1, sp, #16
 8010b9c:	462a      	mov	r2, r5
 8010b9e:	4b0c      	ldr	r3, [pc, #48]	; (8010bd0 <_svfiprintf_r+0x1d8>)
 8010ba0:	f7fe fa7a 	bl	800f098 <_printf_i>
 8010ba4:	1c42      	adds	r2, r0, #1
 8010ba6:	4607      	mov	r7, r0
 8010ba8:	d003      	beq.n	8010bb2 <_svfiprintf_r+0x1ba>
 8010baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bac:	443b      	add	r3, r7
 8010bae:	9309      	str	r3, [sp, #36]	; 0x24
 8010bb0:	e741      	b.n	8010a36 <_svfiprintf_r+0x3e>
 8010bb2:	89ab      	ldrh	r3, [r5, #12]
 8010bb4:	065b      	lsls	r3, r3, #25
 8010bb6:	d401      	bmi.n	8010bbc <_svfiprintf_r+0x1c4>
 8010bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bba:	e001      	b.n	8010bc0 <_svfiprintf_r+0x1c8>
 8010bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8010bc0:	b01d      	add	sp, #116	; 0x74
 8010bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bc6:	bf00      	nop
 8010bc8:	080118a6 	.word	0x080118a6
 8010bcc:	0800eb25 	.word	0x0800eb25
 8010bd0:	08010945 	.word	0x08010945
 8010bd4:	0801189c 	.word	0x0801189c
 8010bd8:	080118a2 	.word	0x080118a2

08010bdc <__sfputc_r>:
 8010bdc:	6893      	ldr	r3, [r2, #8]
 8010bde:	3b01      	subs	r3, #1
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	b510      	push	{r4, lr}
 8010be4:	6093      	str	r3, [r2, #8]
 8010be6:	da09      	bge.n	8010bfc <__sfputc_r+0x20>
 8010be8:	6994      	ldr	r4, [r2, #24]
 8010bea:	42a3      	cmp	r3, r4
 8010bec:	db02      	blt.n	8010bf4 <__sfputc_r+0x18>
 8010bee:	b2cb      	uxtb	r3, r1
 8010bf0:	2b0a      	cmp	r3, #10
 8010bf2:	d103      	bne.n	8010bfc <__sfputc_r+0x20>
 8010bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bf8:	f000 b974 	b.w	8010ee4 <__swbuf_r>
 8010bfc:	6813      	ldr	r3, [r2, #0]
 8010bfe:	1c58      	adds	r0, r3, #1
 8010c00:	6010      	str	r0, [r2, #0]
 8010c02:	7019      	strb	r1, [r3, #0]
 8010c04:	b2c8      	uxtb	r0, r1
 8010c06:	bd10      	pop	{r4, pc}

08010c08 <__sfputs_r>:
 8010c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c0a:	4606      	mov	r6, r0
 8010c0c:	460f      	mov	r7, r1
 8010c0e:	4614      	mov	r4, r2
 8010c10:	18d5      	adds	r5, r2, r3
 8010c12:	42ac      	cmp	r4, r5
 8010c14:	d008      	beq.n	8010c28 <__sfputs_r+0x20>
 8010c16:	4630      	mov	r0, r6
 8010c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c1c:	463a      	mov	r2, r7
 8010c1e:	f7ff ffdd 	bl	8010bdc <__sfputc_r>
 8010c22:	1c43      	adds	r3, r0, #1
 8010c24:	d1f5      	bne.n	8010c12 <__sfputs_r+0xa>
 8010c26:	e000      	b.n	8010c2a <__sfputs_r+0x22>
 8010c28:	2000      	movs	r0, #0
 8010c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010c2c <_vfiprintf_r>:
 8010c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c30:	b09d      	sub	sp, #116	; 0x74
 8010c32:	460d      	mov	r5, r1
 8010c34:	4690      	mov	r8, r2
 8010c36:	9303      	str	r3, [sp, #12]
 8010c38:	4606      	mov	r6, r0
 8010c3a:	b118      	cbz	r0, 8010c44 <_vfiprintf_r+0x18>
 8010c3c:	6983      	ldr	r3, [r0, #24]
 8010c3e:	b90b      	cbnz	r3, 8010c44 <_vfiprintf_r+0x18>
 8010c40:	f7ff fa56 	bl	80100f0 <__sinit>
 8010c44:	4b75      	ldr	r3, [pc, #468]	; (8010e1c <_vfiprintf_r+0x1f0>)
 8010c46:	429d      	cmp	r5, r3
 8010c48:	d101      	bne.n	8010c4e <_vfiprintf_r+0x22>
 8010c4a:	6875      	ldr	r5, [r6, #4]
 8010c4c:	e008      	b.n	8010c60 <_vfiprintf_r+0x34>
 8010c4e:	4b74      	ldr	r3, [pc, #464]	; (8010e20 <_vfiprintf_r+0x1f4>)
 8010c50:	429d      	cmp	r5, r3
 8010c52:	d101      	bne.n	8010c58 <_vfiprintf_r+0x2c>
 8010c54:	68b5      	ldr	r5, [r6, #8]
 8010c56:	e003      	b.n	8010c60 <_vfiprintf_r+0x34>
 8010c58:	4b72      	ldr	r3, [pc, #456]	; (8010e24 <_vfiprintf_r+0x1f8>)
 8010c5a:	429d      	cmp	r5, r3
 8010c5c:	bf08      	it	eq
 8010c5e:	68f5      	ldreq	r5, [r6, #12]
 8010c60:	89ab      	ldrh	r3, [r5, #12]
 8010c62:	071c      	lsls	r4, r3, #28
 8010c64:	d50a      	bpl.n	8010c7c <_vfiprintf_r+0x50>
 8010c66:	692b      	ldr	r3, [r5, #16]
 8010c68:	b143      	cbz	r3, 8010c7c <_vfiprintf_r+0x50>
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c6e:	2320      	movs	r3, #32
 8010c70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c74:	2330      	movs	r3, #48	; 0x30
 8010c76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c7a:	e041      	b.n	8010d00 <_vfiprintf_r+0xd4>
 8010c7c:	4630      	mov	r0, r6
 8010c7e:	4629      	mov	r1, r5
 8010c80:	f000 f996 	bl	8010fb0 <__swsetup_r>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	d0f0      	beq.n	8010c6a <_vfiprintf_r+0x3e>
 8010c88:	f04f 30ff 	mov.w	r0, #4294967295
 8010c8c:	e0c2      	b.n	8010e14 <_vfiprintf_r+0x1e8>
 8010c8e:	9a03      	ldr	r2, [sp, #12]
 8010c90:	1d11      	adds	r1, r2, #4
 8010c92:	6812      	ldr	r2, [r2, #0]
 8010c94:	9103      	str	r1, [sp, #12]
 8010c96:	2a00      	cmp	r2, #0
 8010c98:	bfbb      	ittet	lt
 8010c9a:	4252      	neglt	r2, r2
 8010c9c:	f043 0302 	orrlt.w	r3, r3, #2
 8010ca0:	9207      	strge	r2, [sp, #28]
 8010ca2:	9207      	strlt	r2, [sp, #28]
 8010ca4:	bfb8      	it	lt
 8010ca6:	9304      	strlt	r3, [sp, #16]
 8010ca8:	3401      	adds	r4, #1
 8010caa:	7823      	ldrb	r3, [r4, #0]
 8010cac:	2b2e      	cmp	r3, #46	; 0x2e
 8010cae:	d07b      	beq.n	8010da8 <_vfiprintf_r+0x17c>
 8010cb0:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8010e34 <_vfiprintf_r+0x208>
 8010cb4:	7821      	ldrb	r1, [r4, #0]
 8010cb6:	4640      	mov	r0, r8
 8010cb8:	2203      	movs	r2, #3
 8010cba:	f7ff faad 	bl	8010218 <memchr>
 8010cbe:	b138      	cbz	r0, 8010cd0 <_vfiprintf_r+0xa4>
 8010cc0:	9a04      	ldr	r2, [sp, #16]
 8010cc2:	ebc8 0000 	rsb	r0, r8, r0
 8010cc6:	2340      	movs	r3, #64	; 0x40
 8010cc8:	4083      	lsls	r3, r0
 8010cca:	4313      	orrs	r3, r2
 8010ccc:	9304      	str	r3, [sp, #16]
 8010cce:	3401      	adds	r4, #1
 8010cd0:	7821      	ldrb	r1, [r4, #0]
 8010cd2:	4855      	ldr	r0, [pc, #340]	; (8010e28 <_vfiprintf_r+0x1fc>)
 8010cd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010cd8:	2206      	movs	r2, #6
 8010cda:	f104 0801 	add.w	r8, r4, #1
 8010cde:	f7ff fa9b 	bl	8010218 <memchr>
 8010ce2:	2800      	cmp	r0, #0
 8010ce4:	f000 8085 	beq.w	8010df2 <_vfiprintf_r+0x1c6>
 8010ce8:	4b50      	ldr	r3, [pc, #320]	; (8010e2c <_vfiprintf_r+0x200>)
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d178      	bne.n	8010de0 <_vfiprintf_r+0x1b4>
 8010cee:	9b03      	ldr	r3, [sp, #12]
 8010cf0:	3307      	adds	r3, #7
 8010cf2:	f023 0307 	bic.w	r3, r3, #7
 8010cf6:	3308      	adds	r3, #8
 8010cf8:	9303      	str	r3, [sp, #12]
 8010cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cfc:	443b      	add	r3, r7
 8010cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8010d00:	4643      	mov	r3, r8
 8010d02:	461c      	mov	r4, r3
 8010d04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d08:	b91a      	cbnz	r2, 8010d12 <_vfiprintf_r+0xe6>
 8010d0a:	ebb4 0908 	subs.w	r9, r4, r8
 8010d0e:	d00e      	beq.n	8010d2e <_vfiprintf_r+0x102>
 8010d10:	e002      	b.n	8010d18 <_vfiprintf_r+0xec>
 8010d12:	2a25      	cmp	r2, #37	; 0x25
 8010d14:	d1f5      	bne.n	8010d02 <_vfiprintf_r+0xd6>
 8010d16:	e7f8      	b.n	8010d0a <_vfiprintf_r+0xde>
 8010d18:	4630      	mov	r0, r6
 8010d1a:	4629      	mov	r1, r5
 8010d1c:	4642      	mov	r2, r8
 8010d1e:	464b      	mov	r3, r9
 8010d20:	f7ff ff72 	bl	8010c08 <__sfputs_r>
 8010d24:	3001      	adds	r0, #1
 8010d26:	d070      	beq.n	8010e0a <_vfiprintf_r+0x1de>
 8010d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d2a:	444b      	add	r3, r9
 8010d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8010d2e:	7823      	ldrb	r3, [r4, #0]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d06a      	beq.n	8010e0a <_vfiprintf_r+0x1de>
 8010d34:	2300      	movs	r3, #0
 8010d36:	f04f 32ff 	mov.w	r2, #4294967295
 8010d3a:	9304      	str	r3, [sp, #16]
 8010d3c:	9307      	str	r3, [sp, #28]
 8010d3e:	9205      	str	r2, [sp, #20]
 8010d40:	9306      	str	r3, [sp, #24]
 8010d42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d46:	931a      	str	r3, [sp, #104]	; 0x68
 8010d48:	f104 0801 	add.w	r8, r4, #1
 8010d4c:	4644      	mov	r4, r8
 8010d4e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8010e38 <_vfiprintf_r+0x20c>
 8010d52:	7821      	ldrb	r1, [r4, #0]
 8010d54:	4648      	mov	r0, r9
 8010d56:	2205      	movs	r2, #5
 8010d58:	f7ff fa5e 	bl	8010218 <memchr>
 8010d5c:	f108 0801 	add.w	r8, r8, #1
 8010d60:	9b04      	ldr	r3, [sp, #16]
 8010d62:	b130      	cbz	r0, 8010d72 <_vfiprintf_r+0x146>
 8010d64:	ebc9 0000 	rsb	r0, r9, r0
 8010d68:	2201      	movs	r2, #1
 8010d6a:	4082      	lsls	r2, r0
 8010d6c:	4313      	orrs	r3, r2
 8010d6e:	9304      	str	r3, [sp, #16]
 8010d70:	e7ec      	b.n	8010d4c <_vfiprintf_r+0x120>
 8010d72:	06d8      	lsls	r0, r3, #27
 8010d74:	bf44      	itt	mi
 8010d76:	2220      	movmi	r2, #32
 8010d78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010d7c:	0719      	lsls	r1, r3, #28
 8010d7e:	bf44      	itt	mi
 8010d80:	222b      	movmi	r2, #43	; 0x2b
 8010d82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010d86:	7822      	ldrb	r2, [r4, #0]
 8010d88:	2a2a      	cmp	r2, #42	; 0x2a
 8010d8a:	d080      	beq.n	8010c8e <_vfiprintf_r+0x62>
 8010d8c:	9907      	ldr	r1, [sp, #28]
 8010d8e:	4623      	mov	r3, r4
 8010d90:	461c      	mov	r4, r3
 8010d92:	3301      	adds	r3, #1
 8010d94:	7822      	ldrb	r2, [r4, #0]
 8010d96:	3a30      	subs	r2, #48	; 0x30
 8010d98:	2a09      	cmp	r2, #9
 8010d9a:	d803      	bhi.n	8010da4 <_vfiprintf_r+0x178>
 8010d9c:	200a      	movs	r0, #10
 8010d9e:	fb00 2101 	mla	r1, r0, r1, r2
 8010da2:	e7f5      	b.n	8010d90 <_vfiprintf_r+0x164>
 8010da4:	9107      	str	r1, [sp, #28]
 8010da6:	e780      	b.n	8010caa <_vfiprintf_r+0x7e>
 8010da8:	7863      	ldrb	r3, [r4, #1]
 8010daa:	2b2a      	cmp	r3, #42	; 0x2a
 8010dac:	d10a      	bne.n	8010dc4 <_vfiprintf_r+0x198>
 8010dae:	9b03      	ldr	r3, [sp, #12]
 8010db0:	1d1a      	adds	r2, r3, #4
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	9203      	str	r2, [sp, #12]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	bfb8      	it	lt
 8010dba:	f04f 33ff 	movlt.w	r3, #4294967295
 8010dbe:	3402      	adds	r4, #2
 8010dc0:	9305      	str	r3, [sp, #20]
 8010dc2:	e775      	b.n	8010cb0 <_vfiprintf_r+0x84>
 8010dc4:	1c61      	adds	r1, r4, #1
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	460c      	mov	r4, r1
 8010dca:	3101      	adds	r1, #1
 8010dcc:	7823      	ldrb	r3, [r4, #0]
 8010dce:	3b30      	subs	r3, #48	; 0x30
 8010dd0:	2b09      	cmp	r3, #9
 8010dd2:	d803      	bhi.n	8010ddc <_vfiprintf_r+0x1b0>
 8010dd4:	200a      	movs	r0, #10
 8010dd6:	fb00 3202 	mla	r2, r0, r2, r3
 8010dda:	e7f5      	b.n	8010dc8 <_vfiprintf_r+0x19c>
 8010ddc:	9205      	str	r2, [sp, #20]
 8010dde:	e767      	b.n	8010cb0 <_vfiprintf_r+0x84>
 8010de0:	ab03      	add	r3, sp, #12
 8010de2:	9300      	str	r3, [sp, #0]
 8010de4:	4630      	mov	r0, r6
 8010de6:	a904      	add	r1, sp, #16
 8010de8:	462a      	mov	r2, r5
 8010dea:	4b11      	ldr	r3, [pc, #68]	; (8010e30 <_vfiprintf_r+0x204>)
 8010dec:	f7fd fe9a 	bl	800eb24 <_printf_float>
 8010df0:	e007      	b.n	8010e02 <_vfiprintf_r+0x1d6>
 8010df2:	ab03      	add	r3, sp, #12
 8010df4:	9300      	str	r3, [sp, #0]
 8010df6:	4630      	mov	r0, r6
 8010df8:	a904      	add	r1, sp, #16
 8010dfa:	462a      	mov	r2, r5
 8010dfc:	4b0c      	ldr	r3, [pc, #48]	; (8010e30 <_vfiprintf_r+0x204>)
 8010dfe:	f7fe f94b 	bl	800f098 <_printf_i>
 8010e02:	1c42      	adds	r2, r0, #1
 8010e04:	4607      	mov	r7, r0
 8010e06:	f47f af78 	bne.w	8010cfa <_vfiprintf_r+0xce>
 8010e0a:	89ab      	ldrh	r3, [r5, #12]
 8010e0c:	065b      	lsls	r3, r3, #25
 8010e0e:	f53f af3b 	bmi.w	8010c88 <_vfiprintf_r+0x5c>
 8010e12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e14:	b01d      	add	sp, #116	; 0x74
 8010e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e1a:	bf00      	nop
 8010e1c:	08011734 	.word	0x08011734
 8010e20:	08011754 	.word	0x08011754
 8010e24:	08011774 	.word	0x08011774
 8010e28:	080118a6 	.word	0x080118a6
 8010e2c:	0800eb25 	.word	0x0800eb25
 8010e30:	08010c09 	.word	0x08010c09
 8010e34:	080118a2 	.word	0x080118a2
 8010e38:	0801189c 	.word	0x0801189c

08010e3c <_sbrk_r>:
 8010e3c:	b538      	push	{r3, r4, r5, lr}
 8010e3e:	4c06      	ldr	r4, [pc, #24]	; (8010e58 <_sbrk_r+0x1c>)
 8010e40:	2300      	movs	r3, #0
 8010e42:	4605      	mov	r5, r0
 8010e44:	4608      	mov	r0, r1
 8010e46:	6023      	str	r3, [r4, #0]
 8010e48:	f7f1 feb8 	bl	8002bbc <_sbrk>
 8010e4c:	1c43      	adds	r3, r0, #1
 8010e4e:	d102      	bne.n	8010e56 <_sbrk_r+0x1a>
 8010e50:	6823      	ldr	r3, [r4, #0]
 8010e52:	b103      	cbz	r3, 8010e56 <_sbrk_r+0x1a>
 8010e54:	602b      	str	r3, [r5, #0]
 8010e56:	bd38      	pop	{r3, r4, r5, pc}
 8010e58:	1ffeff74 	.word	0x1ffeff74

08010e5c <__sread>:
 8010e5c:	b510      	push	{r4, lr}
 8010e5e:	460c      	mov	r4, r1
 8010e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e64:	f000 fa54 	bl	8011310 <_read_r>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	bfab      	itete	ge
 8010e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8010e70:	181b      	addge	r3, r3, r0
 8010e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e76:	bfac      	ite	ge
 8010e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e7a:	81a3      	strhlt	r3, [r4, #12]
 8010e7c:	bd10      	pop	{r4, pc}

08010e7e <__swrite>:
 8010e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e82:	461d      	mov	r5, r3
 8010e84:	898b      	ldrh	r3, [r1, #12]
 8010e86:	05db      	lsls	r3, r3, #23
 8010e88:	4607      	mov	r7, r0
 8010e8a:	460c      	mov	r4, r1
 8010e8c:	4616      	mov	r6, r2
 8010e8e:	d505      	bpl.n	8010e9c <__swrite+0x1e>
 8010e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e94:	2200      	movs	r2, #0
 8010e96:	2302      	movs	r3, #2
 8010e98:	f000 f9b4 	bl	8011204 <_lseek_r>
 8010e9c:	89a3      	ldrh	r3, [r4, #12]
 8010e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ea6:	81a3      	strh	r3, [r4, #12]
 8010ea8:	4638      	mov	r0, r7
 8010eaa:	4632      	mov	r2, r6
 8010eac:	462b      	mov	r3, r5
 8010eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb2:	f000 b86b 	b.w	8010f8c <_write_r>

08010eb6 <__sseek>:
 8010eb6:	b510      	push	{r4, lr}
 8010eb8:	460c      	mov	r4, r1
 8010eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ebe:	f000 f9a1 	bl	8011204 <_lseek_r>
 8010ec2:	1c43      	adds	r3, r0, #1
 8010ec4:	89a3      	ldrh	r3, [r4, #12]
 8010ec6:	bf15      	itete	ne
 8010ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8010eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ed2:	81a3      	strheq	r3, [r4, #12]
 8010ed4:	bf18      	it	ne
 8010ed6:	81a3      	strhne	r3, [r4, #12]
 8010ed8:	bd10      	pop	{r4, pc}

08010eda <__sclose>:
 8010eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ede:	f000 b8d3 	b.w	8011088 <_close_r>
	...

08010ee4 <__swbuf_r>:
 8010ee4:	b570      	push	{r4, r5, r6, lr}
 8010ee6:	460d      	mov	r5, r1
 8010ee8:	4614      	mov	r4, r2
 8010eea:	4606      	mov	r6, r0
 8010eec:	b118      	cbz	r0, 8010ef6 <__swbuf_r+0x12>
 8010eee:	6983      	ldr	r3, [r0, #24]
 8010ef0:	b90b      	cbnz	r3, 8010ef6 <__swbuf_r+0x12>
 8010ef2:	f7ff f8fd 	bl	80100f0 <__sinit>
 8010ef6:	4b22      	ldr	r3, [pc, #136]	; (8010f80 <__swbuf_r+0x9c>)
 8010ef8:	429c      	cmp	r4, r3
 8010efa:	d101      	bne.n	8010f00 <__swbuf_r+0x1c>
 8010efc:	6874      	ldr	r4, [r6, #4]
 8010efe:	e008      	b.n	8010f12 <__swbuf_r+0x2e>
 8010f00:	4b20      	ldr	r3, [pc, #128]	; (8010f84 <__swbuf_r+0xa0>)
 8010f02:	429c      	cmp	r4, r3
 8010f04:	d101      	bne.n	8010f0a <__swbuf_r+0x26>
 8010f06:	68b4      	ldr	r4, [r6, #8]
 8010f08:	e003      	b.n	8010f12 <__swbuf_r+0x2e>
 8010f0a:	4b1f      	ldr	r3, [pc, #124]	; (8010f88 <__swbuf_r+0xa4>)
 8010f0c:	429c      	cmp	r4, r3
 8010f0e:	bf08      	it	eq
 8010f10:	68f4      	ldreq	r4, [r6, #12]
 8010f12:	69a3      	ldr	r3, [r4, #24]
 8010f14:	60a3      	str	r3, [r4, #8]
 8010f16:	89a3      	ldrh	r3, [r4, #12]
 8010f18:	071a      	lsls	r2, r3, #28
 8010f1a:	d509      	bpl.n	8010f30 <__swbuf_r+0x4c>
 8010f1c:	6923      	ldr	r3, [r4, #16]
 8010f1e:	b13b      	cbz	r3, 8010f30 <__swbuf_r+0x4c>
 8010f20:	6823      	ldr	r3, [r4, #0]
 8010f22:	6920      	ldr	r0, [r4, #16]
 8010f24:	1a18      	subs	r0, r3, r0
 8010f26:	6963      	ldr	r3, [r4, #20]
 8010f28:	4298      	cmp	r0, r3
 8010f2a:	b2ed      	uxtb	r5, r5
 8010f2c:	db0f      	blt.n	8010f4e <__swbuf_r+0x6a>
 8010f2e:	e008      	b.n	8010f42 <__swbuf_r+0x5e>
 8010f30:	4630      	mov	r0, r6
 8010f32:	4621      	mov	r1, r4
 8010f34:	f000 f83c 	bl	8010fb0 <__swsetup_r>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	d0f1      	beq.n	8010f20 <__swbuf_r+0x3c>
 8010f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f40:	bd70      	pop	{r4, r5, r6, pc}
 8010f42:	4630      	mov	r0, r6
 8010f44:	4621      	mov	r1, r4
 8010f46:	f000 f933 	bl	80111b0 <_fflush_r>
 8010f4a:	2800      	cmp	r0, #0
 8010f4c:	d1f6      	bne.n	8010f3c <__swbuf_r+0x58>
 8010f4e:	68a3      	ldr	r3, [r4, #8]
 8010f50:	3b01      	subs	r3, #1
 8010f52:	60a3      	str	r3, [r4, #8]
 8010f54:	6823      	ldr	r3, [r4, #0]
 8010f56:	1c5a      	adds	r2, r3, #1
 8010f58:	6022      	str	r2, [r4, #0]
 8010f5a:	701d      	strb	r5, [r3, #0]
 8010f5c:	6963      	ldr	r3, [r4, #20]
 8010f5e:	3001      	adds	r0, #1
 8010f60:	4298      	cmp	r0, r3
 8010f62:	d004      	beq.n	8010f6e <__swbuf_r+0x8a>
 8010f64:	89a3      	ldrh	r3, [r4, #12]
 8010f66:	07db      	lsls	r3, r3, #31
 8010f68:	d507      	bpl.n	8010f7a <__swbuf_r+0x96>
 8010f6a:	2d0a      	cmp	r5, #10
 8010f6c:	d105      	bne.n	8010f7a <__swbuf_r+0x96>
 8010f6e:	4630      	mov	r0, r6
 8010f70:	4621      	mov	r1, r4
 8010f72:	f000 f91d 	bl	80111b0 <_fflush_r>
 8010f76:	2800      	cmp	r0, #0
 8010f78:	d1e0      	bne.n	8010f3c <__swbuf_r+0x58>
 8010f7a:	4628      	mov	r0, r5
 8010f7c:	bd70      	pop	{r4, r5, r6, pc}
 8010f7e:	bf00      	nop
 8010f80:	08011734 	.word	0x08011734
 8010f84:	08011754 	.word	0x08011754
 8010f88:	08011774 	.word	0x08011774

08010f8c <_write_r>:
 8010f8c:	b538      	push	{r3, r4, r5, lr}
 8010f8e:	4c07      	ldr	r4, [pc, #28]	; (8010fac <_write_r+0x20>)
 8010f90:	4605      	mov	r5, r0
 8010f92:	2000      	movs	r0, #0
 8010f94:	6020      	str	r0, [r4, #0]
 8010f96:	4608      	mov	r0, r1
 8010f98:	4611      	mov	r1, r2
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	f000 fa46 	bl	801142c <_write>
 8010fa0:	1c43      	adds	r3, r0, #1
 8010fa2:	d102      	bne.n	8010faa <_write_r+0x1e>
 8010fa4:	6823      	ldr	r3, [r4, #0]
 8010fa6:	b103      	cbz	r3, 8010faa <_write_r+0x1e>
 8010fa8:	602b      	str	r3, [r5, #0]
 8010faa:	bd38      	pop	{r3, r4, r5, pc}
 8010fac:	1ffeff74 	.word	0x1ffeff74

08010fb0 <__swsetup_r>:
 8010fb0:	4b31      	ldr	r3, [pc, #196]	; (8011078 <__swsetup_r+0xc8>)
 8010fb2:	b570      	push	{r4, r5, r6, lr}
 8010fb4:	681d      	ldr	r5, [r3, #0]
 8010fb6:	4606      	mov	r6, r0
 8010fb8:	460c      	mov	r4, r1
 8010fba:	b125      	cbz	r5, 8010fc6 <__swsetup_r+0x16>
 8010fbc:	69ab      	ldr	r3, [r5, #24]
 8010fbe:	b913      	cbnz	r3, 8010fc6 <__swsetup_r+0x16>
 8010fc0:	4628      	mov	r0, r5
 8010fc2:	f7ff f895 	bl	80100f0 <__sinit>
 8010fc6:	4b2d      	ldr	r3, [pc, #180]	; (801107c <__swsetup_r+0xcc>)
 8010fc8:	429c      	cmp	r4, r3
 8010fca:	d101      	bne.n	8010fd0 <__swsetup_r+0x20>
 8010fcc:	686c      	ldr	r4, [r5, #4]
 8010fce:	e008      	b.n	8010fe2 <__swsetup_r+0x32>
 8010fd0:	4b2b      	ldr	r3, [pc, #172]	; (8011080 <__swsetup_r+0xd0>)
 8010fd2:	429c      	cmp	r4, r3
 8010fd4:	d101      	bne.n	8010fda <__swsetup_r+0x2a>
 8010fd6:	68ac      	ldr	r4, [r5, #8]
 8010fd8:	e003      	b.n	8010fe2 <__swsetup_r+0x32>
 8010fda:	4b2a      	ldr	r3, [pc, #168]	; (8011084 <__swsetup_r+0xd4>)
 8010fdc:	429c      	cmp	r4, r3
 8010fde:	bf08      	it	eq
 8010fe0:	68ec      	ldreq	r4, [r5, #12]
 8010fe2:	89a3      	ldrh	r3, [r4, #12]
 8010fe4:	b29a      	uxth	r2, r3
 8010fe6:	0711      	lsls	r1, r2, #28
 8010fe8:	d41d      	bmi.n	8011026 <__swsetup_r+0x76>
 8010fea:	06d5      	lsls	r5, r2, #27
 8010fec:	d402      	bmi.n	8010ff4 <__swsetup_r+0x44>
 8010fee:	2209      	movs	r2, #9
 8010ff0:	6032      	str	r2, [r6, #0]
 8010ff2:	e038      	b.n	8011066 <__swsetup_r+0xb6>
 8010ff4:	0750      	lsls	r0, r2, #29
 8010ff6:	d512      	bpl.n	801101e <__swsetup_r+0x6e>
 8010ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ffa:	b141      	cbz	r1, 801100e <__swsetup_r+0x5e>
 8010ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011000:	4299      	cmp	r1, r3
 8011002:	d002      	beq.n	801100a <__swsetup_r+0x5a>
 8011004:	4630      	mov	r0, r6
 8011006:	f7ff fc03 	bl	8010810 <_free_r>
 801100a:	2300      	movs	r3, #0
 801100c:	6363      	str	r3, [r4, #52]	; 0x34
 801100e:	89a3      	ldrh	r3, [r4, #12]
 8011010:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011014:	81a3      	strh	r3, [r4, #12]
 8011016:	2300      	movs	r3, #0
 8011018:	6063      	str	r3, [r4, #4]
 801101a:	6923      	ldr	r3, [r4, #16]
 801101c:	6023      	str	r3, [r4, #0]
 801101e:	89a3      	ldrh	r3, [r4, #12]
 8011020:	f043 0308 	orr.w	r3, r3, #8
 8011024:	81a3      	strh	r3, [r4, #12]
 8011026:	6923      	ldr	r3, [r4, #16]
 8011028:	b94b      	cbnz	r3, 801103e <__swsetup_r+0x8e>
 801102a:	89a3      	ldrh	r3, [r4, #12]
 801102c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011034:	d003      	beq.n	801103e <__swsetup_r+0x8e>
 8011036:	4630      	mov	r0, r6
 8011038:	4621      	mov	r1, r4
 801103a:	f000 f8f5 	bl	8011228 <__smakebuf_r>
 801103e:	89a3      	ldrh	r3, [r4, #12]
 8011040:	f013 0201 	ands.w	r2, r3, #1
 8011044:	d005      	beq.n	8011052 <__swsetup_r+0xa2>
 8011046:	2200      	movs	r2, #0
 8011048:	60a2      	str	r2, [r4, #8]
 801104a:	6962      	ldr	r2, [r4, #20]
 801104c:	4252      	negs	r2, r2
 801104e:	61a2      	str	r2, [r4, #24]
 8011050:	e003      	b.n	801105a <__swsetup_r+0xaa>
 8011052:	0799      	lsls	r1, r3, #30
 8011054:	bf58      	it	pl
 8011056:	6962      	ldrpl	r2, [r4, #20]
 8011058:	60a2      	str	r2, [r4, #8]
 801105a:	6922      	ldr	r2, [r4, #16]
 801105c:	b94a      	cbnz	r2, 8011072 <__swsetup_r+0xc2>
 801105e:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8011062:	b280      	uxth	r0, r0
 8011064:	b130      	cbz	r0, 8011074 <__swsetup_r+0xc4>
 8011066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801106a:	81a3      	strh	r3, [r4, #12]
 801106c:	f04f 30ff 	mov.w	r0, #4294967295
 8011070:	bd70      	pop	{r4, r5, r6, pc}
 8011072:	2000      	movs	r0, #0
 8011074:	bd70      	pop	{r4, r5, r6, pc}
 8011076:	bf00      	nop
 8011078:	1ffe8970 	.word	0x1ffe8970
 801107c:	08011734 	.word	0x08011734
 8011080:	08011754 	.word	0x08011754
 8011084:	08011774 	.word	0x08011774

08011088 <_close_r>:
 8011088:	b538      	push	{r3, r4, r5, lr}
 801108a:	4c06      	ldr	r4, [pc, #24]	; (80110a4 <_close_r+0x1c>)
 801108c:	2300      	movs	r3, #0
 801108e:	4605      	mov	r5, r0
 8011090:	4608      	mov	r0, r1
 8011092:	6023      	str	r3, [r4, #0]
 8011094:	f000 f9a2 	bl	80113dc <_close>
 8011098:	1c43      	adds	r3, r0, #1
 801109a:	d102      	bne.n	80110a2 <_close_r+0x1a>
 801109c:	6823      	ldr	r3, [r4, #0]
 801109e:	b103      	cbz	r3, 80110a2 <_close_r+0x1a>
 80110a0:	602b      	str	r3, [r5, #0]
 80110a2:	bd38      	pop	{r3, r4, r5, pc}
 80110a4:	1ffeff74 	.word	0x1ffeff74

080110a8 <__sflush_r>:
 80110a8:	898a      	ldrh	r2, [r1, #12]
 80110aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110ae:	4605      	mov	r5, r0
 80110b0:	0710      	lsls	r0, r2, #28
 80110b2:	460c      	mov	r4, r1
 80110b4:	d457      	bmi.n	8011166 <__sflush_r+0xbe>
 80110b6:	684b      	ldr	r3, [r1, #4]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	dc02      	bgt.n	80110c2 <__sflush_r+0x1a>
 80110bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80110be:	2b00      	cmp	r3, #0
 80110c0:	dd18      	ble.n	80110f4 <__sflush_r+0x4c>
 80110c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80110c4:	b1b6      	cbz	r6, 80110f4 <__sflush_r+0x4c>
 80110c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80110ca:	2300      	movs	r3, #0
 80110cc:	b292      	uxth	r2, r2
 80110ce:	682f      	ldr	r7, [r5, #0]
 80110d0:	602b      	str	r3, [r5, #0]
 80110d2:	b10a      	cbz	r2, 80110d8 <__sflush_r+0x30>
 80110d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80110d6:	e010      	b.n	80110fa <__sflush_r+0x52>
 80110d8:	6a21      	ldr	r1, [r4, #32]
 80110da:	4628      	mov	r0, r5
 80110dc:	2301      	movs	r3, #1
 80110de:	47b0      	blx	r6
 80110e0:	1c41      	adds	r1, r0, #1
 80110e2:	4602      	mov	r2, r0
 80110e4:	d109      	bne.n	80110fa <__sflush_r+0x52>
 80110e6:	682b      	ldr	r3, [r5, #0]
 80110e8:	b13b      	cbz	r3, 80110fa <__sflush_r+0x52>
 80110ea:	2b1d      	cmp	r3, #29
 80110ec:	d001      	beq.n	80110f2 <__sflush_r+0x4a>
 80110ee:	2b16      	cmp	r3, #22
 80110f0:	d147      	bne.n	8011182 <__sflush_r+0xda>
 80110f2:	602f      	str	r7, [r5, #0]
 80110f4:	2000      	movs	r0, #0
 80110f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110fa:	89a3      	ldrh	r3, [r4, #12]
 80110fc:	075b      	lsls	r3, r3, #29
 80110fe:	d505      	bpl.n	801110c <__sflush_r+0x64>
 8011100:	6863      	ldr	r3, [r4, #4]
 8011102:	1ad2      	subs	r2, r2, r3
 8011104:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011106:	b10b      	cbz	r3, 801110c <__sflush_r+0x64>
 8011108:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801110a:	1ad2      	subs	r2, r2, r3
 801110c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801110e:	6a21      	ldr	r1, [r4, #32]
 8011110:	2300      	movs	r3, #0
 8011112:	4628      	mov	r0, r5
 8011114:	47b0      	blx	r6
 8011116:	1c46      	adds	r6, r0, #1
 8011118:	89a3      	ldrh	r3, [r4, #12]
 801111a:	d105      	bne.n	8011128 <__sflush_r+0x80>
 801111c:	682a      	ldr	r2, [r5, #0]
 801111e:	b11a      	cbz	r2, 8011128 <__sflush_r+0x80>
 8011120:	2a1d      	cmp	r2, #29
 8011122:	d001      	beq.n	8011128 <__sflush_r+0x80>
 8011124:	2a16      	cmp	r2, #22
 8011126:	d119      	bne.n	801115c <__sflush_r+0xb4>
 8011128:	2200      	movs	r2, #0
 801112a:	6062      	str	r2, [r4, #4]
 801112c:	04d9      	lsls	r1, r3, #19
 801112e:	6922      	ldr	r2, [r4, #16]
 8011130:	6022      	str	r2, [r4, #0]
 8011132:	d504      	bpl.n	801113e <__sflush_r+0x96>
 8011134:	1c42      	adds	r2, r0, #1
 8011136:	d101      	bne.n	801113c <__sflush_r+0x94>
 8011138:	682b      	ldr	r3, [r5, #0]
 801113a:	b903      	cbnz	r3, 801113e <__sflush_r+0x96>
 801113c:	6560      	str	r0, [r4, #84]	; 0x54
 801113e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011140:	602f      	str	r7, [r5, #0]
 8011142:	2900      	cmp	r1, #0
 8011144:	d0d6      	beq.n	80110f4 <__sflush_r+0x4c>
 8011146:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801114a:	4299      	cmp	r1, r3
 801114c:	d002      	beq.n	8011154 <__sflush_r+0xac>
 801114e:	4628      	mov	r0, r5
 8011150:	f7ff fb5e 	bl	8010810 <_free_r>
 8011154:	2000      	movs	r0, #0
 8011156:	6360      	str	r0, [r4, #52]	; 0x34
 8011158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801115c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011160:	81a3      	strh	r3, [r4, #12]
 8011162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011166:	690f      	ldr	r7, [r1, #16]
 8011168:	2f00      	cmp	r7, #0
 801116a:	d0c3      	beq.n	80110f4 <__sflush_r+0x4c>
 801116c:	0793      	lsls	r3, r2, #30
 801116e:	680e      	ldr	r6, [r1, #0]
 8011170:	bf08      	it	eq
 8011172:	694b      	ldreq	r3, [r1, #20]
 8011174:	600f      	str	r7, [r1, #0]
 8011176:	bf18      	it	ne
 8011178:	2300      	movne	r3, #0
 801117a:	ebc7 0806 	rsb	r8, r7, r6
 801117e:	608b      	str	r3, [r1, #8]
 8011180:	e012      	b.n	80111a8 <__sflush_r+0x100>
 8011182:	89a3      	ldrh	r3, [r4, #12]
 8011184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011188:	81a3      	strh	r3, [r4, #12]
 801118a:	f04f 30ff 	mov.w	r0, #4294967295
 801118e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011192:	4628      	mov	r0, r5
 8011194:	6a21      	ldr	r1, [r4, #32]
 8011196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011198:	463a      	mov	r2, r7
 801119a:	4643      	mov	r3, r8
 801119c:	47b0      	blx	r6
 801119e:	2800      	cmp	r0, #0
 80111a0:	ddef      	ble.n	8011182 <__sflush_r+0xda>
 80111a2:	4407      	add	r7, r0
 80111a4:	ebc0 0808 	rsb	r8, r0, r8
 80111a8:	f1b8 0f00 	cmp.w	r8, #0
 80111ac:	dcf1      	bgt.n	8011192 <__sflush_r+0xea>
 80111ae:	e7a1      	b.n	80110f4 <__sflush_r+0x4c>

080111b0 <_fflush_r>:
 80111b0:	b538      	push	{r3, r4, r5, lr}
 80111b2:	690b      	ldr	r3, [r1, #16]
 80111b4:	4605      	mov	r5, r0
 80111b6:	460c      	mov	r4, r1
 80111b8:	b1db      	cbz	r3, 80111f2 <_fflush_r+0x42>
 80111ba:	b118      	cbz	r0, 80111c4 <_fflush_r+0x14>
 80111bc:	6983      	ldr	r3, [r0, #24]
 80111be:	b90b      	cbnz	r3, 80111c4 <_fflush_r+0x14>
 80111c0:	f7fe ff96 	bl	80100f0 <__sinit>
 80111c4:	4b0c      	ldr	r3, [pc, #48]	; (80111f8 <_fflush_r+0x48>)
 80111c6:	429c      	cmp	r4, r3
 80111c8:	d101      	bne.n	80111ce <_fflush_r+0x1e>
 80111ca:	686c      	ldr	r4, [r5, #4]
 80111cc:	e008      	b.n	80111e0 <_fflush_r+0x30>
 80111ce:	4b0b      	ldr	r3, [pc, #44]	; (80111fc <_fflush_r+0x4c>)
 80111d0:	429c      	cmp	r4, r3
 80111d2:	d101      	bne.n	80111d8 <_fflush_r+0x28>
 80111d4:	68ac      	ldr	r4, [r5, #8]
 80111d6:	e003      	b.n	80111e0 <_fflush_r+0x30>
 80111d8:	4b09      	ldr	r3, [pc, #36]	; (8011200 <_fflush_r+0x50>)
 80111da:	429c      	cmp	r4, r3
 80111dc:	bf08      	it	eq
 80111de:	68ec      	ldreq	r4, [r5, #12]
 80111e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111e4:	b12b      	cbz	r3, 80111f2 <_fflush_r+0x42>
 80111e6:	4628      	mov	r0, r5
 80111e8:	4621      	mov	r1, r4
 80111ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111ee:	f7ff bf5b 	b.w	80110a8 <__sflush_r>
 80111f2:	2000      	movs	r0, #0
 80111f4:	bd38      	pop	{r3, r4, r5, pc}
 80111f6:	bf00      	nop
 80111f8:	08011734 	.word	0x08011734
 80111fc:	08011754 	.word	0x08011754
 8011200:	08011774 	.word	0x08011774

08011204 <_lseek_r>:
 8011204:	b538      	push	{r3, r4, r5, lr}
 8011206:	4c07      	ldr	r4, [pc, #28]	; (8011224 <_lseek_r+0x20>)
 8011208:	4605      	mov	r5, r0
 801120a:	2000      	movs	r0, #0
 801120c:	6020      	str	r0, [r4, #0]
 801120e:	4608      	mov	r0, r1
 8011210:	4611      	mov	r1, r2
 8011212:	461a      	mov	r2, r3
 8011214:	f000 f8fa 	bl	801140c <_lseek>
 8011218:	1c43      	adds	r3, r0, #1
 801121a:	d102      	bne.n	8011222 <_lseek_r+0x1e>
 801121c:	6823      	ldr	r3, [r4, #0]
 801121e:	b103      	cbz	r3, 8011222 <_lseek_r+0x1e>
 8011220:	602b      	str	r3, [r5, #0]
 8011222:	bd38      	pop	{r3, r4, r5, pc}
 8011224:	1ffeff74 	.word	0x1ffeff74

08011228 <__smakebuf_r>:
 8011228:	b5f0      	push	{r4, r5, r6, r7, lr}
 801122a:	898b      	ldrh	r3, [r1, #12]
 801122c:	079d      	lsls	r5, r3, #30
 801122e:	b091      	sub	sp, #68	; 0x44
 8011230:	4606      	mov	r6, r0
 8011232:	460c      	mov	r4, r1
 8011234:	d426      	bmi.n	8011284 <__smakebuf_r+0x5c>
 8011236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801123a:	2900      	cmp	r1, #0
 801123c:	da09      	bge.n	8011252 <__smakebuf_r+0x2a>
 801123e:	89a3      	ldrh	r3, [r4, #12]
 8011240:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011244:	f04f 0500 	mov.w	r5, #0
 8011248:	bf14      	ite	ne
 801124a:	2740      	movne	r7, #64	; 0x40
 801124c:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8011250:	e00d      	b.n	801126e <__smakebuf_r+0x46>
 8011252:	aa01      	add	r2, sp, #4
 8011254:	f000 f86e 	bl	8011334 <_fstat_r>
 8011258:	2800      	cmp	r0, #0
 801125a:	dbf0      	blt.n	801123e <__smakebuf_r+0x16>
 801125c:	9d02      	ldr	r5, [sp, #8]
 801125e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8011262:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 8011266:	424d      	negs	r5, r1
 8011268:	414d      	adcs	r5, r1
 801126a:	f44f 6780 	mov.w	r7, #1024	; 0x400
 801126e:	4630      	mov	r0, r6
 8011270:	4639      	mov	r1, r7
 8011272:	f7ff fb11 	bl	8010898 <_malloc_r>
 8011276:	b960      	cbnz	r0, 8011292 <__smakebuf_r+0x6a>
 8011278:	89a3      	ldrh	r3, [r4, #12]
 801127a:	059a      	lsls	r2, r3, #22
 801127c:	d41d      	bmi.n	80112ba <__smakebuf_r+0x92>
 801127e:	f043 0302 	orr.w	r3, r3, #2
 8011282:	81a3      	strh	r3, [r4, #12]
 8011284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011288:	6023      	str	r3, [r4, #0]
 801128a:	6123      	str	r3, [r4, #16]
 801128c:	2301      	movs	r3, #1
 801128e:	6163      	str	r3, [r4, #20]
 8011290:	e013      	b.n	80112ba <__smakebuf_r+0x92>
 8011292:	4b0b      	ldr	r3, [pc, #44]	; (80112c0 <__smakebuf_r+0x98>)
 8011294:	62b3      	str	r3, [r6, #40]	; 0x28
 8011296:	89a3      	ldrh	r3, [r4, #12]
 8011298:	6020      	str	r0, [r4, #0]
 801129a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801129e:	81a3      	strh	r3, [r4, #12]
 80112a0:	6120      	str	r0, [r4, #16]
 80112a2:	6167      	str	r7, [r4, #20]
 80112a4:	b14d      	cbz	r5, 80112ba <__smakebuf_r+0x92>
 80112a6:	4630      	mov	r0, r6
 80112a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112ac:	f000 f854 	bl	8011358 <_isatty_r>
 80112b0:	b118      	cbz	r0, 80112ba <__smakebuf_r+0x92>
 80112b2:	89a3      	ldrh	r3, [r4, #12]
 80112b4:	f043 0301 	orr.w	r3, r3, #1
 80112b8:	81a3      	strh	r3, [r4, #12]
 80112ba:	b011      	add	sp, #68	; 0x44
 80112bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112be:	bf00      	nop
 80112c0:	08010071 	.word	0x08010071

080112c4 <_realloc_r>:
 80112c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112c6:	4607      	mov	r7, r0
 80112c8:	4615      	mov	r5, r2
 80112ca:	460e      	mov	r6, r1
 80112cc:	b921      	cbnz	r1, 80112d8 <_realloc_r+0x14>
 80112ce:	4611      	mov	r1, r2
 80112d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80112d4:	f7ff bae0 	b.w	8010898 <_malloc_r>
 80112d8:	b91a      	cbnz	r2, 80112e2 <_realloc_r+0x1e>
 80112da:	f7ff fa99 	bl	8010810 <_free_r>
 80112de:	4628      	mov	r0, r5
 80112e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112e2:	f000 f849 	bl	8011378 <_malloc_usable_size_r>
 80112e6:	42a8      	cmp	r0, r5
 80112e8:	d20e      	bcs.n	8011308 <_realloc_r+0x44>
 80112ea:	4638      	mov	r0, r7
 80112ec:	4629      	mov	r1, r5
 80112ee:	f7ff fad3 	bl	8010898 <_malloc_r>
 80112f2:	4604      	mov	r4, r0
 80112f4:	b150      	cbz	r0, 801130c <_realloc_r+0x48>
 80112f6:	4631      	mov	r1, r6
 80112f8:	462a      	mov	r2, r5
 80112fa:	f7f3 ff79 	bl	80051f0 <memcpy>
 80112fe:	4638      	mov	r0, r7
 8011300:	4631      	mov	r1, r6
 8011302:	f7ff fa85 	bl	8010810 <_free_r>
 8011306:	e001      	b.n	801130c <_realloc_r+0x48>
 8011308:	4630      	mov	r0, r6
 801130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801130c:	4620      	mov	r0, r4
 801130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011310 <_read_r>:
 8011310:	b538      	push	{r3, r4, r5, lr}
 8011312:	4c07      	ldr	r4, [pc, #28]	; (8011330 <_read_r+0x20>)
 8011314:	4605      	mov	r5, r0
 8011316:	2000      	movs	r0, #0
 8011318:	6020      	str	r0, [r4, #0]
 801131a:	4608      	mov	r0, r1
 801131c:	4611      	mov	r1, r2
 801131e:	461a      	mov	r2, r3
 8011320:	f000 f87c 	bl	801141c <_read>
 8011324:	1c43      	adds	r3, r0, #1
 8011326:	d102      	bne.n	801132e <_read_r+0x1e>
 8011328:	6823      	ldr	r3, [r4, #0]
 801132a:	b103      	cbz	r3, 801132e <_read_r+0x1e>
 801132c:	602b      	str	r3, [r5, #0]
 801132e:	bd38      	pop	{r3, r4, r5, pc}
 8011330:	1ffeff74 	.word	0x1ffeff74

08011334 <_fstat_r>:
 8011334:	b538      	push	{r3, r4, r5, lr}
 8011336:	4c07      	ldr	r4, [pc, #28]	; (8011354 <_fstat_r+0x20>)
 8011338:	2300      	movs	r3, #0
 801133a:	4605      	mov	r5, r0
 801133c:	4608      	mov	r0, r1
 801133e:	4611      	mov	r1, r2
 8011340:	6023      	str	r3, [r4, #0]
 8011342:	f000 f853 	bl	80113ec <_fstat>
 8011346:	1c43      	adds	r3, r0, #1
 8011348:	d102      	bne.n	8011350 <_fstat_r+0x1c>
 801134a:	6823      	ldr	r3, [r4, #0]
 801134c:	b103      	cbz	r3, 8011350 <_fstat_r+0x1c>
 801134e:	602b      	str	r3, [r5, #0]
 8011350:	bd38      	pop	{r3, r4, r5, pc}
 8011352:	bf00      	nop
 8011354:	1ffeff74 	.word	0x1ffeff74

08011358 <_isatty_r>:
 8011358:	b538      	push	{r3, r4, r5, lr}
 801135a:	4c06      	ldr	r4, [pc, #24]	; (8011374 <_isatty_r+0x1c>)
 801135c:	2300      	movs	r3, #0
 801135e:	4605      	mov	r5, r0
 8011360:	4608      	mov	r0, r1
 8011362:	6023      	str	r3, [r4, #0]
 8011364:	f000 f84a 	bl	80113fc <_isatty>
 8011368:	1c43      	adds	r3, r0, #1
 801136a:	d102      	bne.n	8011372 <_isatty_r+0x1a>
 801136c:	6823      	ldr	r3, [r4, #0]
 801136e:	b103      	cbz	r3, 8011372 <_isatty_r+0x1a>
 8011370:	602b      	str	r3, [r5, #0]
 8011372:	bd38      	pop	{r3, r4, r5, pc}
 8011374:	1ffeff74 	.word	0x1ffeff74

08011378 <_malloc_usable_size_r>:
 8011378:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801137c:	2800      	cmp	r0, #0
 801137e:	bfbe      	ittt	lt
 8011380:	1809      	addlt	r1, r1, r0
 8011382:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8011386:	18c0      	addlt	r0, r0, r3
 8011388:	3804      	subs	r0, #4
 801138a:	4770      	bx	lr

0801138c <__aeabi_d2iz>:
 801138c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8011390:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8011394:	d215      	bcs.n	80113c2 <__aeabi_d2iz+0x36>
 8011396:	d511      	bpl.n	80113bc <__aeabi_d2iz+0x30>
 8011398:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 801139c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80113a0:	d912      	bls.n	80113c8 <__aeabi_d2iz+0x3c>
 80113a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80113a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80113aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80113ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80113b2:	fa23 f002 	lsr.w	r0, r3, r2
 80113b6:	bf18      	it	ne
 80113b8:	4240      	negne	r0, r0
 80113ba:	4770      	bx	lr
 80113bc:	f04f 0000 	mov.w	r0, #0
 80113c0:	4770      	bx	lr
 80113c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80113c6:	d105      	bne.n	80113d4 <__aeabi_d2iz+0x48>
 80113c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80113cc:	bf08      	it	eq
 80113ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80113d2:	4770      	bx	lr
 80113d4:	f04f 0000 	mov.w	r0, #0
 80113d8:	4770      	bx	lr
 80113da:	bf00      	nop

080113dc <_close>:
 80113dc:	4b02      	ldr	r3, [pc, #8]	; (80113e8 <_close+0xc>)
 80113de:	2258      	movs	r2, #88	; 0x58
 80113e0:	601a      	str	r2, [r3, #0]
 80113e2:	f04f 30ff 	mov.w	r0, #4294967295
 80113e6:	4770      	bx	lr
 80113e8:	1ffeff74 	.word	0x1ffeff74

080113ec <_fstat>:
 80113ec:	4b02      	ldr	r3, [pc, #8]	; (80113f8 <_fstat+0xc>)
 80113ee:	2258      	movs	r2, #88	; 0x58
 80113f0:	601a      	str	r2, [r3, #0]
 80113f2:	f04f 30ff 	mov.w	r0, #4294967295
 80113f6:	4770      	bx	lr
 80113f8:	1ffeff74 	.word	0x1ffeff74

080113fc <_isatty>:
 80113fc:	4b02      	ldr	r3, [pc, #8]	; (8011408 <_isatty+0xc>)
 80113fe:	2258      	movs	r2, #88	; 0x58
 8011400:	601a      	str	r2, [r3, #0]
 8011402:	2000      	movs	r0, #0
 8011404:	4770      	bx	lr
 8011406:	bf00      	nop
 8011408:	1ffeff74 	.word	0x1ffeff74

0801140c <_lseek>:
 801140c:	4b02      	ldr	r3, [pc, #8]	; (8011418 <_lseek+0xc>)
 801140e:	2258      	movs	r2, #88	; 0x58
 8011410:	601a      	str	r2, [r3, #0]
 8011412:	f04f 30ff 	mov.w	r0, #4294967295
 8011416:	4770      	bx	lr
 8011418:	1ffeff74 	.word	0x1ffeff74

0801141c <_read>:
 801141c:	4b02      	ldr	r3, [pc, #8]	; (8011428 <_read+0xc>)
 801141e:	2258      	movs	r2, #88	; 0x58
 8011420:	601a      	str	r2, [r3, #0]
 8011422:	f04f 30ff 	mov.w	r0, #4294967295
 8011426:	4770      	bx	lr
 8011428:	1ffeff74 	.word	0x1ffeff74

0801142c <_write>:
 801142c:	4b02      	ldr	r3, [pc, #8]	; (8011438 <_write+0xc>)
 801142e:	2258      	movs	r2, #88	; 0x58
 8011430:	601a      	str	r2, [r3, #0]
 8011432:	f04f 30ff 	mov.w	r0, #4294967295
 8011436:	4770      	bx	lr
 8011438:	1ffeff74 	.word	0x1ffeff74
 801143c:	524e4724 	.word	0x524e4724
 8011440:	000a434d 	.word	0x000a434d
 8011444:	2c524441 	.word	0x2c524441
 8011448:	252c6625 	.word	0x252c6625
 801144c:	66252c66 	.word	0x66252c66
 8011450:	2c66252c 	.word	0x2c66252c
 8011454:	252c6625 	.word	0x252c6625
 8011458:	66252c66 	.word	0x66252c66
 801145c:	2c66252c 	.word	0x2c66252c
 8011460:	00246625 	.word	0x00246625
 8011464:	00006b6f 	.word	0x00006b6f
 8011468:	534d4441 	.word	0x534d4441
 801146c:	2c66252c 	.word	0x2c66252c
 8011470:	252c6625 	.word	0x252c6625
 8011474:	66252c66 	.word	0x66252c66
 8011478:	2c66252c 	.word	0x2c66252c
 801147c:	252c6625 	.word	0x252c6625
 8011480:	66252c66 	.word	0x66252c66
 8011484:	2466252c 	.word	0x2466252c
 8011488:	00000000 	.word	0x00000000

0801148c <UART_0_channel_config>:
 801148c:	00002580 01080800 00000010              .%..........

08011498 <UART_0_tx_pin_config>:
 8011498:	00000090 00000001 00000002              ............

080114a4 <UART_0_tx_pin>:
 80114a4:	48028000 00000005 08011498              ...H........

080114b0 <UART_0_config>:
 80114b0:	0801148c 0800313d 00000000 00000000     ....=1..........
	...
 80114d0:	080114a4 00020000 00000000              ............

080114dc <UART_0_rx_pin_config>:
 80114dc:	00000000 00000001 00000002              ............

080114e8 <SPI_MASTER_0_MOSI>:
 80114e8:	48028500 00000000                       ...H....

080114f0 <SPI_MASTER_0_MISO>:
 80114f0:	48028600 00000005                       ...H....

080114f8 <SPI_MASTER_0_SCLKOUT>:
 80114f8:	48028500 00000002                       ...H....

08011500 <SPI_MASTER_0_SCLKOUT_Config>:
 8011500:	00000088 00000001 00000002 00000000     ................
 8011510:	00000000                                ....

08011514 <SPI_MASTER_0_Config>:
 8011514:	1ffe8850 08004585 080114e8 1ffe883c     P....E......<...
 8011524:	080114f0 1ffe89e0 00000000 00000000     ................
	...
 801153c:	080114f8 08011500 00000000 00000000     ................
	...
 8011590:	00000404 40000000 00000202 00000001     .......@........

080115a0 <INTERRUPT_0>:
 80115a0:	01003f5b                                [?..

080115a4 <INTERRUPT_1>:
 80115a4:	01003f39                                9?..

080115a8 <eth_phy_config>:
 80115a8:	00000001 00010000                       ........

080115b0 <ethbroadcast>:
 80115b0:	ffffffff 0000ffff                       ........

080115b8 <ethzero>:
	...

080115c0 <ip_addr_any>:
 80115c0:	00000000                                ....

080115c4 <memp_RAW_PCB>:
 80115c4:	0004001c 1ffe976c 1ffe8af4              ....l.......

080115d0 <memp_UDP_PCB>:
 80115d0:	00040020 1ffefb10 1ffe8af8               ...........

080115dc <memp_TCP_PCB>:
 80115dc:	0005009c 1ffefb94 1ffe8afc              ............

080115e8 <memp_TCP_PCB_LISTEN>:
 80115e8:	00050020 1ffefa6c 1ffe8b00               ...l.......

080115f4 <memp_TCP_SEG>:
 80115f4:	00080010 1ffe97e0 1ffe8b04              ............

08011600 <memp_SYS_TIMEOUT>:
 8011600:	000a0010 1ffefea4 1ffe8b08              ............

0801160c <memp_PBUF>:
 801160c:	00100010 1ffef968 1ffe8b0c              ....h.......

08011618 <memp_PBUF_POOL>:
 8011618:	00100610 1ffe9864 1ffe8b10              ....d.......

08011624 <memp_pools>:
 8011624:	080115c4 080115d0 080115dc 080115e8     ................
 8011634:	080115f4 08011600 0801160c 08011618     ................

08011644 <tcp_backoff>:
 8011644:	04030201 07070605 07070707 00000007     ................

08011654 <tcp_persist_backoff>:
 8011654:	180c0603 00786030                       ....0`x.

0801165c <tcp_pcb_lists>:
 801165c:	1ffeff60 1ffeff64 1ffeff58 1ffeff68     `...d...X...h...
 801166c:	63616e75 0064656b 65736e75 0000746e     unacked.unsent..

0801167c <lwip_cyclic_timers>:
 801167c:	000000fa 08007e8d 000003e8 08005429     .....~......)T..
 801168c:	01010230 00010000 00000000 00010000     0...............
 801169c:	01010102                                ....

080116a0 <atanlo>:
 80116a0:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 80116b0:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

080116c0 <atanhi>:
 80116c0:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 80116d0:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
 80116e0:	74727173 00000000 00000043              sqrt....C...

080116ec <_global_impure_ptr>:
 80116ec:	1ffe8910 00464e49 00666e69 004e414e     ....INF.inf.NAN.
 80116fc:	006e616e 31300030 35343332 39383736     nan.0.0123456789
 801170c:	44434241 30004645 34333231 38373635     ABCDEF.012345678
 801171c:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
 801172c:	4e614e00 00000000                       .NaN....

08011734 <__sf_fake_stdin>:
	...

08011754 <__sf_fake_stdout>:
	...

08011774 <__sf_fake_stderr>:
	...
 8011794:	49534f50 002e0058 00000000              POSIX.......

080117a0 <__mprec_tens>:
 80117a0:	00000000 3ff00000 00000000 40240000     .......?......$@
 80117b0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 80117c0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 80117d0:	00000000 412e8480 00000000 416312d0     .......A......cA
 80117e0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 80117f0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8011800:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8011810:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8011820:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8011830:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8011840:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8011850:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8011860:	79d99db4 44ea7843                       ...yCx.D

08011868 <__mprec_bigtens>:
 8011868:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8011878:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8011888:	7f73bf3c 75154fdd                       <.s..O.u

08011890 <p05.5277>:
 8011890:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
 80118a0:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
